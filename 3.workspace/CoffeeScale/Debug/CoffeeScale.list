
CoffeeScale.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000501c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f8  0800512c  0800512c  0001512c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005924  08005924  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08005924  08005924  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005924  08005924  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005924  08005924  00015924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005928  08005928  00015928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800592c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000674  20000080  080059ac  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006f4  080059ac  000206f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000167c4  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fbf  00000000  00000000  0003686d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001238  00000000  00000000  00039830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f0  00000000  00000000  0003aa68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a726  00000000  00000000  0003bb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014599  00000000  00000000  0005627e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009461f  00000000  00000000  0006a817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fee36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005038  00000000  00000000  000fee8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	08005114 	.word	0x08005114

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	08005114 	.word	0x08005114

08000150 <ShowScreen>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void ShowScreen( void *pvParameters) {
 8000150:	b580      	push	{r7, lr}
 8000152:	b090      	sub	sp, #64	; 0x40
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]

	char str[50];  // Declaramos un arreglo de caracteres para almacenar el resultado
	uint8_t i = 1;
 8000158:	2301      	movs	r3, #1
 800015a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t retVal;

    while (1){
    	sprintf(str,"Hello World %d",i++);
 800015e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000162:	1c5a      	adds	r2, r3, #1
 8000164:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 8000168:	461a      	mov	r2, r3
 800016a:	f107 030c 	add.w	r3, r7, #12
 800016e:	490a      	ldr	r1, [pc, #40]	; (8000198 <ShowScreen+0x48>)
 8000170:	4618      	mov	r0, r3
 8000172:	f004 fc59 	bl	8004a28 <siprintf>
    	ssd1306_SetCursor(10, 10);
 8000176:	210a      	movs	r1, #10
 8000178:	200a      	movs	r0, #10
 800017a:	f000 fc1f 	bl	80009bc <ssd1306_SetCursor>
    	retVal = ssd1306_WriteString(str, Font_7x10, White);
 800017e:	4a07      	ldr	r2, [pc, #28]	; (800019c <ShowScreen+0x4c>)
 8000180:	f107 000c 	add.w	r0, r7, #12
 8000184:	2301      	movs	r3, #1
 8000186:	ca06      	ldmia	r2, {r1, r2}
 8000188:	f000 fbf2 	bl	8000970 <ssd1306_WriteString>
 800018c:	4603      	mov	r3, r0
 800018e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    	ssd1306_UpdateScreen();
 8000192:	f000 faeb 	bl	800076c <ssd1306_UpdateScreen>
    	sprintf(str,"Hello World %d",i++);
 8000196:	e7e2      	b.n	800015e <ShowScreen+0xe>
 8000198:	0800512c 	.word	0x0800512c
 800019c:	20000004 	.word	0x20000004

080001a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001a6:	f000 fc53 	bl	8000a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001aa:	f000 f817 	bl	80001dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ae:	f000 f889 	bl	80002c4 <MX_GPIO_Init>
  MX_I2C2_Init();
 80001b2:	f000 f859 	bl	8000268 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  ssd1306_Init();
 80001b6:	f000 fa4d 	bl	8000654 <ssd1306_Init>

  xTaskCreate(ShowScreen,                  	// Nombre de la funci칩n que se ejecutar치 como tarea
 80001ba:	2300      	movs	r3, #0
 80001bc:	9301      	str	r3, [sp, #4]
 80001be:	2303      	movs	r3, #3
 80001c0:	9300      	str	r3, [sp, #0]
 80001c2:	2300      	movs	r3, #0
 80001c4:	2280      	movs	r2, #128	; 0x80
 80001c6:	4903      	ldr	r1, [pc, #12]	; (80001d4 <main+0x34>)
 80001c8:	4803      	ldr	r0, [pc, #12]	; (80001d8 <main+0x38>)
 80001ca:	f002 fa2f 	bl	800262c <xTaskCreate>
			  NULL,                    	// Puntero a informaci칩n que se pasar치 como argumento a la tarea
			  3,                       	// Prioridad de la tarea
			  NULL);    	// Puntero a variable para almacenar el identificador de la tarea


  vTaskStartScheduler();
 80001ce:	f002 fb99 	bl	8002904 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001d2:	e7fe      	b.n	80001d2 <main+0x32>
 80001d4:	0800513c 	.word	0x0800513c
 80001d8:	08000151 	.word	0x08000151

080001dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b090      	sub	sp, #64	; 0x40
 80001e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e2:	f107 0318 	add.w	r3, r7, #24
 80001e6:	2228      	movs	r2, #40	; 0x28
 80001e8:	2100      	movs	r1, #0
 80001ea:	4618      	mov	r0, r3
 80001ec:	f004 fb5e 	bl	80048ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f0:	1d3b      	adds	r3, r7, #4
 80001f2:	2200      	movs	r2, #0
 80001f4:	601a      	str	r2, [r3, #0]
 80001f6:	605a      	str	r2, [r3, #4]
 80001f8:	609a      	str	r2, [r3, #8]
 80001fa:	60da      	str	r2, [r3, #12]
 80001fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001fe:	2301      	movs	r3, #1
 8000200:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000202:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000206:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000208:	2300      	movs	r3, #0
 800020a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800020c:	2301      	movs	r3, #1
 800020e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000210:	2302      	movs	r3, #2
 8000212:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000214:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000218:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800021a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800021e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000220:	f107 0318 	add.w	r3, r7, #24
 8000224:	4618      	mov	r0, r3
 8000226:	f001 fb79 	bl	800191c <HAL_RCC_OscConfig>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d001      	beq.n	8000234 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000230:	f000 f888 	bl	8000344 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000234:	230f      	movs	r3, #15
 8000236:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000238:	2302      	movs	r3, #2
 800023a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800023c:	2300      	movs	r3, #0
 800023e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000240:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000244:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	2102      	movs	r1, #2
 800024e:	4618      	mov	r0, r3
 8000250:	f001 fde4 	bl	8001e1c <HAL_RCC_ClockConfig>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800025a:	f000 f873 	bl	8000344 <Error_Handler>
  }
}
 800025e:	bf00      	nop
 8000260:	3740      	adds	r7, #64	; 0x40
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
	...

08000268 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800026c:	4b12      	ldr	r3, [pc, #72]	; (80002b8 <MX_I2C2_Init+0x50>)
 800026e:	4a13      	ldr	r2, [pc, #76]	; (80002bc <MX_I2C2_Init+0x54>)
 8000270:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000272:	4b11      	ldr	r3, [pc, #68]	; (80002b8 <MX_I2C2_Init+0x50>)
 8000274:	4a12      	ldr	r2, [pc, #72]	; (80002c0 <MX_I2C2_Init+0x58>)
 8000276:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000278:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <MX_I2C2_Init+0x50>)
 800027a:	2200      	movs	r2, #0
 800027c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800027e:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <MX_I2C2_Init+0x50>)
 8000280:	2200      	movs	r2, #0
 8000282:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000284:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <MX_I2C2_Init+0x50>)
 8000286:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800028a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800028c:	4b0a      	ldr	r3, [pc, #40]	; (80002b8 <MX_I2C2_Init+0x50>)
 800028e:	2200      	movs	r2, #0
 8000290:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000292:	4b09      	ldr	r3, [pc, #36]	; (80002b8 <MX_I2C2_Init+0x50>)
 8000294:	2200      	movs	r2, #0
 8000296:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000298:	4b07      	ldr	r3, [pc, #28]	; (80002b8 <MX_I2C2_Init+0x50>)
 800029a:	2200      	movs	r2, #0
 800029c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800029e:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <MX_I2C2_Init+0x50>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <MX_I2C2_Init+0x50>)
 80002a6:	f000 fe8d 	bl	8000fc4 <HAL_I2C_Init>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80002b0:	f000 f848 	bl	8000344 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80002b4:	bf00      	nop
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	20000604 	.word	0x20000604
 80002bc:	40005800 	.word	0x40005800
 80002c0:	00061a80 	.word	0x00061a80

080002c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b085      	sub	sp, #20
 80002c8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002ca:	4b14      	ldr	r3, [pc, #80]	; (800031c <MX_GPIO_Init+0x58>)
 80002cc:	699b      	ldr	r3, [r3, #24]
 80002ce:	4a13      	ldr	r2, [pc, #76]	; (800031c <MX_GPIO_Init+0x58>)
 80002d0:	f043 0320 	orr.w	r3, r3, #32
 80002d4:	6193      	str	r3, [r2, #24]
 80002d6:	4b11      	ldr	r3, [pc, #68]	; (800031c <MX_GPIO_Init+0x58>)
 80002d8:	699b      	ldr	r3, [r3, #24]
 80002da:	f003 0320 	and.w	r3, r3, #32
 80002de:	60fb      	str	r3, [r7, #12]
 80002e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002e2:	4b0e      	ldr	r3, [pc, #56]	; (800031c <MX_GPIO_Init+0x58>)
 80002e4:	699b      	ldr	r3, [r3, #24]
 80002e6:	4a0d      	ldr	r2, [pc, #52]	; (800031c <MX_GPIO_Init+0x58>)
 80002e8:	f043 0308 	orr.w	r3, r3, #8
 80002ec:	6193      	str	r3, [r2, #24]
 80002ee:	4b0b      	ldr	r3, [pc, #44]	; (800031c <MX_GPIO_Init+0x58>)
 80002f0:	699b      	ldr	r3, [r3, #24]
 80002f2:	f003 0308 	and.w	r3, r3, #8
 80002f6:	60bb      	str	r3, [r7, #8]
 80002f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fa:	4b08      	ldr	r3, [pc, #32]	; (800031c <MX_GPIO_Init+0x58>)
 80002fc:	699b      	ldr	r3, [r3, #24]
 80002fe:	4a07      	ldr	r2, [pc, #28]	; (800031c <MX_GPIO_Init+0x58>)
 8000300:	f043 0304 	orr.w	r3, r3, #4
 8000304:	6193      	str	r3, [r2, #24]
 8000306:	4b05      	ldr	r3, [pc, #20]	; (800031c <MX_GPIO_Init+0x58>)
 8000308:	699b      	ldr	r3, [r3, #24]
 800030a:	f003 0304 	and.w	r3, r3, #4
 800030e:	607b      	str	r3, [r7, #4]
 8000310:	687b      	ldr	r3, [r7, #4]

}
 8000312:	bf00      	nop
 8000314:	3714      	adds	r7, #20
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr
 800031c:	40021000 	.word	0x40021000

08000320 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a04      	ldr	r2, [pc, #16]	; (8000340 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d101      	bne.n	8000336 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000332:	f000 fba3 	bl	8000a7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000336:	bf00      	nop
 8000338:	3708      	adds	r7, #8
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40012c00 	.word	0x40012c00

08000344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000348:	b672      	cpsid	i
}
 800034a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800034c:	e7fe      	b.n	800034c <Error_Handler+0x8>
	...

08000350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000350:	b480      	push	{r7}
 8000352:	b085      	sub	sp, #20
 8000354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000356:	4b15      	ldr	r3, [pc, #84]	; (80003ac <HAL_MspInit+0x5c>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	4a14      	ldr	r2, [pc, #80]	; (80003ac <HAL_MspInit+0x5c>)
 800035c:	f043 0301 	orr.w	r3, r3, #1
 8000360:	6193      	str	r3, [r2, #24]
 8000362:	4b12      	ldr	r3, [pc, #72]	; (80003ac <HAL_MspInit+0x5c>)
 8000364:	699b      	ldr	r3, [r3, #24]
 8000366:	f003 0301 	and.w	r3, r3, #1
 800036a:	60bb      	str	r3, [r7, #8]
 800036c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800036e:	4b0f      	ldr	r3, [pc, #60]	; (80003ac <HAL_MspInit+0x5c>)
 8000370:	69db      	ldr	r3, [r3, #28]
 8000372:	4a0e      	ldr	r2, [pc, #56]	; (80003ac <HAL_MspInit+0x5c>)
 8000374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000378:	61d3      	str	r3, [r2, #28]
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <HAL_MspInit+0x5c>)
 800037c:	69db      	ldr	r3, [r3, #28]
 800037e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000382:	607b      	str	r3, [r7, #4]
 8000384:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000386:	4b0a      	ldr	r3, [pc, #40]	; (80003b0 <HAL_MspInit+0x60>)
 8000388:	685b      	ldr	r3, [r3, #4]
 800038a:	60fb      	str	r3, [r7, #12]
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000392:	60fb      	str	r3, [r7, #12]
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800039a:	60fb      	str	r3, [r7, #12]
 800039c:	4a04      	ldr	r2, [pc, #16]	; (80003b0 <HAL_MspInit+0x60>)
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003a2:	bf00      	nop
 80003a4:	3714      	adds	r7, #20
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr
 80003ac:	40021000 	.word	0x40021000
 80003b0:	40010000 	.word	0x40010000

080003b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b088      	sub	sp, #32
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003bc:	f107 0310 	add.w	r3, r7, #16
 80003c0:	2200      	movs	r2, #0
 80003c2:	601a      	str	r2, [r3, #0]
 80003c4:	605a      	str	r2, [r3, #4]
 80003c6:	609a      	str	r2, [r3, #8]
 80003c8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	4a16      	ldr	r2, [pc, #88]	; (8000428 <HAL_I2C_MspInit+0x74>)
 80003d0:	4293      	cmp	r3, r2
 80003d2:	d124      	bne.n	800041e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003d4:	4b15      	ldr	r3, [pc, #84]	; (800042c <HAL_I2C_MspInit+0x78>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a14      	ldr	r2, [pc, #80]	; (800042c <HAL_I2C_MspInit+0x78>)
 80003da:	f043 0308 	orr.w	r3, r3, #8
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b12      	ldr	r3, [pc, #72]	; (800042c <HAL_I2C_MspInit+0x78>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f003 0308 	and.w	r3, r3, #8
 80003e8:	60fb      	str	r3, [r7, #12]
 80003ea:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80003ec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80003f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003f2:	2312      	movs	r3, #18
 80003f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003f6:	2303      	movs	r3, #3
 80003f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003fa:	f107 0310 	add.w	r3, r7, #16
 80003fe:	4619      	mov	r1, r3
 8000400:	480b      	ldr	r0, [pc, #44]	; (8000430 <HAL_I2C_MspInit+0x7c>)
 8000402:	f000 fc5b 	bl	8000cbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000406:	4b09      	ldr	r3, [pc, #36]	; (800042c <HAL_I2C_MspInit+0x78>)
 8000408:	69db      	ldr	r3, [r3, #28]
 800040a:	4a08      	ldr	r2, [pc, #32]	; (800042c <HAL_I2C_MspInit+0x78>)
 800040c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000410:	61d3      	str	r3, [r2, #28]
 8000412:	4b06      	ldr	r3, [pc, #24]	; (800042c <HAL_I2C_MspInit+0x78>)
 8000414:	69db      	ldr	r3, [r3, #28]
 8000416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800041a:	60bb      	str	r3, [r7, #8]
 800041c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800041e:	bf00      	nop
 8000420:	3720      	adds	r7, #32
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	40005800 	.word	0x40005800
 800042c:	40021000 	.word	0x40021000
 8000430:	40010c00 	.word	0x40010c00

08000434 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b08c      	sub	sp, #48	; 0x30
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800043c:	2300      	movs	r3, #0
 800043e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000440:	2300      	movs	r3, #0
 8000442:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000444:	2200      	movs	r2, #0
 8000446:	6879      	ldr	r1, [r7, #4]
 8000448:	2019      	movs	r0, #25
 800044a:	f000 fc0c 	bl	8000c66 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800044e:	2019      	movs	r0, #25
 8000450:	f000 fc25 	bl	8000c9e <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000454:	4b1e      	ldr	r3, [pc, #120]	; (80004d0 <HAL_InitTick+0x9c>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a1d      	ldr	r2, [pc, #116]	; (80004d0 <HAL_InitTick+0x9c>)
 800045a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800045e:	6193      	str	r3, [r2, #24]
 8000460:	4b1b      	ldr	r3, [pc, #108]	; (80004d0 <HAL_InitTick+0x9c>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000468:	60fb      	str	r3, [r7, #12]
 800046a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800046c:	f107 0210 	add.w	r2, r7, #16
 8000470:	f107 0314 	add.w	r3, r7, #20
 8000474:	4611      	mov	r1, r2
 8000476:	4618      	mov	r0, r3
 8000478:	f001 fe40 	bl	80020fc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800047c:	f001 fe2a 	bl	80020d4 <HAL_RCC_GetPCLK2Freq>
 8000480:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000484:	4a13      	ldr	r2, [pc, #76]	; (80004d4 <HAL_InitTick+0xa0>)
 8000486:	fba2 2303 	umull	r2, r3, r2, r3
 800048a:	0c9b      	lsrs	r3, r3, #18
 800048c:	3b01      	subs	r3, #1
 800048e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000490:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <HAL_InitTick+0xa4>)
 8000492:	4a12      	ldr	r2, [pc, #72]	; (80004dc <HAL_InitTick+0xa8>)
 8000494:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000496:	4b10      	ldr	r3, [pc, #64]	; (80004d8 <HAL_InitTick+0xa4>)
 8000498:	f240 32e7 	movw	r2, #999	; 0x3e7
 800049c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800049e:	4a0e      	ldr	r2, [pc, #56]	; (80004d8 <HAL_InitTick+0xa4>)
 80004a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004a2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80004a4:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <HAL_InitTick+0xa4>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004aa:	4b0b      	ldr	r3, [pc, #44]	; (80004d8 <HAL_InitTick+0xa4>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80004b0:	4809      	ldr	r0, [pc, #36]	; (80004d8 <HAL_InitTick+0xa4>)
 80004b2:	f001 fe71 	bl	8002198 <HAL_TIM_Base_Init>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d104      	bne.n	80004c6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80004bc:	4806      	ldr	r0, [pc, #24]	; (80004d8 <HAL_InitTick+0xa4>)
 80004be:	f001 fec3 	bl	8002248 <HAL_TIM_Base_Start_IT>
 80004c2:	4603      	mov	r3, r0
 80004c4:	e000      	b.n	80004c8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80004c6:	2301      	movs	r3, #1
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	3730      	adds	r7, #48	; 0x30
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	40021000 	.word	0x40021000
 80004d4:	431bde83 	.word	0x431bde83
 80004d8:	20000658 	.word	0x20000658
 80004dc:	40012c00 	.word	0x40012c00

080004e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <NMI_Handler+0x4>

080004e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004e6:	b480      	push	{r7}
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ea:	e7fe      	b.n	80004ea <HardFault_Handler+0x4>

080004ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004f0:	e7fe      	b.n	80004f0 <MemManage_Handler+0x4>

080004f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004f2:	b480      	push	{r7}
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004f6:	e7fe      	b.n	80004f6 <BusFault_Handler+0x4>

080004f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004fc:	e7fe      	b.n	80004fc <UsageFault_Handler+0x4>

080004fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004fe:	b480      	push	{r7}
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000502:	bf00      	nop
 8000504:	46bd      	mov	sp, r7
 8000506:	bc80      	pop	{r7}
 8000508:	4770      	bx	lr
	...

0800050c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000510:	4802      	ldr	r0, [pc, #8]	; (800051c <TIM1_UP_IRQHandler+0x10>)
 8000512:	f001 feeb 	bl	80022ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20000658 	.word	0x20000658

08000520 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b086      	sub	sp, #24
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000528:	4a14      	ldr	r2, [pc, #80]	; (800057c <_sbrk+0x5c>)
 800052a:	4b15      	ldr	r3, [pc, #84]	; (8000580 <_sbrk+0x60>)
 800052c:	1ad3      	subs	r3, r2, r3
 800052e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000530:	697b      	ldr	r3, [r7, #20]
 8000532:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000534:	4b13      	ldr	r3, [pc, #76]	; (8000584 <_sbrk+0x64>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d102      	bne.n	8000542 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800053c:	4b11      	ldr	r3, [pc, #68]	; (8000584 <_sbrk+0x64>)
 800053e:	4a12      	ldr	r2, [pc, #72]	; (8000588 <_sbrk+0x68>)
 8000540:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000542:	4b10      	ldr	r3, [pc, #64]	; (8000584 <_sbrk+0x64>)
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4413      	add	r3, r2
 800054a:	693a      	ldr	r2, [r7, #16]
 800054c:	429a      	cmp	r2, r3
 800054e:	d207      	bcs.n	8000560 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000550:	f004 f964 	bl	800481c <__errno>
 8000554:	4603      	mov	r3, r0
 8000556:	220c      	movs	r2, #12
 8000558:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800055a:	f04f 33ff 	mov.w	r3, #4294967295
 800055e:	e009      	b.n	8000574 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000560:	4b08      	ldr	r3, [pc, #32]	; (8000584 <_sbrk+0x64>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000566:	4b07      	ldr	r3, [pc, #28]	; (8000584 <_sbrk+0x64>)
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4413      	add	r3, r2
 800056e:	4a05      	ldr	r2, [pc, #20]	; (8000584 <_sbrk+0x64>)
 8000570:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000572:	68fb      	ldr	r3, [r7, #12]
}
 8000574:	4618      	mov	r0, r3
 8000576:	3718      	adds	r7, #24
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20005000 	.word	0x20005000
 8000580:	00000400 	.word	0x00000400
 8000584:	2000009c 	.word	0x2000009c
 8000588:	200006f8 	.word	0x200006f8

0800058c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr

08000598 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000598:	f7ff fff8 	bl	800058c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800059c:	480b      	ldr	r0, [pc, #44]	; (80005cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800059e:	490c      	ldr	r1, [pc, #48]	; (80005d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005a0:	4a0c      	ldr	r2, [pc, #48]	; (80005d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005a4:	e002      	b.n	80005ac <LoopCopyDataInit>

080005a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005aa:	3304      	adds	r3, #4

080005ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005b0:	d3f9      	bcc.n	80005a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005b2:	4a09      	ldr	r2, [pc, #36]	; (80005d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005b4:	4c09      	ldr	r4, [pc, #36]	; (80005dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005b8:	e001      	b.n	80005be <LoopFillZerobss>

080005ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005bc:	3204      	adds	r2, #4

080005be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005c0:	d3fb      	bcc.n	80005ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005c2:	f004 f931 	bl	8004828 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005c6:	f7ff fdeb 	bl	80001a0 <main>
  bx lr
 80005ca:	4770      	bx	lr
  ldr r0, =_sdata
 80005cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005d0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80005d4:	0800592c 	.word	0x0800592c
  ldr r2, =_sbss
 80005d8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80005dc:	200006f4 	.word	0x200006f4

080005e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005e0:	e7fe      	b.n	80005e0 <ADC1_2_IRQHandler>

080005e2 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80005e2:	b480      	push	{r7}
 80005e4:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80005e6:	bf00      	nop
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bc80      	pop	{r7}
 80005ec:	4770      	bx	lr
	...

080005f0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af04      	add	r7, sp, #16
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80005fa:	f04f 33ff 	mov.w	r3, #4294967295
 80005fe:	9302      	str	r3, [sp, #8]
 8000600:	2301      	movs	r3, #1
 8000602:	9301      	str	r3, [sp, #4]
 8000604:	1dfb      	adds	r3, r7, #7
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	2301      	movs	r3, #1
 800060a:	2200      	movs	r2, #0
 800060c:	2178      	movs	r1, #120	; 0x78
 800060e:	4803      	ldr	r0, [pc, #12]	; (800061c <ssd1306_WriteCommand+0x2c>)
 8000610:	f000 fe1c 	bl	800124c <HAL_I2C_Mem_Write>
}
 8000614:	bf00      	nop
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000604 	.word	0x20000604

08000620 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af04      	add	r7, sp, #16
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	b29b      	uxth	r3, r3
 800062e:	f04f 32ff 	mov.w	r2, #4294967295
 8000632:	9202      	str	r2, [sp, #8]
 8000634:	9301      	str	r3, [sp, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2301      	movs	r3, #1
 800063c:	2240      	movs	r2, #64	; 0x40
 800063e:	2178      	movs	r1, #120	; 0x78
 8000640:	4803      	ldr	r0, [pc, #12]	; (8000650 <ssd1306_WriteData+0x30>)
 8000642:	f000 fe03 	bl	800124c <HAL_I2C_Mem_Write>
}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000604 	.word	0x20000604

08000654 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000658:	f7ff ffc3 	bl	80005e2 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800065c:	2064      	movs	r0, #100	; 0x64
 800065e:	f000 fa29 	bl	8000ab4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000662:	2000      	movs	r0, #0
 8000664:	f000 f9d6 	bl	8000a14 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000668:	2020      	movs	r0, #32
 800066a:	f7ff ffc1 	bl	80005f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800066e:	2000      	movs	r0, #0
 8000670:	f7ff ffbe 	bl	80005f0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000674:	20b0      	movs	r0, #176	; 0xb0
 8000676:	f7ff ffbb 	bl	80005f0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800067a:	20c8      	movs	r0, #200	; 0xc8
 800067c:	f7ff ffb8 	bl	80005f0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000680:	2000      	movs	r0, #0
 8000682:	f7ff ffb5 	bl	80005f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000686:	2010      	movs	r0, #16
 8000688:	f7ff ffb2 	bl	80005f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800068c:	2040      	movs	r0, #64	; 0x40
 800068e:	f7ff ffaf 	bl	80005f0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000692:	20ff      	movs	r0, #255	; 0xff
 8000694:	f000 f9aa 	bl	80009ec <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000698:	20a1      	movs	r0, #161	; 0xa1
 800069a:	f7ff ffa9 	bl	80005f0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800069e:	20a6      	movs	r0, #166	; 0xa6
 80006a0:	f7ff ffa6 	bl	80005f0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80006a4:	20a8      	movs	r0, #168	; 0xa8
 80006a6:	f7ff ffa3 	bl	80005f0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80006aa:	203f      	movs	r0, #63	; 0x3f
 80006ac:	f7ff ffa0 	bl	80005f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80006b0:	20a4      	movs	r0, #164	; 0xa4
 80006b2:	f7ff ff9d 	bl	80005f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80006b6:	20d3      	movs	r0, #211	; 0xd3
 80006b8:	f7ff ff9a 	bl	80005f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80006bc:	2000      	movs	r0, #0
 80006be:	f7ff ff97 	bl	80005f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80006c2:	20d5      	movs	r0, #213	; 0xd5
 80006c4:	f7ff ff94 	bl	80005f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80006c8:	20f0      	movs	r0, #240	; 0xf0
 80006ca:	f7ff ff91 	bl	80005f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80006ce:	20d9      	movs	r0, #217	; 0xd9
 80006d0:	f7ff ff8e 	bl	80005f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80006d4:	2022      	movs	r0, #34	; 0x22
 80006d6:	f7ff ff8b 	bl	80005f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80006da:	20da      	movs	r0, #218	; 0xda
 80006dc:	f7ff ff88 	bl	80005f0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80006e0:	2012      	movs	r0, #18
 80006e2:	f7ff ff85 	bl	80005f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80006e6:	20db      	movs	r0, #219	; 0xdb
 80006e8:	f7ff ff82 	bl	80005f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80006ec:	2020      	movs	r0, #32
 80006ee:	f7ff ff7f 	bl	80005f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80006f2:	208d      	movs	r0, #141	; 0x8d
 80006f4:	f7ff ff7c 	bl	80005f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80006f8:	2014      	movs	r0, #20
 80006fa:	f7ff ff79 	bl	80005f0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80006fe:	2001      	movs	r0, #1
 8000700:	f000 f988 	bl	8000a14 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000704:	2000      	movs	r0, #0
 8000706:	f000 f80f 	bl	8000728 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800070a:	f000 f82f 	bl	800076c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800070e:	4b05      	ldr	r3, [pc, #20]	; (8000724 <ssd1306_Init+0xd0>)
 8000710:	2200      	movs	r2, #0
 8000712:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000714:	4b03      	ldr	r3, [pc, #12]	; (8000724 <ssd1306_Init+0xd0>)
 8000716:	2200      	movs	r2, #0
 8000718:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800071a:	4b02      	ldr	r3, [pc, #8]	; (8000724 <ssd1306_Init+0xd0>)
 800071c:	2201      	movs	r2, #1
 800071e:	711a      	strb	r2, [r3, #4]
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	200004a0 	.word	0x200004a0

08000728 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	e00d      	b.n	8000754 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d101      	bne.n	8000742 <ssd1306_Fill+0x1a>
 800073e:	2100      	movs	r1, #0
 8000740:	e000      	b.n	8000744 <ssd1306_Fill+0x1c>
 8000742:	21ff      	movs	r1, #255	; 0xff
 8000744:	4a08      	ldr	r2, [pc, #32]	; (8000768 <ssd1306_Fill+0x40>)
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	4413      	add	r3, r2
 800074a:	460a      	mov	r2, r1
 800074c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	3301      	adds	r3, #1
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800075a:	d3ed      	bcc.n	8000738 <ssd1306_Fill+0x10>
    }
}
 800075c:	bf00      	nop
 800075e:	bf00      	nop
 8000760:	3714      	adds	r7, #20
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr
 8000768:	200000a0 	.word	0x200000a0

0800076c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000772:	2300      	movs	r3, #0
 8000774:	71fb      	strb	r3, [r7, #7]
 8000776:	e016      	b.n	80007a6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	3b50      	subs	r3, #80	; 0x50
 800077c:	b2db      	uxtb	r3, r3
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff ff36 	bl	80005f0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000784:	2000      	movs	r0, #0
 8000786:	f7ff ff33 	bl	80005f0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800078a:	2010      	movs	r0, #16
 800078c:	f7ff ff30 	bl	80005f0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	01db      	lsls	r3, r3, #7
 8000794:	4a08      	ldr	r2, [pc, #32]	; (80007b8 <ssd1306_UpdateScreen+0x4c>)
 8000796:	4413      	add	r3, r2
 8000798:	2180      	movs	r1, #128	; 0x80
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff ff40 	bl	8000620 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	3301      	adds	r3, #1
 80007a4:	71fb      	strb	r3, [r7, #7]
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	2b07      	cmp	r3, #7
 80007aa:	d9e5      	bls.n	8000778 <ssd1306_UpdateScreen+0xc>
    }
}
 80007ac:	bf00      	nop
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	200000a0 	.word	0x200000a0

080007bc <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
 80007c6:	460b      	mov	r3, r1
 80007c8:	71bb      	strb	r3, [r7, #6]
 80007ca:	4613      	mov	r3, r2
 80007cc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80007ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	db3d      	blt.n	8000852 <ssd1306_DrawPixel+0x96>
 80007d6:	79bb      	ldrb	r3, [r7, #6]
 80007d8:	2b3f      	cmp	r3, #63	; 0x3f
 80007da:	d83a      	bhi.n	8000852 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80007dc:	797b      	ldrb	r3, [r7, #5]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d11a      	bne.n	8000818 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80007e2:	79fa      	ldrb	r2, [r7, #7]
 80007e4:	79bb      	ldrb	r3, [r7, #6]
 80007e6:	08db      	lsrs	r3, r3, #3
 80007e8:	b2d8      	uxtb	r0, r3
 80007ea:	4603      	mov	r3, r0
 80007ec:	01db      	lsls	r3, r3, #7
 80007ee:	4413      	add	r3, r2
 80007f0:	4a1a      	ldr	r2, [pc, #104]	; (800085c <ssd1306_DrawPixel+0xa0>)
 80007f2:	5cd3      	ldrb	r3, [r2, r3]
 80007f4:	b25a      	sxtb	r2, r3
 80007f6:	79bb      	ldrb	r3, [r7, #6]
 80007f8:	f003 0307 	and.w	r3, r3, #7
 80007fc:	2101      	movs	r1, #1
 80007fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000802:	b25b      	sxtb	r3, r3
 8000804:	4313      	orrs	r3, r2
 8000806:	b259      	sxtb	r1, r3
 8000808:	79fa      	ldrb	r2, [r7, #7]
 800080a:	4603      	mov	r3, r0
 800080c:	01db      	lsls	r3, r3, #7
 800080e:	4413      	add	r3, r2
 8000810:	b2c9      	uxtb	r1, r1
 8000812:	4a12      	ldr	r2, [pc, #72]	; (800085c <ssd1306_DrawPixel+0xa0>)
 8000814:	54d1      	strb	r1, [r2, r3]
 8000816:	e01d      	b.n	8000854 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000818:	79fa      	ldrb	r2, [r7, #7]
 800081a:	79bb      	ldrb	r3, [r7, #6]
 800081c:	08db      	lsrs	r3, r3, #3
 800081e:	b2d8      	uxtb	r0, r3
 8000820:	4603      	mov	r3, r0
 8000822:	01db      	lsls	r3, r3, #7
 8000824:	4413      	add	r3, r2
 8000826:	4a0d      	ldr	r2, [pc, #52]	; (800085c <ssd1306_DrawPixel+0xa0>)
 8000828:	5cd3      	ldrb	r3, [r2, r3]
 800082a:	b25a      	sxtb	r2, r3
 800082c:	79bb      	ldrb	r3, [r7, #6]
 800082e:	f003 0307 	and.w	r3, r3, #7
 8000832:	2101      	movs	r1, #1
 8000834:	fa01 f303 	lsl.w	r3, r1, r3
 8000838:	b25b      	sxtb	r3, r3
 800083a:	43db      	mvns	r3, r3
 800083c:	b25b      	sxtb	r3, r3
 800083e:	4013      	ands	r3, r2
 8000840:	b259      	sxtb	r1, r3
 8000842:	79fa      	ldrb	r2, [r7, #7]
 8000844:	4603      	mov	r3, r0
 8000846:	01db      	lsls	r3, r3, #7
 8000848:	4413      	add	r3, r2
 800084a:	b2c9      	uxtb	r1, r1
 800084c:	4a03      	ldr	r2, [pc, #12]	; (800085c <ssd1306_DrawPixel+0xa0>)
 800084e:	54d1      	strb	r1, [r2, r3]
 8000850:	e000      	b.n	8000854 <ssd1306_DrawPixel+0x98>
        return;
 8000852:	bf00      	nop
    }
}
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	200000a0 	.word	0x200000a0

08000860 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000860:	b590      	push	{r4, r7, lr}
 8000862:	b089      	sub	sp, #36	; 0x24
 8000864:	af00      	add	r7, sp, #0
 8000866:	4604      	mov	r4, r0
 8000868:	1d38      	adds	r0, r7, #4
 800086a:	e880 0006 	stmia.w	r0, {r1, r2}
 800086e:	461a      	mov	r2, r3
 8000870:	4623      	mov	r3, r4
 8000872:	73fb      	strb	r3, [r7, #15]
 8000874:	4613      	mov	r3, r2
 8000876:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000878:	7bfb      	ldrb	r3, [r7, #15]
 800087a:	2b1f      	cmp	r3, #31
 800087c:	d902      	bls.n	8000884 <ssd1306_WriteChar+0x24>
 800087e:	7bfb      	ldrb	r3, [r7, #15]
 8000880:	2b7e      	cmp	r3, #126	; 0x7e
 8000882:	d901      	bls.n	8000888 <ssd1306_WriteChar+0x28>
        return 0;
 8000884:	2300      	movs	r3, #0
 8000886:	e06d      	b.n	8000964 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000888:	4b38      	ldr	r3, [pc, #224]	; (800096c <ssd1306_WriteChar+0x10c>)
 800088a:	881b      	ldrh	r3, [r3, #0]
 800088c:	461a      	mov	r2, r3
 800088e:	793b      	ldrb	r3, [r7, #4]
 8000890:	4413      	add	r3, r2
 8000892:	2b80      	cmp	r3, #128	; 0x80
 8000894:	dc06      	bgt.n	80008a4 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000896:	4b35      	ldr	r3, [pc, #212]	; (800096c <ssd1306_WriteChar+0x10c>)
 8000898:	885b      	ldrh	r3, [r3, #2]
 800089a:	461a      	mov	r2, r3
 800089c:	797b      	ldrb	r3, [r7, #5]
 800089e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80008a0:	2b40      	cmp	r3, #64	; 0x40
 80008a2:	dd01      	ble.n	80008a8 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	e05d      	b.n	8000964 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
 80008ac:	e04c      	b.n	8000948 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80008ae:	68ba      	ldr	r2, [r7, #8]
 80008b0:	7bfb      	ldrb	r3, [r7, #15]
 80008b2:	3b20      	subs	r3, #32
 80008b4:	7979      	ldrb	r1, [r7, #5]
 80008b6:	fb01 f303 	mul.w	r3, r1, r3
 80008ba:	4619      	mov	r1, r3
 80008bc:	69fb      	ldr	r3, [r7, #28]
 80008be:	440b      	add	r3, r1
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	4413      	add	r3, r2
 80008c4:	881b      	ldrh	r3, [r3, #0]
 80008c6:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80008c8:	2300      	movs	r3, #0
 80008ca:	61bb      	str	r3, [r7, #24]
 80008cc:	e034      	b.n	8000938 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80008ce:	697a      	ldr	r2, [r7, #20]
 80008d0:	69bb      	ldr	r3, [r7, #24]
 80008d2:	fa02 f303 	lsl.w	r3, r2, r3
 80008d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d012      	beq.n	8000904 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80008de:	4b23      	ldr	r3, [pc, #140]	; (800096c <ssd1306_WriteChar+0x10c>)
 80008e0:	881b      	ldrh	r3, [r3, #0]
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	4413      	add	r3, r2
 80008ea:	b2d8      	uxtb	r0, r3
 80008ec:	4b1f      	ldr	r3, [pc, #124]	; (800096c <ssd1306_WriteChar+0x10c>)
 80008ee:	885b      	ldrh	r3, [r3, #2]
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	4413      	add	r3, r2
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	7bba      	ldrb	r2, [r7, #14]
 80008fc:	4619      	mov	r1, r3
 80008fe:	f7ff ff5d 	bl	80007bc <ssd1306_DrawPixel>
 8000902:	e016      	b.n	8000932 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000904:	4b19      	ldr	r3, [pc, #100]	; (800096c <ssd1306_WriteChar+0x10c>)
 8000906:	881b      	ldrh	r3, [r3, #0]
 8000908:	b2da      	uxtb	r2, r3
 800090a:	69bb      	ldr	r3, [r7, #24]
 800090c:	b2db      	uxtb	r3, r3
 800090e:	4413      	add	r3, r2
 8000910:	b2d8      	uxtb	r0, r3
 8000912:	4b16      	ldr	r3, [pc, #88]	; (800096c <ssd1306_WriteChar+0x10c>)
 8000914:	885b      	ldrh	r3, [r3, #2]
 8000916:	b2da      	uxtb	r2, r3
 8000918:	69fb      	ldr	r3, [r7, #28]
 800091a:	b2db      	uxtb	r3, r3
 800091c:	4413      	add	r3, r2
 800091e:	b2d9      	uxtb	r1, r3
 8000920:	7bbb      	ldrb	r3, [r7, #14]
 8000922:	2b00      	cmp	r3, #0
 8000924:	bf0c      	ite	eq
 8000926:	2301      	moveq	r3, #1
 8000928:	2300      	movne	r3, #0
 800092a:	b2db      	uxtb	r3, r3
 800092c:	461a      	mov	r2, r3
 800092e:	f7ff ff45 	bl	80007bc <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000932:	69bb      	ldr	r3, [r7, #24]
 8000934:	3301      	adds	r3, #1
 8000936:	61bb      	str	r3, [r7, #24]
 8000938:	793b      	ldrb	r3, [r7, #4]
 800093a:	461a      	mov	r2, r3
 800093c:	69bb      	ldr	r3, [r7, #24]
 800093e:	4293      	cmp	r3, r2
 8000940:	d3c5      	bcc.n	80008ce <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	3301      	adds	r3, #1
 8000946:	61fb      	str	r3, [r7, #28]
 8000948:	797b      	ldrb	r3, [r7, #5]
 800094a:	461a      	mov	r2, r3
 800094c:	69fb      	ldr	r3, [r7, #28]
 800094e:	4293      	cmp	r3, r2
 8000950:	d3ad      	bcc.n	80008ae <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <ssd1306_WriteChar+0x10c>)
 8000954:	881a      	ldrh	r2, [r3, #0]
 8000956:	793b      	ldrb	r3, [r7, #4]
 8000958:	b29b      	uxth	r3, r3
 800095a:	4413      	add	r3, r2
 800095c:	b29a      	uxth	r2, r3
 800095e:	4b03      	ldr	r3, [pc, #12]	; (800096c <ssd1306_WriteChar+0x10c>)
 8000960:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000962:	7bfb      	ldrb	r3, [r7, #15]
}
 8000964:	4618      	mov	r0, r3
 8000966:	3724      	adds	r7, #36	; 0x24
 8000968:	46bd      	mov	sp, r7
 800096a:	bd90      	pop	{r4, r7, pc}
 800096c:	200004a0 	.word	0x200004a0

08000970 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	1d38      	adds	r0, r7, #4
 800097a:	e880 0006 	stmia.w	r0, {r1, r2}
 800097e:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8000980:	e012      	b.n	80009a8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	7818      	ldrb	r0, [r3, #0]
 8000986:	78fb      	ldrb	r3, [r7, #3]
 8000988:	1d3a      	adds	r2, r7, #4
 800098a:	ca06      	ldmia	r2, {r1, r2}
 800098c:	f7ff ff68 	bl	8000860 <ssd1306_WriteChar>
 8000990:	4603      	mov	r3, r0
 8000992:	461a      	mov	r2, r3
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	429a      	cmp	r2, r3
 800099a:	d002      	beq.n	80009a2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	e008      	b.n	80009b4 <ssd1306_WriteString+0x44>
        }
        str++;
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	3301      	adds	r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d1e8      	bne.n	8000982 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	781b      	ldrb	r3, [r3, #0]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3710      	adds	r7, #16
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	460a      	mov	r2, r1
 80009c6:	71fb      	strb	r3, [r7, #7]
 80009c8:	4613      	mov	r3, r2
 80009ca:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <ssd1306_SetCursor+0x2c>)
 80009d2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80009d4:	79bb      	ldrb	r3, [r7, #6]
 80009d6:	b29a      	uxth	r2, r3
 80009d8:	4b03      	ldr	r3, [pc, #12]	; (80009e8 <ssd1306_SetCursor+0x2c>)
 80009da:	805a      	strh	r2, [r3, #2]
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	200004a0 	.word	0x200004a0

080009ec <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80009f6:	2381      	movs	r3, #129	; 0x81
 80009f8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff fdf7 	bl	80005f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff fdf3 	bl	80005f0 <ssd1306_WriteCommand>
}
 8000a0a:	bf00      	nop
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d005      	beq.n	8000a30 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000a24:	23af      	movs	r3, #175	; 0xaf
 8000a26:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <ssd1306_SetDisplayOn+0x38>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	715a      	strb	r2, [r3, #5]
 8000a2e:	e004      	b.n	8000a3a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000a30:	23ae      	movs	r3, #174	; 0xae
 8000a32:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <ssd1306_SetDisplayOn+0x38>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff fdd7 	bl	80005f0 <ssd1306_WriteCommand>
}
 8000a42:	bf00      	nop
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200004a0 	.word	0x200004a0

08000a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <HAL_Init+0x28>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a07      	ldr	r2, [pc, #28]	; (8000a78 <HAL_Init+0x28>)
 8000a5a:	f043 0310 	orr.w	r3, r3, #16
 8000a5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a60:	2003      	movs	r0, #3
 8000a62:	f000 f8f5 	bl	8000c50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a66:	200f      	movs	r0, #15
 8000a68:	f7ff fce4 	bl	8000434 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a6c:	f7ff fc70 	bl	8000350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40022000 	.word	0x40022000

08000a7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a80:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <HAL_IncTick+0x1c>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	461a      	mov	r2, r3
 8000a86:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <HAL_IncTick+0x20>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	4a03      	ldr	r2, [pc, #12]	; (8000a9c <HAL_IncTick+0x20>)
 8000a8e:	6013      	str	r3, [r2, #0]
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	20000010 	.word	0x20000010
 8000a9c:	200006a0 	.word	0x200006a0

08000aa0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa4:	4b02      	ldr	r3, [pc, #8]	; (8000ab0 <HAL_GetTick+0x10>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr
 8000ab0:	200006a0 	.word	0x200006a0

08000ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000abc:	f7ff fff0 	bl	8000aa0 <HAL_GetTick>
 8000ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000acc:	d005      	beq.n	8000ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ace:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <HAL_Delay+0x44>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ada:	bf00      	nop
 8000adc:	f7ff ffe0 	bl	8000aa0 <HAL_GetTick>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d8f7      	bhi.n	8000adc <HAL_Delay+0x28>
  {
  }
}
 8000aec:	bf00      	nop
 8000aee:	bf00      	nop
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000010 	.word	0x20000010

08000afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2e:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	60d3      	str	r3, [r2, #12]
}
 8000b34:	bf00      	nop
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc80      	pop	{r7}
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b48:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <__NVIC_GetPriorityGrouping+0x18>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	0a1b      	lsrs	r3, r3, #8
 8000b4e:	f003 0307 	and.w	r3, r3, #7
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	db0b      	blt.n	8000b8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	f003 021f 	and.w	r2, r3, #31
 8000b78:	4906      	ldr	r1, [pc, #24]	; (8000b94 <__NVIC_EnableIRQ+0x34>)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	095b      	lsrs	r3, r3, #5
 8000b80:	2001      	movs	r0, #1
 8000b82:	fa00 f202 	lsl.w	r2, r0, r2
 8000b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr
 8000b94:	e000e100 	.word	0xe000e100

08000b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	db0a      	blt.n	8000bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	490c      	ldr	r1, [pc, #48]	; (8000be4 <__NVIC_SetPriority+0x4c>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	0112      	lsls	r2, r2, #4
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	440b      	add	r3, r1
 8000bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc0:	e00a      	b.n	8000bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4908      	ldr	r1, [pc, #32]	; (8000be8 <__NVIC_SetPriority+0x50>)
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	f003 030f 	and.w	r3, r3, #15
 8000bce:	3b04      	subs	r3, #4
 8000bd0:	0112      	lsls	r2, r2, #4
 8000bd2:	b2d2      	uxtb	r2, r2
 8000bd4:	440b      	add	r3, r1
 8000bd6:	761a      	strb	r2, [r3, #24]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000e100 	.word	0xe000e100
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b089      	sub	sp, #36	; 0x24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	f1c3 0307 	rsb	r3, r3, #7
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	bf28      	it	cs
 8000c0a:	2304      	movcs	r3, #4
 8000c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3304      	adds	r3, #4
 8000c12:	2b06      	cmp	r3, #6
 8000c14:	d902      	bls.n	8000c1c <NVIC_EncodePriority+0x30>
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3b03      	subs	r3, #3
 8000c1a:	e000      	b.n	8000c1e <NVIC_EncodePriority+0x32>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	f04f 32ff 	mov.w	r2, #4294967295
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43da      	mvns	r2, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	401a      	ands	r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c34:	f04f 31ff 	mov.w	r1, #4294967295
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3e:	43d9      	mvns	r1, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	4313      	orrs	r3, r2
         );
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3724      	adds	r7, #36	; 0x24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr

08000c50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f7ff ff4f 	bl	8000afc <__NVIC_SetPriorityGrouping>
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b086      	sub	sp, #24
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	60b9      	str	r1, [r7, #8]
 8000c70:	607a      	str	r2, [r7, #4]
 8000c72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c78:	f7ff ff64 	bl	8000b44 <__NVIC_GetPriorityGrouping>
 8000c7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	68b9      	ldr	r1, [r7, #8]
 8000c82:	6978      	ldr	r0, [r7, #20]
 8000c84:	f7ff ffb2 	bl	8000bec <NVIC_EncodePriority>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c8e:	4611      	mov	r1, r2
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ff81 	bl	8000b98 <__NVIC_SetPriority>
}
 8000c96:	bf00      	nop
 8000c98:	3718      	adds	r7, #24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ff57 	bl	8000b60 <__NVIC_EnableIRQ>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b08b      	sub	sp, #44	; 0x2c
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cce:	e169      	b.n	8000fa4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	69fa      	ldr	r2, [r7, #28]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	f040 8158 	bne.w	8000f9e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	4a9a      	ldr	r2, [pc, #616]	; (8000f5c <HAL_GPIO_Init+0x2a0>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d05e      	beq.n	8000db6 <HAL_GPIO_Init+0xfa>
 8000cf8:	4a98      	ldr	r2, [pc, #608]	; (8000f5c <HAL_GPIO_Init+0x2a0>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d875      	bhi.n	8000dea <HAL_GPIO_Init+0x12e>
 8000cfe:	4a98      	ldr	r2, [pc, #608]	; (8000f60 <HAL_GPIO_Init+0x2a4>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d058      	beq.n	8000db6 <HAL_GPIO_Init+0xfa>
 8000d04:	4a96      	ldr	r2, [pc, #600]	; (8000f60 <HAL_GPIO_Init+0x2a4>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d86f      	bhi.n	8000dea <HAL_GPIO_Init+0x12e>
 8000d0a:	4a96      	ldr	r2, [pc, #600]	; (8000f64 <HAL_GPIO_Init+0x2a8>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d052      	beq.n	8000db6 <HAL_GPIO_Init+0xfa>
 8000d10:	4a94      	ldr	r2, [pc, #592]	; (8000f64 <HAL_GPIO_Init+0x2a8>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d869      	bhi.n	8000dea <HAL_GPIO_Init+0x12e>
 8000d16:	4a94      	ldr	r2, [pc, #592]	; (8000f68 <HAL_GPIO_Init+0x2ac>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d04c      	beq.n	8000db6 <HAL_GPIO_Init+0xfa>
 8000d1c:	4a92      	ldr	r2, [pc, #584]	; (8000f68 <HAL_GPIO_Init+0x2ac>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d863      	bhi.n	8000dea <HAL_GPIO_Init+0x12e>
 8000d22:	4a92      	ldr	r2, [pc, #584]	; (8000f6c <HAL_GPIO_Init+0x2b0>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d046      	beq.n	8000db6 <HAL_GPIO_Init+0xfa>
 8000d28:	4a90      	ldr	r2, [pc, #576]	; (8000f6c <HAL_GPIO_Init+0x2b0>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d85d      	bhi.n	8000dea <HAL_GPIO_Init+0x12e>
 8000d2e:	2b12      	cmp	r3, #18
 8000d30:	d82a      	bhi.n	8000d88 <HAL_GPIO_Init+0xcc>
 8000d32:	2b12      	cmp	r3, #18
 8000d34:	d859      	bhi.n	8000dea <HAL_GPIO_Init+0x12e>
 8000d36:	a201      	add	r2, pc, #4	; (adr r2, 8000d3c <HAL_GPIO_Init+0x80>)
 8000d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d3c:	08000db7 	.word	0x08000db7
 8000d40:	08000d91 	.word	0x08000d91
 8000d44:	08000da3 	.word	0x08000da3
 8000d48:	08000de5 	.word	0x08000de5
 8000d4c:	08000deb 	.word	0x08000deb
 8000d50:	08000deb 	.word	0x08000deb
 8000d54:	08000deb 	.word	0x08000deb
 8000d58:	08000deb 	.word	0x08000deb
 8000d5c:	08000deb 	.word	0x08000deb
 8000d60:	08000deb 	.word	0x08000deb
 8000d64:	08000deb 	.word	0x08000deb
 8000d68:	08000deb 	.word	0x08000deb
 8000d6c:	08000deb 	.word	0x08000deb
 8000d70:	08000deb 	.word	0x08000deb
 8000d74:	08000deb 	.word	0x08000deb
 8000d78:	08000deb 	.word	0x08000deb
 8000d7c:	08000deb 	.word	0x08000deb
 8000d80:	08000d99 	.word	0x08000d99
 8000d84:	08000dad 	.word	0x08000dad
 8000d88:	4a79      	ldr	r2, [pc, #484]	; (8000f70 <HAL_GPIO_Init+0x2b4>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d013      	beq.n	8000db6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d8e:	e02c      	b.n	8000dea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	623b      	str	r3, [r7, #32]
          break;
 8000d96:	e029      	b.n	8000dec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	623b      	str	r3, [r7, #32]
          break;
 8000da0:	e024      	b.n	8000dec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	3308      	adds	r3, #8
 8000da8:	623b      	str	r3, [r7, #32]
          break;
 8000daa:	e01f      	b.n	8000dec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	330c      	adds	r3, #12
 8000db2:	623b      	str	r3, [r7, #32]
          break;
 8000db4:	e01a      	b.n	8000dec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d102      	bne.n	8000dc4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	623b      	str	r3, [r7, #32]
          break;
 8000dc2:	e013      	b.n	8000dec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d105      	bne.n	8000dd8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dcc:	2308      	movs	r3, #8
 8000dce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	69fa      	ldr	r2, [r7, #28]
 8000dd4:	611a      	str	r2, [r3, #16]
          break;
 8000dd6:	e009      	b.n	8000dec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dd8:	2308      	movs	r3, #8
 8000dda:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	69fa      	ldr	r2, [r7, #28]
 8000de0:	615a      	str	r2, [r3, #20]
          break;
 8000de2:	e003      	b.n	8000dec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000de4:	2300      	movs	r3, #0
 8000de6:	623b      	str	r3, [r7, #32]
          break;
 8000de8:	e000      	b.n	8000dec <HAL_GPIO_Init+0x130>
          break;
 8000dea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	2bff      	cmp	r3, #255	; 0xff
 8000df0:	d801      	bhi.n	8000df6 <HAL_GPIO_Init+0x13a>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	e001      	b.n	8000dfa <HAL_GPIO_Init+0x13e>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	3304      	adds	r3, #4
 8000dfa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	2bff      	cmp	r3, #255	; 0xff
 8000e00:	d802      	bhi.n	8000e08 <HAL_GPIO_Init+0x14c>
 8000e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	e002      	b.n	8000e0e <HAL_GPIO_Init+0x152>
 8000e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0a:	3b08      	subs	r3, #8
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	210f      	movs	r1, #15
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	401a      	ands	r2, r3
 8000e20:	6a39      	ldr	r1, [r7, #32]
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	fa01 f303 	lsl.w	r3, r1, r3
 8000e28:	431a      	orrs	r2, r3
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f000 80b1 	beq.w	8000f9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e3c:	4b4d      	ldr	r3, [pc, #308]	; (8000f74 <HAL_GPIO_Init+0x2b8>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	4a4c      	ldr	r2, [pc, #304]	; (8000f74 <HAL_GPIO_Init+0x2b8>)
 8000e42:	f043 0301 	orr.w	r3, r3, #1
 8000e46:	6193      	str	r3, [r2, #24]
 8000e48:	4b4a      	ldr	r3, [pc, #296]	; (8000f74 <HAL_GPIO_Init+0x2b8>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e54:	4a48      	ldr	r2, [pc, #288]	; (8000f78 <HAL_GPIO_Init+0x2bc>)
 8000e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e58:	089b      	lsrs	r3, r3, #2
 8000e5a:	3302      	adds	r3, #2
 8000e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e64:	f003 0303 	and.w	r3, r3, #3
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	220f      	movs	r2, #15
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	43db      	mvns	r3, r3
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	4013      	ands	r3, r2
 8000e76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a40      	ldr	r2, [pc, #256]	; (8000f7c <HAL_GPIO_Init+0x2c0>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d013      	beq.n	8000ea8 <HAL_GPIO_Init+0x1ec>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a3f      	ldr	r2, [pc, #252]	; (8000f80 <HAL_GPIO_Init+0x2c4>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d00d      	beq.n	8000ea4 <HAL_GPIO_Init+0x1e8>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a3e      	ldr	r2, [pc, #248]	; (8000f84 <HAL_GPIO_Init+0x2c8>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d007      	beq.n	8000ea0 <HAL_GPIO_Init+0x1e4>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a3d      	ldr	r2, [pc, #244]	; (8000f88 <HAL_GPIO_Init+0x2cc>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d101      	bne.n	8000e9c <HAL_GPIO_Init+0x1e0>
 8000e98:	2303      	movs	r3, #3
 8000e9a:	e006      	b.n	8000eaa <HAL_GPIO_Init+0x1ee>
 8000e9c:	2304      	movs	r3, #4
 8000e9e:	e004      	b.n	8000eaa <HAL_GPIO_Init+0x1ee>
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	e002      	b.n	8000eaa <HAL_GPIO_Init+0x1ee>
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e000      	b.n	8000eaa <HAL_GPIO_Init+0x1ee>
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eac:	f002 0203 	and.w	r2, r2, #3
 8000eb0:	0092      	lsls	r2, r2, #2
 8000eb2:	4093      	lsls	r3, r2
 8000eb4:	68fa      	ldr	r2, [r7, #12]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000eba:	492f      	ldr	r1, [pc, #188]	; (8000f78 <HAL_GPIO_Init+0x2bc>)
 8000ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebe:	089b      	lsrs	r3, r3, #2
 8000ec0:	3302      	adds	r3, #2
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d006      	beq.n	8000ee2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ed4:	4b2d      	ldr	r3, [pc, #180]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000ed6:	689a      	ldr	r2, [r3, #8]
 8000ed8:	492c      	ldr	r1, [pc, #176]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	608b      	str	r3, [r1, #8]
 8000ee0:	e006      	b.n	8000ef0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ee2:	4b2a      	ldr	r3, [pc, #168]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000ee4:	689a      	ldr	r2, [r3, #8]
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	4928      	ldr	r1, [pc, #160]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000eec:	4013      	ands	r3, r2
 8000eee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d006      	beq.n	8000f0a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000efc:	4b23      	ldr	r3, [pc, #140]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000efe:	68da      	ldr	r2, [r3, #12]
 8000f00:	4922      	ldr	r1, [pc, #136]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	60cb      	str	r3, [r1, #12]
 8000f08:	e006      	b.n	8000f18 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f0a:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f0c:	68da      	ldr	r2, [r3, #12]
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	43db      	mvns	r3, r3
 8000f12:	491e      	ldr	r1, [pc, #120]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f14:	4013      	ands	r3, r2
 8000f16:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d006      	beq.n	8000f32 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f24:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f26:	685a      	ldr	r2, [r3, #4]
 8000f28:	4918      	ldr	r1, [pc, #96]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	604b      	str	r3, [r1, #4]
 8000f30:	e006      	b.n	8000f40 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f32:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	4914      	ldr	r1, [pc, #80]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d021      	beq.n	8000f90 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	490e      	ldr	r1, [pc, #56]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	600b      	str	r3, [r1, #0]
 8000f58:	e021      	b.n	8000f9e <HAL_GPIO_Init+0x2e2>
 8000f5a:	bf00      	nop
 8000f5c:	10320000 	.word	0x10320000
 8000f60:	10310000 	.word	0x10310000
 8000f64:	10220000 	.word	0x10220000
 8000f68:	10210000 	.word	0x10210000
 8000f6c:	10120000 	.word	0x10120000
 8000f70:	10110000 	.word	0x10110000
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40010000 	.word	0x40010000
 8000f7c:	40010800 	.word	0x40010800
 8000f80:	40010c00 	.word	0x40010c00
 8000f84:	40011000 	.word	0x40011000
 8000f88:	40011400 	.word	0x40011400
 8000f8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f90:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <HAL_GPIO_Init+0x304>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	43db      	mvns	r3, r3
 8000f98:	4909      	ldr	r1, [pc, #36]	; (8000fc0 <HAL_GPIO_Init+0x304>)
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000faa:	fa22 f303 	lsr.w	r3, r2, r3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	f47f ae8e 	bne.w	8000cd0 <HAL_GPIO_Init+0x14>
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	bf00      	nop
 8000fb8:	372c      	adds	r7, #44	; 0x2c
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr
 8000fc0:	40010400 	.word	0x40010400

08000fc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d101      	bne.n	8000fd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e12b      	b.n	800122e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d106      	bne.n	8000ff0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff f9e2 	bl	80003b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2224      	movs	r2, #36	; 0x24
 8000ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f022 0201 	bic.w	r2, r2, #1
 8001006:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001016:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001026:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001028:	f001 f840 	bl	80020ac <HAL_RCC_GetPCLK1Freq>
 800102c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	4a81      	ldr	r2, [pc, #516]	; (8001238 <HAL_I2C_Init+0x274>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d807      	bhi.n	8001048 <HAL_I2C_Init+0x84>
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4a80      	ldr	r2, [pc, #512]	; (800123c <HAL_I2C_Init+0x278>)
 800103c:	4293      	cmp	r3, r2
 800103e:	bf94      	ite	ls
 8001040:	2301      	movls	r3, #1
 8001042:	2300      	movhi	r3, #0
 8001044:	b2db      	uxtb	r3, r3
 8001046:	e006      	b.n	8001056 <HAL_I2C_Init+0x92>
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4a7d      	ldr	r2, [pc, #500]	; (8001240 <HAL_I2C_Init+0x27c>)
 800104c:	4293      	cmp	r3, r2
 800104e:	bf94      	ite	ls
 8001050:	2301      	movls	r3, #1
 8001052:	2300      	movhi	r3, #0
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e0e7      	b.n	800122e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	4a78      	ldr	r2, [pc, #480]	; (8001244 <HAL_I2C_Init+0x280>)
 8001062:	fba2 2303 	umull	r2, r3, r2, r3
 8001066:	0c9b      	lsrs	r3, r3, #18
 8001068:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	68ba      	ldr	r2, [r7, #8]
 800107a:	430a      	orrs	r2, r1
 800107c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	6a1b      	ldr	r3, [r3, #32]
 8001084:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	4a6a      	ldr	r2, [pc, #424]	; (8001238 <HAL_I2C_Init+0x274>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d802      	bhi.n	8001098 <HAL_I2C_Init+0xd4>
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	3301      	adds	r3, #1
 8001096:	e009      	b.n	80010ac <HAL_I2C_Init+0xe8>
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800109e:	fb02 f303 	mul.w	r3, r2, r3
 80010a2:	4a69      	ldr	r2, [pc, #420]	; (8001248 <HAL_I2C_Init+0x284>)
 80010a4:	fba2 2303 	umull	r2, r3, r2, r3
 80010a8:	099b      	lsrs	r3, r3, #6
 80010aa:	3301      	adds	r3, #1
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	6812      	ldr	r2, [r2, #0]
 80010b0:	430b      	orrs	r3, r1
 80010b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80010be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	495c      	ldr	r1, [pc, #368]	; (8001238 <HAL_I2C_Init+0x274>)
 80010c8:	428b      	cmp	r3, r1
 80010ca:	d819      	bhi.n	8001100 <HAL_I2C_Init+0x13c>
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	1e59      	subs	r1, r3, #1
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80010da:	1c59      	adds	r1, r3, #1
 80010dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80010e0:	400b      	ands	r3, r1
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d00a      	beq.n	80010fc <HAL_I2C_Init+0x138>
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	1e59      	subs	r1, r3, #1
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80010f4:	3301      	adds	r3, #1
 80010f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010fa:	e051      	b.n	80011a0 <HAL_I2C_Init+0x1dc>
 80010fc:	2304      	movs	r3, #4
 80010fe:	e04f      	b.n	80011a0 <HAL_I2C_Init+0x1dc>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d111      	bne.n	800112c <HAL_I2C_Init+0x168>
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	1e58      	subs	r0, r3, #1
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6859      	ldr	r1, [r3, #4]
 8001110:	460b      	mov	r3, r1
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	440b      	add	r3, r1
 8001116:	fbb0 f3f3 	udiv	r3, r0, r3
 800111a:	3301      	adds	r3, #1
 800111c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001120:	2b00      	cmp	r3, #0
 8001122:	bf0c      	ite	eq
 8001124:	2301      	moveq	r3, #1
 8001126:	2300      	movne	r3, #0
 8001128:	b2db      	uxtb	r3, r3
 800112a:	e012      	b.n	8001152 <HAL_I2C_Init+0x18e>
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	1e58      	subs	r0, r3, #1
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6859      	ldr	r1, [r3, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	440b      	add	r3, r1
 800113a:	0099      	lsls	r1, r3, #2
 800113c:	440b      	add	r3, r1
 800113e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001142:	3301      	adds	r3, #1
 8001144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001148:	2b00      	cmp	r3, #0
 800114a:	bf0c      	ite	eq
 800114c:	2301      	moveq	r3, #1
 800114e:	2300      	movne	r3, #0
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_I2C_Init+0x196>
 8001156:	2301      	movs	r3, #1
 8001158:	e022      	b.n	80011a0 <HAL_I2C_Init+0x1dc>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d10e      	bne.n	8001180 <HAL_I2C_Init+0x1bc>
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	1e58      	subs	r0, r3, #1
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6859      	ldr	r1, [r3, #4]
 800116a:	460b      	mov	r3, r1
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	440b      	add	r3, r1
 8001170:	fbb0 f3f3 	udiv	r3, r0, r3
 8001174:	3301      	adds	r3, #1
 8001176:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800117a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800117e:	e00f      	b.n	80011a0 <HAL_I2C_Init+0x1dc>
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	1e58      	subs	r0, r3, #1
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6859      	ldr	r1, [r3, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	440b      	add	r3, r1
 800118e:	0099      	lsls	r1, r3, #2
 8001190:	440b      	add	r3, r1
 8001192:	fbb0 f3f3 	udiv	r3, r0, r3
 8001196:	3301      	adds	r3, #1
 8001198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800119c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011a0:	6879      	ldr	r1, [r7, #4]
 80011a2:	6809      	ldr	r1, [r1, #0]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	69da      	ldr	r2, [r3, #28]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a1b      	ldr	r3, [r3, #32]
 80011ba:	431a      	orrs	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	430a      	orrs	r2, r1
 80011c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80011ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	6911      	ldr	r1, [r2, #16]
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	68d2      	ldr	r2, [r2, #12]
 80011da:	4311      	orrs	r1, r2
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	6812      	ldr	r2, [r2, #0]
 80011e0:	430b      	orrs	r3, r1
 80011e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	695a      	ldr	r2, [r3, #20]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	699b      	ldr	r3, [r3, #24]
 80011f6:	431a      	orrs	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	430a      	orrs	r2, r1
 80011fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f042 0201 	orr.w	r2, r2, #1
 800120e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2220      	movs	r2, #32
 800121a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	000186a0 	.word	0x000186a0
 800123c:	001e847f 	.word	0x001e847f
 8001240:	003d08ff 	.word	0x003d08ff
 8001244:	431bde83 	.word	0x431bde83
 8001248:	10624dd3 	.word	0x10624dd3

0800124c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b088      	sub	sp, #32
 8001250:	af02      	add	r7, sp, #8
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	4608      	mov	r0, r1
 8001256:	4611      	mov	r1, r2
 8001258:	461a      	mov	r2, r3
 800125a:	4603      	mov	r3, r0
 800125c:	817b      	strh	r3, [r7, #10]
 800125e:	460b      	mov	r3, r1
 8001260:	813b      	strh	r3, [r7, #8]
 8001262:	4613      	mov	r3, r2
 8001264:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001266:	f7ff fc1b 	bl	8000aa0 <HAL_GetTick>
 800126a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b20      	cmp	r3, #32
 8001276:	f040 80d9 	bne.w	800142c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	2319      	movs	r3, #25
 8001280:	2201      	movs	r2, #1
 8001282:	496d      	ldr	r1, [pc, #436]	; (8001438 <HAL_I2C_Mem_Write+0x1ec>)
 8001284:	68f8      	ldr	r0, [r7, #12]
 8001286:	f000 f971 	bl	800156c <I2C_WaitOnFlagUntilTimeout>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001290:	2302      	movs	r3, #2
 8001292:	e0cc      	b.n	800142e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800129a:	2b01      	cmp	r3, #1
 800129c:	d101      	bne.n	80012a2 <HAL_I2C_Mem_Write+0x56>
 800129e:	2302      	movs	r3, #2
 80012a0:	e0c5      	b.n	800142e <HAL_I2C_Mem_Write+0x1e2>
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	2201      	movs	r2, #1
 80012a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d007      	beq.n	80012c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f042 0201 	orr.w	r2, r2, #1
 80012c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2221      	movs	r2, #33	; 0x21
 80012dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2240      	movs	r2, #64	; 0x40
 80012e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2200      	movs	r2, #0
 80012ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	6a3a      	ldr	r2, [r7, #32]
 80012f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80012f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012fe:	b29a      	uxth	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4a4d      	ldr	r2, [pc, #308]	; (800143c <HAL_I2C_Mem_Write+0x1f0>)
 8001308:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800130a:	88f8      	ldrh	r0, [r7, #6]
 800130c:	893a      	ldrh	r2, [r7, #8]
 800130e:	8979      	ldrh	r1, [r7, #10]
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	9301      	str	r3, [sp, #4]
 8001314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	4603      	mov	r3, r0
 800131a:	68f8      	ldr	r0, [r7, #12]
 800131c:	f000 f890 	bl	8001440 <I2C_RequestMemoryWrite>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d052      	beq.n	80013cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e081      	b.n	800142e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800132a:	697a      	ldr	r2, [r7, #20]
 800132c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	f000 fa36 	bl	80017a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d00d      	beq.n	8001356 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	2b04      	cmp	r3, #4
 8001340:	d107      	bne.n	8001352 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001350:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e06b      	b.n	800142e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135a:	781a      	ldrb	r2, [r3, #0]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001366:	1c5a      	adds	r2, r3, #1
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001370:	3b01      	subs	r3, #1
 8001372:	b29a      	uxth	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800137c:	b29b      	uxth	r3, r3
 800137e:	3b01      	subs	r3, #1
 8001380:	b29a      	uxth	r2, r3
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	695b      	ldr	r3, [r3, #20]
 800138c:	f003 0304 	and.w	r3, r3, #4
 8001390:	2b04      	cmp	r3, #4
 8001392:	d11b      	bne.n	80013cc <HAL_I2C_Mem_Write+0x180>
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001398:	2b00      	cmp	r3, #0
 800139a:	d017      	beq.n	80013cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a0:	781a      	ldrb	r2, [r3, #0]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ac:	1c5a      	adds	r2, r3, #1
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013b6:	3b01      	subs	r3, #1
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	3b01      	subs	r3, #1
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1aa      	bne.n	800132a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013d4:	697a      	ldr	r2, [r7, #20]
 80013d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013d8:	68f8      	ldr	r0, [r7, #12]
 80013da:	f000 fa29 	bl	8001830 <I2C_WaitOnBTFFlagUntilTimeout>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d00d      	beq.n	8001400 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	2b04      	cmp	r3, #4
 80013ea:	d107      	bne.n	80013fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e016      	b.n	800142e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800140e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2220      	movs	r2, #32
 8001414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2200      	movs	r2, #0
 800141c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2200      	movs	r2, #0
 8001424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001428:	2300      	movs	r3, #0
 800142a:	e000      	b.n	800142e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800142c:	2302      	movs	r3, #2
  }
}
 800142e:	4618      	mov	r0, r3
 8001430:	3718      	adds	r7, #24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	00100002 	.word	0x00100002
 800143c:	ffff0000 	.word	0xffff0000

08001440 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af02      	add	r7, sp, #8
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	4608      	mov	r0, r1
 800144a:	4611      	mov	r1, r2
 800144c:	461a      	mov	r2, r3
 800144e:	4603      	mov	r3, r0
 8001450:	817b      	strh	r3, [r7, #10]
 8001452:	460b      	mov	r3, r1
 8001454:	813b      	strh	r3, [r7, #8]
 8001456:	4613      	mov	r3, r2
 8001458:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001468:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	6a3b      	ldr	r3, [r7, #32]
 8001470:	2200      	movs	r2, #0
 8001472:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001476:	68f8      	ldr	r0, [r7, #12]
 8001478:	f000 f878 	bl	800156c <I2C_WaitOnFlagUntilTimeout>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d00d      	beq.n	800149e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800148c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001490:	d103      	bne.n	800149a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001498:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e05f      	b.n	800155e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800149e:	897b      	ldrh	r3, [r7, #10]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	461a      	mov	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80014ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80014ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b0:	6a3a      	ldr	r2, [r7, #32]
 80014b2:	492d      	ldr	r1, [pc, #180]	; (8001568 <I2C_RequestMemoryWrite+0x128>)
 80014b4:	68f8      	ldr	r0, [r7, #12]
 80014b6:	f000 f8d3 	bl	8001660 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e04c      	b.n	800155e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014dc:	6a39      	ldr	r1, [r7, #32]
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f000 f95e 	bl	80017a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d00d      	beq.n	8001506 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	d107      	bne.n	8001502 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001500:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e02b      	b.n	800155e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001506:	88fb      	ldrh	r3, [r7, #6]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d105      	bne.n	8001518 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800150c:	893b      	ldrh	r3, [r7, #8]
 800150e:	b2da      	uxtb	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	611a      	str	r2, [r3, #16]
 8001516:	e021      	b.n	800155c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001518:	893b      	ldrh	r3, [r7, #8]
 800151a:	0a1b      	lsrs	r3, r3, #8
 800151c:	b29b      	uxth	r3, r3
 800151e:	b2da      	uxtb	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001528:	6a39      	ldr	r1, [r7, #32]
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f000 f938 	bl	80017a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00d      	beq.n	8001552 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	2b04      	cmp	r3, #4
 800153c:	d107      	bne.n	800154e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800154c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e005      	b.n	800155e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001552:	893b      	ldrh	r3, [r7, #8]
 8001554:	b2da      	uxtb	r2, r3
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	00010002 	.word	0x00010002

0800156c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	4613      	mov	r3, r2
 800157a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800157c:	e048      	b.n	8001610 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001584:	d044      	beq.n	8001610 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001586:	f7ff fa8b 	bl	8000aa0 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	429a      	cmp	r2, r3
 8001594:	d302      	bcc.n	800159c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d139      	bne.n	8001610 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	0c1b      	lsrs	r3, r3, #16
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d10d      	bne.n	80015c2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	695b      	ldr	r3, [r3, #20]
 80015ac:	43da      	mvns	r2, r3
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	4013      	ands	r3, r2
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	bf0c      	ite	eq
 80015b8:	2301      	moveq	r3, #1
 80015ba:	2300      	movne	r3, #0
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	461a      	mov	r2, r3
 80015c0:	e00c      	b.n	80015dc <I2C_WaitOnFlagUntilTimeout+0x70>
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	43da      	mvns	r2, r3
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	4013      	ands	r3, r2
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	bf0c      	ite	eq
 80015d4:	2301      	moveq	r3, #1
 80015d6:	2300      	movne	r3, #0
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	461a      	mov	r2, r3
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d116      	bne.n	8001610 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2200      	movs	r2, #0
 80015e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2220      	movs	r2, #32
 80015ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fc:	f043 0220 	orr.w	r2, r3, #32
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e023      	b.n	8001658 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	0c1b      	lsrs	r3, r3, #16
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b01      	cmp	r3, #1
 8001618:	d10d      	bne.n	8001636 <I2C_WaitOnFlagUntilTimeout+0xca>
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	43da      	mvns	r2, r3
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	4013      	ands	r3, r2
 8001626:	b29b      	uxth	r3, r3
 8001628:	2b00      	cmp	r3, #0
 800162a:	bf0c      	ite	eq
 800162c:	2301      	moveq	r3, #1
 800162e:	2300      	movne	r3, #0
 8001630:	b2db      	uxtb	r3, r3
 8001632:	461a      	mov	r2, r3
 8001634:	e00c      	b.n	8001650 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	43da      	mvns	r2, r3
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	4013      	ands	r3, r2
 8001642:	b29b      	uxth	r3, r3
 8001644:	2b00      	cmp	r3, #0
 8001646:	bf0c      	ite	eq
 8001648:	2301      	moveq	r3, #1
 800164a:	2300      	movne	r3, #0
 800164c:	b2db      	uxtb	r3, r3
 800164e:	461a      	mov	r2, r3
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	429a      	cmp	r2, r3
 8001654:	d093      	beq.n	800157e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	3710      	adds	r7, #16
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
 800166c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800166e:	e071      	b.n	8001754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800167a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800167e:	d123      	bne.n	80016c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800168e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001698:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2200      	movs	r2, #0
 800169e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2220      	movs	r2, #32
 80016a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	f043 0204 	orr.w	r2, r3, #4
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2200      	movs	r2, #0
 80016c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e067      	b.n	8001798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ce:	d041      	beq.n	8001754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016d0:	f7ff f9e6 	bl	8000aa0 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d302      	bcc.n	80016e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d136      	bne.n	8001754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	0c1b      	lsrs	r3, r3, #16
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d10c      	bne.n	800170a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	43da      	mvns	r2, r3
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	4013      	ands	r3, r2
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	bf14      	ite	ne
 8001702:	2301      	movne	r3, #1
 8001704:	2300      	moveq	r3, #0
 8001706:	b2db      	uxtb	r3, r3
 8001708:	e00b      	b.n	8001722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	43da      	mvns	r2, r3
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	4013      	ands	r3, r2
 8001716:	b29b      	uxth	r3, r3
 8001718:	2b00      	cmp	r3, #0
 800171a:	bf14      	ite	ne
 800171c:	2301      	movne	r3, #1
 800171e:	2300      	moveq	r3, #0
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	d016      	beq.n	8001754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2200      	movs	r2, #0
 800172a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2220      	movs	r2, #32
 8001730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001740:	f043 0220 	orr.w	r2, r3, #32
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e021      	b.n	8001798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	0c1b      	lsrs	r3, r3, #16
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b01      	cmp	r3, #1
 800175c:	d10c      	bne.n	8001778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	695b      	ldr	r3, [r3, #20]
 8001764:	43da      	mvns	r2, r3
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	4013      	ands	r3, r2
 800176a:	b29b      	uxth	r3, r3
 800176c:	2b00      	cmp	r3, #0
 800176e:	bf14      	ite	ne
 8001770:	2301      	movne	r3, #1
 8001772:	2300      	moveq	r3, #0
 8001774:	b2db      	uxtb	r3, r3
 8001776:	e00b      	b.n	8001790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	43da      	mvns	r2, r3
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	4013      	ands	r3, r2
 8001784:	b29b      	uxth	r3, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	bf14      	ite	ne
 800178a:	2301      	movne	r3, #1
 800178c:	2300      	moveq	r3, #0
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2b00      	cmp	r3, #0
 8001792:	f47f af6d 	bne.w	8001670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80017ac:	e034      	b.n	8001818 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f000 f886 	bl	80018c0 <I2C_IsAcknowledgeFailed>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e034      	b.n	8001828 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c4:	d028      	beq.n	8001818 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017c6:	f7ff f96b 	bl	8000aa0 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	68ba      	ldr	r2, [r7, #8]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d302      	bcc.n	80017dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d11d      	bne.n	8001818 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017e6:	2b80      	cmp	r3, #128	; 0x80
 80017e8:	d016      	beq.n	8001818 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	2200      	movs	r2, #0
 80017ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2220      	movs	r2, #32
 80017f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001804:	f043 0220 	orr.w	r2, r3, #32
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e007      	b.n	8001828 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001822:	2b80      	cmp	r3, #128	; 0x80
 8001824:	d1c3      	bne.n	80017ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001826:	2300      	movs	r3, #0
}
 8001828:	4618      	mov	r0, r3
 800182a:	3710      	adds	r7, #16
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800183c:	e034      	b.n	80018a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800183e:	68f8      	ldr	r0, [r7, #12]
 8001840:	f000 f83e 	bl	80018c0 <I2C_IsAcknowledgeFailed>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e034      	b.n	80018b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001854:	d028      	beq.n	80018a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001856:	f7ff f923 	bl	8000aa0 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	68ba      	ldr	r2, [r7, #8]
 8001862:	429a      	cmp	r2, r3
 8001864:	d302      	bcc.n	800186c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d11d      	bne.n	80018a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	f003 0304 	and.w	r3, r3, #4
 8001876:	2b04      	cmp	r3, #4
 8001878:	d016      	beq.n	80018a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2200      	movs	r2, #0
 800187e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2220      	movs	r2, #32
 8001884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	f043 0220 	orr.w	r2, r3, #32
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e007      	b.n	80018b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	f003 0304 	and.w	r3, r3, #4
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	d1c3      	bne.n	800183e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018d6:	d11b      	bne.n	8001910 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80018e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2220      	movs	r2, #32
 80018ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	f043 0204 	orr.w	r2, r3, #4
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e000      	b.n	8001912 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr

0800191c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e26c      	b.n	8001e08 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	f000 8087 	beq.w	8001a4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800193c:	4b92      	ldr	r3, [pc, #584]	; (8001b88 <HAL_RCC_OscConfig+0x26c>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 030c 	and.w	r3, r3, #12
 8001944:	2b04      	cmp	r3, #4
 8001946:	d00c      	beq.n	8001962 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001948:	4b8f      	ldr	r3, [pc, #572]	; (8001b88 <HAL_RCC_OscConfig+0x26c>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 030c 	and.w	r3, r3, #12
 8001950:	2b08      	cmp	r3, #8
 8001952:	d112      	bne.n	800197a <HAL_RCC_OscConfig+0x5e>
 8001954:	4b8c      	ldr	r3, [pc, #560]	; (8001b88 <HAL_RCC_OscConfig+0x26c>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800195c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001960:	d10b      	bne.n	800197a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001962:	4b89      	ldr	r3, [pc, #548]	; (8001b88 <HAL_RCC_OscConfig+0x26c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d06c      	beq.n	8001a48 <HAL_RCC_OscConfig+0x12c>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d168      	bne.n	8001a48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e246      	b.n	8001e08 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001982:	d106      	bne.n	8001992 <HAL_RCC_OscConfig+0x76>
 8001984:	4b80      	ldr	r3, [pc, #512]	; (8001b88 <HAL_RCC_OscConfig+0x26c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a7f      	ldr	r2, [pc, #508]	; (8001b88 <HAL_RCC_OscConfig+0x26c>)
 800198a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800198e:	6013      	str	r3, [r2, #0]
 8001990:	e02e      	b.n	80019f0 <HAL_RCC_OscConfig+0xd4>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10c      	bne.n	80019b4 <HAL_RCC_OscConfig+0x98>
 800199a:	4b7b      	ldr	r3, [pc, #492]	; (8001b88 <HAL_RCC_OscConfig+0x26c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a7a      	ldr	r2, [pc, #488]	; (8001b88 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	4b78      	ldr	r3, [pc, #480]	; (8001b88 <HAL_RCC_OscConfig+0x26c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a77      	ldr	r2, [pc, #476]	; (8001b88 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019b0:	6013      	str	r3, [r2, #0]
 80019b2:	e01d      	b.n	80019f0 <HAL_RCC_OscConfig+0xd4>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019bc:	d10c      	bne.n	80019d8 <HAL_RCC_OscConfig+0xbc>
 80019be:	4b72      	ldr	r3, [pc, #456]	; (8001b88 <HAL_RCC_OscConfig+0x26c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a71      	ldr	r2, [pc, #452]	; (8001b88 <HAL_RCC_OscConfig+0x26c>)
 80019c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019c8:	6013      	str	r3, [r2, #0]
 80019ca:	4b6f      	ldr	r3, [pc, #444]	; (8001b88 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a6e      	ldr	r2, [pc, #440]	; (8001b88 <HAL_RCC_OscConfig+0x26c>)
 80019d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	e00b      	b.n	80019f0 <HAL_RCC_OscConfig+0xd4>
 80019d8:	4b6b      	ldr	r3, [pc, #428]	; (8001b88 <HAL_RCC_OscConfig+0x26c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a6a      	ldr	r2, [pc, #424]	; (8001b88 <HAL_RCC_OscConfig+0x26c>)
 80019de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019e2:	6013      	str	r3, [r2, #0]
 80019e4:	4b68      	ldr	r3, [pc, #416]	; (8001b88 <HAL_RCC_OscConfig+0x26c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a67      	ldr	r2, [pc, #412]	; (8001b88 <HAL_RCC_OscConfig+0x26c>)
 80019ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d013      	beq.n	8001a20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f8:	f7ff f852 	bl	8000aa0 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a00:	f7ff f84e 	bl	8000aa0 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b64      	cmp	r3, #100	; 0x64
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e1fa      	b.n	8001e08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a12:	4b5d      	ldr	r3, [pc, #372]	; (8001b88 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d0f0      	beq.n	8001a00 <HAL_RCC_OscConfig+0xe4>
 8001a1e:	e014      	b.n	8001a4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a20:	f7ff f83e 	bl	8000aa0 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a28:	f7ff f83a 	bl	8000aa0 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b64      	cmp	r3, #100	; 0x64
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e1e6      	b.n	8001e08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a3a:	4b53      	ldr	r3, [pc, #332]	; (8001b88 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1f0      	bne.n	8001a28 <HAL_RCC_OscConfig+0x10c>
 8001a46:	e000      	b.n	8001a4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d063      	beq.n	8001b1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a56:	4b4c      	ldr	r3, [pc, #304]	; (8001b88 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f003 030c 	and.w	r3, r3, #12
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d00b      	beq.n	8001a7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a62:	4b49      	ldr	r3, [pc, #292]	; (8001b88 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	2b08      	cmp	r3, #8
 8001a6c:	d11c      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x18c>
 8001a6e:	4b46      	ldr	r3, [pc, #280]	; (8001b88 <HAL_RCC_OscConfig+0x26c>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d116      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a7a:	4b43      	ldr	r3, [pc, #268]	; (8001b88 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d005      	beq.n	8001a92 <HAL_RCC_OscConfig+0x176>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d001      	beq.n	8001a92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e1ba      	b.n	8001e08 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a92:	4b3d      	ldr	r3, [pc, #244]	; (8001b88 <HAL_RCC_OscConfig+0x26c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	4939      	ldr	r1, [pc, #228]	; (8001b88 <HAL_RCC_OscConfig+0x26c>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aa6:	e03a      	b.n	8001b1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d020      	beq.n	8001af2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ab0:	4b36      	ldr	r3, [pc, #216]	; (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab6:	f7fe fff3 	bl	8000aa0 <HAL_GetTick>
 8001aba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001abc:	e008      	b.n	8001ad0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001abe:	f7fe ffef 	bl	8000aa0 <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e19b      	b.n	8001e08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad0:	4b2d      	ldr	r3, [pc, #180]	; (8001b88 <HAL_RCC_OscConfig+0x26c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d0f0      	beq.n	8001abe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001adc:	4b2a      	ldr	r3, [pc, #168]	; (8001b88 <HAL_RCC_OscConfig+0x26c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	695b      	ldr	r3, [r3, #20]
 8001ae8:	00db      	lsls	r3, r3, #3
 8001aea:	4927      	ldr	r1, [pc, #156]	; (8001b88 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	600b      	str	r3, [r1, #0]
 8001af0:	e015      	b.n	8001b1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001af2:	4b26      	ldr	r3, [pc, #152]	; (8001b8c <HAL_RCC_OscConfig+0x270>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af8:	f7fe ffd2 	bl	8000aa0 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b00:	f7fe ffce 	bl	8000aa0 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e17a      	b.n	8001e08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b12:	4b1d      	ldr	r3, [pc, #116]	; (8001b88 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1f0      	bne.n	8001b00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d03a      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d019      	beq.n	8001b66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b32:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <HAL_RCC_OscConfig+0x274>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b38:	f7fe ffb2 	bl	8000aa0 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b40:	f7fe ffae 	bl	8000aa0 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e15a      	b.n	8001e08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b52:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0f0      	beq.n	8001b40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b5e:	2001      	movs	r0, #1
 8001b60:	f000 fafc 	bl	800215c <RCC_Delay>
 8001b64:	e01c      	b.n	8001ba0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b66:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <HAL_RCC_OscConfig+0x274>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b6c:	f7fe ff98 	bl	8000aa0 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b72:	e00f      	b.n	8001b94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b74:	f7fe ff94 	bl	8000aa0 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d908      	bls.n	8001b94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e140      	b.n	8001e08 <HAL_RCC_OscConfig+0x4ec>
 8001b86:	bf00      	nop
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	42420000 	.word	0x42420000
 8001b90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b94:	4b9e      	ldr	r3, [pc, #632]	; (8001e10 <HAL_RCC_OscConfig+0x4f4>)
 8001b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1e9      	bne.n	8001b74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f000 80a6 	beq.w	8001cfa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bb2:	4b97      	ldr	r3, [pc, #604]	; (8001e10 <HAL_RCC_OscConfig+0x4f4>)
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10d      	bne.n	8001bda <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bbe:	4b94      	ldr	r3, [pc, #592]	; (8001e10 <HAL_RCC_OscConfig+0x4f4>)
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	4a93      	ldr	r2, [pc, #588]	; (8001e10 <HAL_RCC_OscConfig+0x4f4>)
 8001bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc8:	61d3      	str	r3, [r2, #28]
 8001bca:	4b91      	ldr	r3, [pc, #580]	; (8001e10 <HAL_RCC_OscConfig+0x4f4>)
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bda:	4b8e      	ldr	r3, [pc, #568]	; (8001e14 <HAL_RCC_OscConfig+0x4f8>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d118      	bne.n	8001c18 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001be6:	4b8b      	ldr	r3, [pc, #556]	; (8001e14 <HAL_RCC_OscConfig+0x4f8>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a8a      	ldr	r2, [pc, #552]	; (8001e14 <HAL_RCC_OscConfig+0x4f8>)
 8001bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bf2:	f7fe ff55 	bl	8000aa0 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bfa:	f7fe ff51 	bl	8000aa0 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b64      	cmp	r3, #100	; 0x64
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e0fd      	b.n	8001e08 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c0c:	4b81      	ldr	r3, [pc, #516]	; (8001e14 <HAL_RCC_OscConfig+0x4f8>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0f0      	beq.n	8001bfa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d106      	bne.n	8001c2e <HAL_RCC_OscConfig+0x312>
 8001c20:	4b7b      	ldr	r3, [pc, #492]	; (8001e10 <HAL_RCC_OscConfig+0x4f4>)
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	4a7a      	ldr	r2, [pc, #488]	; (8001e10 <HAL_RCC_OscConfig+0x4f4>)
 8001c26:	f043 0301 	orr.w	r3, r3, #1
 8001c2a:	6213      	str	r3, [r2, #32]
 8001c2c:	e02d      	b.n	8001c8a <HAL_RCC_OscConfig+0x36e>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10c      	bne.n	8001c50 <HAL_RCC_OscConfig+0x334>
 8001c36:	4b76      	ldr	r3, [pc, #472]	; (8001e10 <HAL_RCC_OscConfig+0x4f4>)
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	4a75      	ldr	r2, [pc, #468]	; (8001e10 <HAL_RCC_OscConfig+0x4f4>)
 8001c3c:	f023 0301 	bic.w	r3, r3, #1
 8001c40:	6213      	str	r3, [r2, #32]
 8001c42:	4b73      	ldr	r3, [pc, #460]	; (8001e10 <HAL_RCC_OscConfig+0x4f4>)
 8001c44:	6a1b      	ldr	r3, [r3, #32]
 8001c46:	4a72      	ldr	r2, [pc, #456]	; (8001e10 <HAL_RCC_OscConfig+0x4f4>)
 8001c48:	f023 0304 	bic.w	r3, r3, #4
 8001c4c:	6213      	str	r3, [r2, #32]
 8001c4e:	e01c      	b.n	8001c8a <HAL_RCC_OscConfig+0x36e>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	2b05      	cmp	r3, #5
 8001c56:	d10c      	bne.n	8001c72 <HAL_RCC_OscConfig+0x356>
 8001c58:	4b6d      	ldr	r3, [pc, #436]	; (8001e10 <HAL_RCC_OscConfig+0x4f4>)
 8001c5a:	6a1b      	ldr	r3, [r3, #32]
 8001c5c:	4a6c      	ldr	r2, [pc, #432]	; (8001e10 <HAL_RCC_OscConfig+0x4f4>)
 8001c5e:	f043 0304 	orr.w	r3, r3, #4
 8001c62:	6213      	str	r3, [r2, #32]
 8001c64:	4b6a      	ldr	r3, [pc, #424]	; (8001e10 <HAL_RCC_OscConfig+0x4f4>)
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	4a69      	ldr	r2, [pc, #420]	; (8001e10 <HAL_RCC_OscConfig+0x4f4>)
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	6213      	str	r3, [r2, #32]
 8001c70:	e00b      	b.n	8001c8a <HAL_RCC_OscConfig+0x36e>
 8001c72:	4b67      	ldr	r3, [pc, #412]	; (8001e10 <HAL_RCC_OscConfig+0x4f4>)
 8001c74:	6a1b      	ldr	r3, [r3, #32]
 8001c76:	4a66      	ldr	r2, [pc, #408]	; (8001e10 <HAL_RCC_OscConfig+0x4f4>)
 8001c78:	f023 0301 	bic.w	r3, r3, #1
 8001c7c:	6213      	str	r3, [r2, #32]
 8001c7e:	4b64      	ldr	r3, [pc, #400]	; (8001e10 <HAL_RCC_OscConfig+0x4f4>)
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	4a63      	ldr	r2, [pc, #396]	; (8001e10 <HAL_RCC_OscConfig+0x4f4>)
 8001c84:	f023 0304 	bic.w	r3, r3, #4
 8001c88:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d015      	beq.n	8001cbe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c92:	f7fe ff05 	bl	8000aa0 <HAL_GetTick>
 8001c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c98:	e00a      	b.n	8001cb0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c9a:	f7fe ff01 	bl	8000aa0 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e0ab      	b.n	8001e08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb0:	4b57      	ldr	r3, [pc, #348]	; (8001e10 <HAL_RCC_OscConfig+0x4f4>)
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0ee      	beq.n	8001c9a <HAL_RCC_OscConfig+0x37e>
 8001cbc:	e014      	b.n	8001ce8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cbe:	f7fe feef 	bl	8000aa0 <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc4:	e00a      	b.n	8001cdc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc6:	f7fe feeb 	bl	8000aa0 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e095      	b.n	8001e08 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cdc:	4b4c      	ldr	r3, [pc, #304]	; (8001e10 <HAL_RCC_OscConfig+0x4f4>)
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1ee      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ce8:	7dfb      	ldrb	r3, [r7, #23]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d105      	bne.n	8001cfa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cee:	4b48      	ldr	r3, [pc, #288]	; (8001e10 <HAL_RCC_OscConfig+0x4f4>)
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	4a47      	ldr	r2, [pc, #284]	; (8001e10 <HAL_RCC_OscConfig+0x4f4>)
 8001cf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cf8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 8081 	beq.w	8001e06 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d04:	4b42      	ldr	r3, [pc, #264]	; (8001e10 <HAL_RCC_OscConfig+0x4f4>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 030c 	and.w	r3, r3, #12
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d061      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	69db      	ldr	r3, [r3, #28]
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d146      	bne.n	8001da6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d18:	4b3f      	ldr	r3, [pc, #252]	; (8001e18 <HAL_RCC_OscConfig+0x4fc>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1e:	f7fe febf 	bl	8000aa0 <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d24:	e008      	b.n	8001d38 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d26:	f7fe febb 	bl	8000aa0 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e067      	b.n	8001e08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d38:	4b35      	ldr	r3, [pc, #212]	; (8001e10 <HAL_RCC_OscConfig+0x4f4>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1f0      	bne.n	8001d26 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d4c:	d108      	bne.n	8001d60 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d4e:	4b30      	ldr	r3, [pc, #192]	; (8001e10 <HAL_RCC_OscConfig+0x4f4>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	492d      	ldr	r1, [pc, #180]	; (8001e10 <HAL_RCC_OscConfig+0x4f4>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d60:	4b2b      	ldr	r3, [pc, #172]	; (8001e10 <HAL_RCC_OscConfig+0x4f4>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a19      	ldr	r1, [r3, #32]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d70:	430b      	orrs	r3, r1
 8001d72:	4927      	ldr	r1, [pc, #156]	; (8001e10 <HAL_RCC_OscConfig+0x4f4>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d78:	4b27      	ldr	r3, [pc, #156]	; (8001e18 <HAL_RCC_OscConfig+0x4fc>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7e:	f7fe fe8f 	bl	8000aa0 <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d86:	f7fe fe8b 	bl	8000aa0 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e037      	b.n	8001e08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d98:	4b1d      	ldr	r3, [pc, #116]	; (8001e10 <HAL_RCC_OscConfig+0x4f4>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0f0      	beq.n	8001d86 <HAL_RCC_OscConfig+0x46a>
 8001da4:	e02f      	b.n	8001e06 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da6:	4b1c      	ldr	r3, [pc, #112]	; (8001e18 <HAL_RCC_OscConfig+0x4fc>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dac:	f7fe fe78 	bl	8000aa0 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db4:	f7fe fe74 	bl	8000aa0 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e020      	b.n	8001e08 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc6:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <HAL_RCC_OscConfig+0x4f4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f0      	bne.n	8001db4 <HAL_RCC_OscConfig+0x498>
 8001dd2:	e018      	b.n	8001e06 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	69db      	ldr	r3, [r3, #28]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d101      	bne.n	8001de0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e013      	b.n	8001e08 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <HAL_RCC_OscConfig+0x4f4>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d106      	bne.n	8001e02 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d001      	beq.n	8001e06 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e000      	b.n	8001e08 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3718      	adds	r7, #24
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40007000 	.word	0x40007000
 8001e18:	42420060 	.word	0x42420060

08001e1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e0d0      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e30:	4b6a      	ldr	r3, [pc, #424]	; (8001fdc <HAL_RCC_ClockConfig+0x1c0>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d910      	bls.n	8001e60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3e:	4b67      	ldr	r3, [pc, #412]	; (8001fdc <HAL_RCC_ClockConfig+0x1c0>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f023 0207 	bic.w	r2, r3, #7
 8001e46:	4965      	ldr	r1, [pc, #404]	; (8001fdc <HAL_RCC_ClockConfig+0x1c0>)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4e:	4b63      	ldr	r3, [pc, #396]	; (8001fdc <HAL_RCC_ClockConfig+0x1c0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d001      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e0b8      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d020      	beq.n	8001eae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d005      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e78:	4b59      	ldr	r3, [pc, #356]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	4a58      	ldr	r2, [pc, #352]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0308 	and.w	r3, r3, #8
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d005      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e90:	4b53      	ldr	r3, [pc, #332]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	4a52      	ldr	r2, [pc, #328]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e96:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e9c:	4b50      	ldr	r3, [pc, #320]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	494d      	ldr	r1, [pc, #308]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d040      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d107      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec2:	4b47      	ldr	r3, [pc, #284]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d115      	bne.n	8001efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e07f      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d107      	bne.n	8001eea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eda:	4b41      	ldr	r3, [pc, #260]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d109      	bne.n	8001efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e073      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eea:	4b3d      	ldr	r3, [pc, #244]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e06b      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001efa:	4b39      	ldr	r3, [pc, #228]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f023 0203 	bic.w	r2, r3, #3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	4936      	ldr	r1, [pc, #216]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f0c:	f7fe fdc8 	bl	8000aa0 <HAL_GetTick>
 8001f10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f12:	e00a      	b.n	8001f2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f14:	f7fe fdc4 	bl	8000aa0 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e053      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2a:	4b2d      	ldr	r3, [pc, #180]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f003 020c 	and.w	r2, r3, #12
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d1eb      	bne.n	8001f14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f3c:	4b27      	ldr	r3, [pc, #156]	; (8001fdc <HAL_RCC_ClockConfig+0x1c0>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d210      	bcs.n	8001f6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4a:	4b24      	ldr	r3, [pc, #144]	; (8001fdc <HAL_RCC_ClockConfig+0x1c0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f023 0207 	bic.w	r2, r3, #7
 8001f52:	4922      	ldr	r1, [pc, #136]	; (8001fdc <HAL_RCC_ClockConfig+0x1c0>)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5a:	4b20      	ldr	r3, [pc, #128]	; (8001fdc <HAL_RCC_ClockConfig+0x1c0>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d001      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e032      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d008      	beq.n	8001f8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f78:	4b19      	ldr	r3, [pc, #100]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	4916      	ldr	r1, [pc, #88]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d009      	beq.n	8001faa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f96:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	490e      	ldr	r1, [pc, #56]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001faa:	f000 f821 	bl	8001ff0 <HAL_RCC_GetSysClockFreq>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	091b      	lsrs	r3, r3, #4
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	490a      	ldr	r1, [pc, #40]	; (8001fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8001fbc:	5ccb      	ldrb	r3, [r1, r3]
 8001fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc2:	4a09      	ldr	r2, [pc, #36]	; (8001fe8 <HAL_RCC_ClockConfig+0x1cc>)
 8001fc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fc6:	4b09      	ldr	r3, [pc, #36]	; (8001fec <HAL_RCC_ClockConfig+0x1d0>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe fa32 	bl	8000434 <HAL_InitTick>

  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40022000 	.word	0x40022000
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	08005158 	.word	0x08005158
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	2000000c 	.word	0x2000000c

08001ff0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b087      	sub	sp, #28
 8001ff4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	2300      	movs	r3, #0
 8002000:	617b      	str	r3, [r7, #20]
 8002002:	2300      	movs	r3, #0
 8002004:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002006:	2300      	movs	r3, #0
 8002008:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800200a:	4b1e      	ldr	r3, [pc, #120]	; (8002084 <HAL_RCC_GetSysClockFreq+0x94>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f003 030c 	and.w	r3, r3, #12
 8002016:	2b04      	cmp	r3, #4
 8002018:	d002      	beq.n	8002020 <HAL_RCC_GetSysClockFreq+0x30>
 800201a:	2b08      	cmp	r3, #8
 800201c:	d003      	beq.n	8002026 <HAL_RCC_GetSysClockFreq+0x36>
 800201e:	e027      	b.n	8002070 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002020:	4b19      	ldr	r3, [pc, #100]	; (8002088 <HAL_RCC_GetSysClockFreq+0x98>)
 8002022:	613b      	str	r3, [r7, #16]
      break;
 8002024:	e027      	b.n	8002076 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	0c9b      	lsrs	r3, r3, #18
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	4a17      	ldr	r2, [pc, #92]	; (800208c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002030:	5cd3      	ldrb	r3, [r2, r3]
 8002032:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d010      	beq.n	8002060 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800203e:	4b11      	ldr	r3, [pc, #68]	; (8002084 <HAL_RCC_GetSysClockFreq+0x94>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	0c5b      	lsrs	r3, r3, #17
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	4a11      	ldr	r2, [pc, #68]	; (8002090 <HAL_RCC_GetSysClockFreq+0xa0>)
 800204a:	5cd3      	ldrb	r3, [r2, r3]
 800204c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a0d      	ldr	r2, [pc, #52]	; (8002088 <HAL_RCC_GetSysClockFreq+0x98>)
 8002052:	fb02 f203 	mul.w	r2, r2, r3
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	fbb2 f3f3 	udiv	r3, r2, r3
 800205c:	617b      	str	r3, [r7, #20]
 800205e:	e004      	b.n	800206a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a0c      	ldr	r2, [pc, #48]	; (8002094 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002064:	fb02 f303 	mul.w	r3, r2, r3
 8002068:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	613b      	str	r3, [r7, #16]
      break;
 800206e:	e002      	b.n	8002076 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002070:	4b05      	ldr	r3, [pc, #20]	; (8002088 <HAL_RCC_GetSysClockFreq+0x98>)
 8002072:	613b      	str	r3, [r7, #16]
      break;
 8002074:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002076:	693b      	ldr	r3, [r7, #16]
}
 8002078:	4618      	mov	r0, r3
 800207a:	371c      	adds	r7, #28
 800207c:	46bd      	mov	sp, r7
 800207e:	bc80      	pop	{r7}
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	40021000 	.word	0x40021000
 8002088:	007a1200 	.word	0x007a1200
 800208c:	080058dc 	.word	0x080058dc
 8002090:	080058ec 	.word	0x080058ec
 8002094:	003d0900 	.word	0x003d0900

08002098 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800209c:	4b02      	ldr	r3, [pc, #8]	; (80020a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800209e:	681b      	ldr	r3, [r3, #0]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr
 80020a8:	20000000 	.word	0x20000000

080020ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020b0:	f7ff fff2 	bl	8002098 <HAL_RCC_GetHCLKFreq>
 80020b4:	4602      	mov	r2, r0
 80020b6:	4b05      	ldr	r3, [pc, #20]	; (80020cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	0a1b      	lsrs	r3, r3, #8
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	4903      	ldr	r1, [pc, #12]	; (80020d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020c2:	5ccb      	ldrb	r3, [r1, r3]
 80020c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40021000 	.word	0x40021000
 80020d0:	08005168 	.word	0x08005168

080020d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020d8:	f7ff ffde 	bl	8002098 <HAL_RCC_GetHCLKFreq>
 80020dc:	4602      	mov	r2, r0
 80020de:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	0adb      	lsrs	r3, r3, #11
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	4903      	ldr	r1, [pc, #12]	; (80020f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020ea:	5ccb      	ldrb	r3, [r1, r3]
 80020ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40021000 	.word	0x40021000
 80020f8:	08005168 	.word	0x08005168

080020fc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	220f      	movs	r2, #15
 800210a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800210c:	4b11      	ldr	r3, [pc, #68]	; (8002154 <HAL_RCC_GetClockConfig+0x58>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 0203 	and.w	r2, r3, #3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002118:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <HAL_RCC_GetClockConfig+0x58>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002124:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <HAL_RCC_GetClockConfig+0x58>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002130:	4b08      	ldr	r3, [pc, #32]	; (8002154 <HAL_RCC_GetClockConfig+0x58>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	08db      	lsrs	r3, r3, #3
 8002136:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800213e:	4b06      	ldr	r3, [pc, #24]	; (8002158 <HAL_RCC_GetClockConfig+0x5c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0207 	and.w	r2, r3, #7
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	bc80      	pop	{r7}
 8002152:	4770      	bx	lr
 8002154:	40021000 	.word	0x40021000
 8002158:	40022000 	.word	0x40022000

0800215c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002164:	4b0a      	ldr	r3, [pc, #40]	; (8002190 <RCC_Delay+0x34>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a0a      	ldr	r2, [pc, #40]	; (8002194 <RCC_Delay+0x38>)
 800216a:	fba2 2303 	umull	r2, r3, r2, r3
 800216e:	0a5b      	lsrs	r3, r3, #9
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	fb02 f303 	mul.w	r3, r2, r3
 8002176:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002178:	bf00      	nop
  }
  while (Delay --);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	1e5a      	subs	r2, r3, #1
 800217e:	60fa      	str	r2, [r7, #12]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1f9      	bne.n	8002178 <RCC_Delay+0x1c>
}
 8002184:	bf00      	nop
 8002186:	bf00      	nop
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr
 8002190:	20000000 	.word	0x20000000
 8002194:	10624dd3 	.word	0x10624dd3

08002198 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e041      	b.n	800222e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d106      	bne.n	80021c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 f839 	bl	8002236 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2202      	movs	r2, #2
 80021c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3304      	adds	r3, #4
 80021d4:	4619      	mov	r1, r3
 80021d6:	4610      	mov	r0, r2
 80021d8:	f000 f9b4 	bl	8002544 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr

08002248 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b01      	cmp	r3, #1
 800225a:	d001      	beq.n	8002260 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e03a      	b.n	80022d6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2202      	movs	r2, #2
 8002264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68da      	ldr	r2, [r3, #12]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0201 	orr.w	r2, r2, #1
 8002276:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a18      	ldr	r2, [pc, #96]	; (80022e0 <HAL_TIM_Base_Start_IT+0x98>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d00e      	beq.n	80022a0 <HAL_TIM_Base_Start_IT+0x58>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800228a:	d009      	beq.n	80022a0 <HAL_TIM_Base_Start_IT+0x58>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a14      	ldr	r2, [pc, #80]	; (80022e4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d004      	beq.n	80022a0 <HAL_TIM_Base_Start_IT+0x58>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a13      	ldr	r2, [pc, #76]	; (80022e8 <HAL_TIM_Base_Start_IT+0xa0>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d111      	bne.n	80022c4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2b06      	cmp	r3, #6
 80022b0:	d010      	beq.n	80022d4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f042 0201 	orr.w	r2, r2, #1
 80022c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022c2:	e007      	b.n	80022d4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 0201 	orr.w	r2, r2, #1
 80022d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr
 80022e0:	40012c00 	.word	0x40012c00
 80022e4:	40000400 	.word	0x40000400
 80022e8:	40000800 	.word	0x40000800

080022ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d122      	bne.n	8002348 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b02      	cmp	r3, #2
 800230e:	d11b      	bne.n	8002348 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f06f 0202 	mvn.w	r2, #2
 8002318:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2201      	movs	r2, #1
 800231e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f8ed 	bl	800250e <HAL_TIM_IC_CaptureCallback>
 8002334:	e005      	b.n	8002342 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f8e0 	bl	80024fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 f8ef 	bl	8002520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	2b04      	cmp	r3, #4
 8002354:	d122      	bne.n	800239c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b04      	cmp	r3, #4
 8002362:	d11b      	bne.n	800239c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f06f 0204 	mvn.w	r2, #4
 800236c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2202      	movs	r2, #2
 8002372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f8c3 	bl	800250e <HAL_TIM_IC_CaptureCallback>
 8002388:	e005      	b.n	8002396 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 f8b6 	bl	80024fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 f8c5 	bl	8002520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	f003 0308 	and.w	r3, r3, #8
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d122      	bne.n	80023f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	f003 0308 	and.w	r3, r3, #8
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	d11b      	bne.n	80023f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f06f 0208 	mvn.w	r2, #8
 80023c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2204      	movs	r2, #4
 80023c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 f899 	bl	800250e <HAL_TIM_IC_CaptureCallback>
 80023dc:	e005      	b.n	80023ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f88c 	bl	80024fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 f89b 	bl	8002520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	f003 0310 	and.w	r3, r3, #16
 80023fa:	2b10      	cmp	r3, #16
 80023fc:	d122      	bne.n	8002444 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	f003 0310 	and.w	r3, r3, #16
 8002408:	2b10      	cmp	r3, #16
 800240a:	d11b      	bne.n	8002444 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f06f 0210 	mvn.w	r2, #16
 8002414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2208      	movs	r2, #8
 800241a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f86f 	bl	800250e <HAL_TIM_IC_CaptureCallback>
 8002430:	e005      	b.n	800243e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f862 	bl	80024fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 f871 	bl	8002520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b01      	cmp	r3, #1
 8002450:	d10e      	bne.n	8002470 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b01      	cmp	r3, #1
 800245e:	d107      	bne.n	8002470 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f06f 0201 	mvn.w	r2, #1
 8002468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7fd ff58 	bl	8000320 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800247a:	2b80      	cmp	r3, #128	; 0x80
 800247c:	d10e      	bne.n	800249c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002488:	2b80      	cmp	r3, #128	; 0x80
 800248a:	d107      	bne.n	800249c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 f8bf 	bl	800261a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a6:	2b40      	cmp	r3, #64	; 0x40
 80024a8:	d10e      	bne.n	80024c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b4:	2b40      	cmp	r3, #64	; 0x40
 80024b6:	d107      	bne.n	80024c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f835 	bl	8002532 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	f003 0320 	and.w	r3, r3, #32
 80024d2:	2b20      	cmp	r3, #32
 80024d4:	d10e      	bne.n	80024f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f003 0320 	and.w	r3, r3, #32
 80024e0:	2b20      	cmp	r3, #32
 80024e2:	d107      	bne.n	80024f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f06f 0220 	mvn.w	r2, #32
 80024ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f88a 	bl	8002608 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024f4:	bf00      	nop
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr

0800250e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr

08002520 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	bc80      	pop	{r7}
 8002530:	4770      	bx	lr

08002532 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr

08002544 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a29      	ldr	r2, [pc, #164]	; (80025fc <TIM_Base_SetConfig+0xb8>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d00b      	beq.n	8002574 <TIM_Base_SetConfig+0x30>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002562:	d007      	beq.n	8002574 <TIM_Base_SetConfig+0x30>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a26      	ldr	r2, [pc, #152]	; (8002600 <TIM_Base_SetConfig+0xbc>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d003      	beq.n	8002574 <TIM_Base_SetConfig+0x30>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a25      	ldr	r2, [pc, #148]	; (8002604 <TIM_Base_SetConfig+0xc0>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d108      	bne.n	8002586 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800257a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	4313      	orrs	r3, r2
 8002584:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a1c      	ldr	r2, [pc, #112]	; (80025fc <TIM_Base_SetConfig+0xb8>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d00b      	beq.n	80025a6 <TIM_Base_SetConfig+0x62>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002594:	d007      	beq.n	80025a6 <TIM_Base_SetConfig+0x62>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a19      	ldr	r2, [pc, #100]	; (8002600 <TIM_Base_SetConfig+0xbc>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d003      	beq.n	80025a6 <TIM_Base_SetConfig+0x62>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a18      	ldr	r2, [pc, #96]	; (8002604 <TIM_Base_SetConfig+0xc0>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d108      	bne.n	80025b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a07      	ldr	r2, [pc, #28]	; (80025fc <TIM_Base_SetConfig+0xb8>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d103      	bne.n	80025ec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	615a      	str	r2, [r3, #20]
}
 80025f2:	bf00      	nop
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr
 80025fc:	40012c00 	.word	0x40012c00
 8002600:	40000400 	.word	0x40000400
 8002604:	40000800 	.word	0x40000800

08002608 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr

0800261a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr

0800262c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800262c:	b580      	push	{r7, lr}
 800262e:	b08c      	sub	sp, #48	; 0x30
 8002630:	af04      	add	r7, sp, #16
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
 8002638:	603b      	str	r3, [r7, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4618      	mov	r0, r3
 8002640:	f001 fab4 	bl	8003bac <pvPortMalloc>
 8002644:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d013      	beq.n	8002674 <xTaskCreate+0x48>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800264c:	207c      	movs	r0, #124	; 0x7c
 800264e:	f001 faad 	bl	8003bac <pvPortMalloc>
 8002652:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d008      	beq.n	800266c <xTaskCreate+0x40>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800265a:	227c      	movs	r2, #124	; 0x7c
 800265c:	2100      	movs	r1, #0
 800265e:	69f8      	ldr	r0, [r7, #28]
 8002660:	f002 f924 	bl	80048ac <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	631a      	str	r2, [r3, #48]	; 0x30
 800266a:	e005      	b.n	8002678 <xTaskCreate+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800266c:	6978      	ldr	r0, [r7, #20]
 800266e:	f001 faaf 	bl	8003bd0 <vPortFree>
 8002672:	e001      	b.n	8002678 <xTaskCreate+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002674:	2300      	movs	r3, #0
 8002676:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d013      	beq.n	80026a6 <xTaskCreate+0x7a>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800267e:	2300      	movs	r3, #0
 8002680:	9303      	str	r3, [sp, #12]
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	9302      	str	r3, [sp, #8]
 8002686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002688:	9301      	str	r3, [sp, #4]
 800268a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	68b9      	ldr	r1, [r7, #8]
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 f80e 	bl	80026b6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800269a:	69f8      	ldr	r0, [r7, #28]
 800269c:	f000 f89a 	bl	80027d4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80026a0:	2301      	movs	r3, #1
 80026a2:	61bb      	str	r3, [r7, #24]
 80026a4:	e002      	b.n	80026ac <xTaskCreate+0x80>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80026a6:	f04f 33ff 	mov.w	r3, #4294967295
 80026aa:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80026ac:	69bb      	ldr	r3, [r7, #24]
    }
 80026ae:	4618      	mov	r0, r3
 80026b0:	3720      	adds	r7, #32
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b088      	sub	sp, #32
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	60f8      	str	r0, [r7, #12]
 80026be:	60b9      	str	r1, [r7, #8]
 80026c0:	607a      	str	r2, [r7, #4]
 80026c2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80026c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	461a      	mov	r2, r3
 80026ce:	21a5      	movs	r1, #165	; 0xa5
 80026d0:	f002 f8ec 	bl	80048ac <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80026d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80026de:	3b01      	subs	r3, #1
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	f023 0307 	bic.w	r3, r3, #7
 80026ec:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00a      	beq.n	800270e <prvInitialiseNewTask+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80026f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026fc:	f383 8811 	msr	BASEPRI, r3
 8002700:	f3bf 8f6f 	isb	sy
 8002704:	f3bf 8f4f 	dsb	sy
 8002708:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800270a:	bf00      	nop
 800270c:	e7fe      	b.n	800270c <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d01e      	beq.n	8002752 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002714:	2300      	movs	r3, #0
 8002716:	61fb      	str	r3, [r7, #28]
 8002718:	e012      	b.n	8002740 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	4413      	add	r3, r2
 8002720:	7819      	ldrb	r1, [r3, #0]
 8002722:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	4413      	add	r3, r2
 8002728:	3334      	adds	r3, #52	; 0x34
 800272a:	460a      	mov	r2, r1
 800272c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	4413      	add	r3, r2
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d006      	beq.n	8002748 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	3301      	adds	r3, #1
 800273e:	61fb      	str	r3, [r7, #28]
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	2b13      	cmp	r3, #19
 8002744:	d9e9      	bls.n	800271a <prvInitialiseNewTask+0x64>
 8002746:	e000      	b.n	800274a <prvInitialiseNewTask+0x94>
            {
                break;
 8002748:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800274a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002754:	2b04      	cmp	r3, #4
 8002756:	d90a      	bls.n	800276e <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800275c:	f383 8811 	msr	BASEPRI, r3
 8002760:	f3bf 8f6f 	isb	sy
 8002764:	f3bf 8f4f 	dsb	sy
 8002768:	613b      	str	r3, [r7, #16]
    }
 800276a:	bf00      	nop
 800276c:	e7fe      	b.n	800276c <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800276e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002770:	2b04      	cmp	r3, #4
 8002772:	d901      	bls.n	8002778 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002774:	2304      	movs	r3, #4
 8002776:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800277c:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800277e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002780:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002782:	651a      	str	r2, [r3, #80]	; 0x50
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002786:	3304      	adds	r3, #4
 8002788:	4618      	mov	r0, r3
 800278a:	f001 fa52 	bl	8003c32 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800278e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002790:	3318      	adds	r3, #24
 8002792:	4618      	mov	r0, r3
 8002794:	f001 fa4d 	bl	8003c32 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800279a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800279c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800279e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a0:	f1c3 0205 	rsb	r2, r3, #5
 80027a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80027a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027ac:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	68f9      	ldr	r1, [r7, #12]
 80027b2:	69b8      	ldr	r0, [r7, #24]
 80027b4:	f001 faaa 	bl	8003d0c <pxPortInitialiseStack>
 80027b8:	4602      	mov	r2, r0
 80027ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027bc:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80027be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80027c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027c8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80027ca:	bf00      	nop
 80027cc:	3720      	adds	r7, #32
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
	...

080027d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80027dc:	f001 fb88 	bl	8003ef0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80027e0:	4b41      	ldr	r3, [pc, #260]	; (80028e8 <prvAddNewTaskToReadyList+0x114>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	3301      	adds	r3, #1
 80027e6:	4a40      	ldr	r2, [pc, #256]	; (80028e8 <prvAddNewTaskToReadyList+0x114>)
 80027e8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80027ea:	4b40      	ldr	r3, [pc, #256]	; (80028ec <prvAddNewTaskToReadyList+0x118>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d109      	bne.n	8002806 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80027f2:	4a3e      	ldr	r2, [pc, #248]	; (80028ec <prvAddNewTaskToReadyList+0x118>)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80027f8:	4b3b      	ldr	r3, [pc, #236]	; (80028e8 <prvAddNewTaskToReadyList+0x114>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d110      	bne.n	8002822 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002800:	f000 fe2e 	bl	8003460 <prvInitialiseTaskLists>
 8002804:	e00d      	b.n	8002822 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002806:	4b3a      	ldr	r3, [pc, #232]	; (80028f0 <prvAddNewTaskToReadyList+0x11c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d109      	bne.n	8002822 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800280e:	4b37      	ldr	r3, [pc, #220]	; (80028ec <prvAddNewTaskToReadyList+0x118>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002818:	429a      	cmp	r2, r3
 800281a:	d802      	bhi.n	8002822 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800281c:	4a33      	ldr	r2, [pc, #204]	; (80028ec <prvAddNewTaskToReadyList+0x118>)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002822:	4b34      	ldr	r3, [pc, #208]	; (80028f4 <prvAddNewTaskToReadyList+0x120>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	3301      	adds	r3, #1
 8002828:	4a32      	ldr	r2, [pc, #200]	; (80028f4 <prvAddNewTaskToReadyList+0x120>)
 800282a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800282c:	4b31      	ldr	r3, [pc, #196]	; (80028f4 <prvAddNewTaskToReadyList+0x120>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	649a      	str	r2, [r3, #72]	; 0x48
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002838:	4b2f      	ldr	r3, [pc, #188]	; (80028f8 <prvAddNewTaskToReadyList+0x124>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	429a      	cmp	r2, r3
 800283e:	d903      	bls.n	8002848 <prvAddNewTaskToReadyList+0x74>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002844:	4a2c      	ldr	r2, [pc, #176]	; (80028f8 <prvAddNewTaskToReadyList+0x124>)
 8002846:	6013      	str	r3, [r2, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800284c:	492b      	ldr	r1, [pc, #172]	; (80028fc <prvAddNewTaskToReadyList+0x128>)
 800284e:	4613      	mov	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	440b      	add	r3, r1
 8002858:	3304      	adds	r3, #4
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	60da      	str	r2, [r3, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	3204      	adds	r2, #4
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	1d1a      	adds	r2, r3, #4
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	609a      	str	r2, [r3, #8]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002882:	4613      	mov	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4413      	add	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4a1c      	ldr	r2, [pc, #112]	; (80028fc <prvAddNewTaskToReadyList+0x128>)
 800288c:	441a      	add	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	615a      	str	r2, [r3, #20]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002896:	4919      	ldr	r1, [pc, #100]	; (80028fc <prvAddNewTaskToReadyList+0x128>)
 8002898:	4613      	mov	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	1c59      	adds	r1, r3, #1
 80028a6:	4815      	ldr	r0, [pc, #84]	; (80028fc <prvAddNewTaskToReadyList+0x128>)
 80028a8:	4613      	mov	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4403      	add	r3, r0
 80028b2:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80028b4:	f001 fb4c 	bl	8003f50 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80028b8:	4b0d      	ldr	r3, [pc, #52]	; (80028f0 <prvAddNewTaskToReadyList+0x11c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00e      	beq.n	80028de <prvAddNewTaskToReadyList+0x10a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80028c0:	4b0a      	ldr	r3, [pc, #40]	; (80028ec <prvAddNewTaskToReadyList+0x118>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d207      	bcs.n	80028de <prvAddNewTaskToReadyList+0x10a>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80028ce:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <prvAddNewTaskToReadyList+0x12c>)
 80028d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	f3bf 8f4f 	dsb	sy
 80028da:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80028de:	bf00      	nop
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20000580 	.word	0x20000580
 80028ec:	200004a8 	.word	0x200004a8
 80028f0:	2000058c 	.word	0x2000058c
 80028f4:	2000059c 	.word	0x2000059c
 80028f8:	20000588 	.word	0x20000588
 80028fc:	200004ac 	.word	0x200004ac
 8002900:	e000ed04 	.word	0xe000ed04

08002904 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800290a:	4b20      	ldr	r3, [pc, #128]	; (800298c <vTaskStartScheduler+0x88>)
 800290c:	9301      	str	r3, [sp, #4]
 800290e:	2300      	movs	r3, #0
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	2300      	movs	r3, #0
 8002914:	2280      	movs	r2, #128	; 0x80
 8002916:	491e      	ldr	r1, [pc, #120]	; (8002990 <vTaskStartScheduler+0x8c>)
 8002918:	481e      	ldr	r0, [pc, #120]	; (8002994 <vTaskStartScheduler+0x90>)
 800291a:	f7ff fe87 	bl	800262c <xTaskCreate>
 800291e:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d102      	bne.n	800292c <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002926:	f000 febf 	bl	80036a8 <xTimerCreateTimerTask>
 800292a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d116      	bne.n	8002960 <vTaskStartScheduler+0x5c>
        __asm volatile
 8002932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002936:	f383 8811 	msr	BASEPRI, r3
 800293a:	f3bf 8f6f 	isb	sy
 800293e:	f3bf 8f4f 	dsb	sy
 8002942:	60bb      	str	r3, [r7, #8]
    }
 8002944:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002946:	4b14      	ldr	r3, [pc, #80]	; (8002998 <vTaskStartScheduler+0x94>)
 8002948:	f04f 32ff 	mov.w	r2, #4294967295
 800294c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800294e:	4b13      	ldr	r3, [pc, #76]	; (800299c <vTaskStartScheduler+0x98>)
 8002950:	2201      	movs	r2, #1
 8002952:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002954:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <vTaskStartScheduler+0x9c>)
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800295a:	f001 fa57 	bl	8003e0c <xPortStartScheduler>
 800295e:	e00e      	b.n	800297e <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002966:	d10a      	bne.n	800297e <vTaskStartScheduler+0x7a>
        __asm volatile
 8002968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800296c:	f383 8811 	msr	BASEPRI, r3
 8002970:	f3bf 8f6f 	isb	sy
 8002974:	f3bf 8f4f 	dsb	sy
 8002978:	607b      	str	r3, [r7, #4]
    }
 800297a:	bf00      	nop
 800297c:	e7fe      	b.n	800297c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800297e:	4b09      	ldr	r3, [pc, #36]	; (80029a4 <vTaskStartScheduler+0xa0>)
 8002980:	681b      	ldr	r3, [r3, #0]
}
 8002982:	bf00      	nop
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	200005a4 	.word	0x200005a4
 8002990:	08005140 	.word	0x08005140
 8002994:	08003375 	.word	0x08003375
 8002998:	200005a0 	.word	0x200005a0
 800299c:	2000058c 	.word	0x2000058c
 80029a0:	20000584 	.word	0x20000584
 80029a4:	20000014 	.word	0x20000014

080029a8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80029ac:	4b04      	ldr	r3, [pc, #16]	; (80029c0 <vTaskSuspendAll+0x18>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	3301      	adds	r3, #1
 80029b2:	4a03      	ldr	r2, [pc, #12]	; (80029c0 <vTaskSuspendAll+0x18>)
 80029b4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80029b6:	bf00      	nop
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bc80      	pop	{r7}
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	200005a8 	.word	0x200005a8

080029c4 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

    static TickType_t prvGetExpectedIdleTime( void )
    {
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
        TickType_t xReturn;
        UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 80029ca:	2300      	movs	r3, #0
 80029cc:	603b      	str	r3, [r7, #0]
         * configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
         * task that are in the Ready state, even though the idle task is
         * running. */
        #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
        {
            if( uxTopReadyPriority > tskIDLE_PRIORITY )
 80029ce:	4b13      	ldr	r3, [pc, #76]	; (8002a1c <prvGetExpectedIdleTime+0x58>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <prvGetExpectedIdleTime+0x16>
            {
                uxHigherPriorityReadyTasks = pdTRUE;
 80029d6:	2301      	movs	r3, #1
 80029d8:	603b      	str	r3, [r7, #0]
                uxHigherPriorityReadyTasks = pdTRUE;
            }
        }
        #endif /* if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 ) */

        if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 80029da:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <prvGetExpectedIdleTime+0x5c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d002      	beq.n	80029ea <prvGetExpectedIdleTime+0x26>
        {
            xReturn = 0;
 80029e4:	2300      	movs	r3, #0
 80029e6:	607b      	str	r3, [r7, #4]
 80029e8:	e012      	b.n	8002a10 <prvGetExpectedIdleTime+0x4c>
        }
        else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 80029ea:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <prvGetExpectedIdleTime+0x60>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d902      	bls.n	80029f8 <prvGetExpectedIdleTime+0x34>
        {
            /* There are other idle priority tasks in the ready state.  If
             * time slicing is used then the very next tick interrupt must be
             * processed. */
            xReturn = 0;
 80029f2:	2300      	movs	r3, #0
 80029f4:	607b      	str	r3, [r7, #4]
 80029f6:	e00b      	b.n	8002a10 <prvGetExpectedIdleTime+0x4c>
        }
        else if( uxHigherPriorityReadyTasks != pdFALSE )
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d002      	beq.n	8002a04 <prvGetExpectedIdleTime+0x40>
        {
            /* There are tasks in the Ready state that have a priority above the
             * idle priority.  This path can only be reached if
             * configUSE_PREEMPTION is 0. */
            xReturn = 0;
 80029fe:	2300      	movs	r3, #0
 8002a00:	607b      	str	r3, [r7, #4]
 8002a02:	e005      	b.n	8002a10 <prvGetExpectedIdleTime+0x4c>
        }
        else
        {
            xReturn = xNextTaskUnblockTime - xTickCount;
 8002a04:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <prvGetExpectedIdleTime+0x64>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	4b08      	ldr	r3, [pc, #32]	; (8002a2c <prvGetExpectedIdleTime+0x68>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	607b      	str	r3, [r7, #4]
        }

        return xReturn;
 8002a10:	687b      	ldr	r3, [r7, #4]
    }
 8002a12:	4618      	mov	r0, r3
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr
 8002a1c:	20000588 	.word	0x20000588
 8002a20:	200004a8 	.word	0x200004a8
 8002a24:	200004ac 	.word	0x200004ac
 8002a28:	200005a0 	.word	0x200005a0
 8002a2c:	20000584 	.word	0x20000584

08002a30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002a3e:	4b71      	ldr	r3, [pc, #452]	; (8002c04 <xTaskResumeAll+0x1d4>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10a      	bne.n	8002a5c <xTaskResumeAll+0x2c>
        __asm volatile
 8002a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a4a:	f383 8811 	msr	BASEPRI, r3
 8002a4e:	f3bf 8f6f 	isb	sy
 8002a52:	f3bf 8f4f 	dsb	sy
 8002a56:	607b      	str	r3, [r7, #4]
    }
 8002a58:	bf00      	nop
 8002a5a:	e7fe      	b.n	8002a5a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002a5c:	f001 fa48 	bl	8003ef0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002a60:	4b68      	ldr	r3, [pc, #416]	; (8002c04 <xTaskResumeAll+0x1d4>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	3b01      	subs	r3, #1
 8002a66:	4a67      	ldr	r2, [pc, #412]	; (8002c04 <xTaskResumeAll+0x1d4>)
 8002a68:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a6a:	4b66      	ldr	r3, [pc, #408]	; (8002c04 <xTaskResumeAll+0x1d4>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f040 80c1 	bne.w	8002bf6 <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002a74:	4b64      	ldr	r3, [pc, #400]	; (8002c08 <xTaskResumeAll+0x1d8>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 80bc 	beq.w	8002bf6 <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a7e:	e08b      	b.n	8002b98 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a80:	4b62      	ldr	r3, [pc, #392]	; (8002c0c <xTaskResumeAll+0x1dc>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8c:	613b      	str	r3, [r7, #16]
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	69fa      	ldr	r2, [r7, #28]
 8002a94:	6a12      	ldr	r2, [r2, #32]
 8002a96:	609a      	str	r2, [r3, #8]
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	69fa      	ldr	r2, [r7, #28]
 8002a9e:	69d2      	ldr	r2, [r2, #28]
 8002aa0:	605a      	str	r2, [r3, #4]
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	3318      	adds	r3, #24
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d103      	bne.n	8002ab6 <xTaskResumeAll+0x86>
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	6a1a      	ldr	r2, [r3, #32]
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	605a      	str	r2, [r3, #4]
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	629a      	str	r2, [r3, #40]	; 0x28
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	1e5a      	subs	r2, r3, #1
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	69fa      	ldr	r2, [r7, #28]
 8002ad2:	68d2      	ldr	r2, [r2, #12]
 8002ad4:	609a      	str	r2, [r3, #8]
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	69fa      	ldr	r2, [r7, #28]
 8002adc:	6892      	ldr	r2, [r2, #8]
 8002ade:	605a      	str	r2, [r3, #4]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	3304      	adds	r3, #4
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d103      	bne.n	8002af4 <xTaskResumeAll+0xc4>
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	68da      	ldr	r2, [r3, #12]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	605a      	str	r2, [r3, #4]
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	2200      	movs	r2, #0
 8002af8:	615a      	str	r2, [r3, #20]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	1e5a      	subs	r2, r3, #1
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b08:	4b41      	ldr	r3, [pc, #260]	; (8002c10 <xTaskResumeAll+0x1e0>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d903      	bls.n	8002b18 <xTaskResumeAll+0xe8>
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b14:	4a3e      	ldr	r2, [pc, #248]	; (8002c10 <xTaskResumeAll+0x1e0>)
 8002b16:	6013      	str	r3, [r2, #0]
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b1c:	493d      	ldr	r1, [pc, #244]	; (8002c14 <xTaskResumeAll+0x1e4>)
 8002b1e:	4613      	mov	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	440b      	add	r3, r1
 8002b28:	3304      	adds	r3, #4
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	60bb      	str	r3, [r7, #8]
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	609a      	str	r2, [r3, #8]
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	60da      	str	r2, [r3, #12]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	69fa      	ldr	r2, [r7, #28]
 8002b42:	3204      	adds	r2, #4
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	1d1a      	adds	r2, r3, #4
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	609a      	str	r2, [r3, #8]
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b52:	4613      	mov	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4a2e      	ldr	r2, [pc, #184]	; (8002c14 <xTaskResumeAll+0x1e4>)
 8002b5c:	441a      	add	r2, r3
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	615a      	str	r2, [r3, #20]
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b66:	492b      	ldr	r1, [pc, #172]	; (8002c14 <xTaskResumeAll+0x1e4>)
 8002b68:	4613      	mov	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	1c59      	adds	r1, r3, #1
 8002b76:	4827      	ldr	r0, [pc, #156]	; (8002c14 <xTaskResumeAll+0x1e4>)
 8002b78:	4613      	mov	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4403      	add	r3, r0
 8002b82:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b88:	4b23      	ldr	r3, [pc, #140]	; (8002c18 <xTaskResumeAll+0x1e8>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d302      	bcc.n	8002b98 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 8002b92:	4b22      	ldr	r3, [pc, #136]	; (8002c1c <xTaskResumeAll+0x1ec>)
 8002b94:	2201      	movs	r2, #1
 8002b96:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b98:	4b1c      	ldr	r3, [pc, #112]	; (8002c0c <xTaskResumeAll+0x1dc>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f47f af6f 	bne.w	8002a80 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002ba8:	f000 fcd8 	bl	800355c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002bac:	4b1c      	ldr	r3, [pc, #112]	; (8002c20 <xTaskResumeAll+0x1f0>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d010      	beq.n	8002bda <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002bb8:	f000 f89e 	bl	8002cf8 <xTaskIncrementTick>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d002      	beq.n	8002bc8 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 8002bc2:	4b16      	ldr	r3, [pc, #88]	; (8002c1c <xTaskResumeAll+0x1ec>)
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1f1      	bne.n	8002bb8 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8002bd4:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <xTaskResumeAll+0x1f0>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002bda:	4b10      	ldr	r3, [pc, #64]	; (8002c1c <xTaskResumeAll+0x1ec>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d009      	beq.n	8002bf6 <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002be2:	2301      	movs	r3, #1
 8002be4:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002be6:	4b0f      	ldr	r3, [pc, #60]	; (8002c24 <xTaskResumeAll+0x1f4>)
 8002be8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	f3bf 8f4f 	dsb	sy
 8002bf2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002bf6:	f001 f9ab 	bl	8003f50 <vPortExitCritical>

    return xAlreadyYielded;
 8002bfa:	69bb      	ldr	r3, [r7, #24]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3720      	adds	r7, #32
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	200005a8 	.word	0x200005a8
 8002c08:	20000580 	.word	0x20000580
 8002c0c:	20000540 	.word	0x20000540
 8002c10:	20000588 	.word	0x20000588
 8002c14:	200004ac 	.word	0x200004ac
 8002c18:	200004a8 	.word	0x200004a8
 8002c1c:	20000594 	.word	0x20000594
 8002c20:	20000590 	.word	0x20000590
 8002c24:	e000ed04 	.word	0xe000ed04

08002c28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002c2e:	4b04      	ldr	r3, [pc, #16]	; (8002c40 <xTaskGetTickCount+0x18>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002c34:	687b      	ldr	r3, [r7, #4]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr
 8002c40:	20000584 	.word	0x20000584

08002c44 <vTaskStepTick>:
 * implementations require configUSE_TICKLESS_IDLE to be set to a value other than
 * 1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

    void vTaskStepTick( TickType_t xTicksToJump )
    {
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
        /* Correct the tick count value after a period during which the tick
         * was suppressed.  Note this does *not* call the tick hook function for
         * each stepped tick. */
        configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 8002c4c:	4b26      	ldr	r3, [pc, #152]	; (8002ce8 <vTaskStepTick+0xa4>)
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	441a      	add	r2, r3
 8002c54:	4b25      	ldr	r3, [pc, #148]	; (8002cec <vTaskStepTick+0xa8>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d90a      	bls.n	8002c72 <vTaskStepTick+0x2e>
        __asm volatile
 8002c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c60:	f383 8811 	msr	BASEPRI, r3
 8002c64:	f3bf 8f6f 	isb	sy
 8002c68:	f3bf 8f4f 	dsb	sy
 8002c6c:	617b      	str	r3, [r7, #20]
    }
 8002c6e:	bf00      	nop
 8002c70:	e7fe      	b.n	8002c70 <vTaskStepTick+0x2c>

        if( ( xTickCount + xTicksToJump ) == xNextTaskUnblockTime )
 8002c72:	4b1d      	ldr	r3, [pc, #116]	; (8002ce8 <vTaskStepTick+0xa4>)
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	441a      	add	r2, r3
 8002c7a:	4b1c      	ldr	r3, [pc, #112]	; (8002cec <vTaskStepTick+0xa8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d128      	bne.n	8002cd4 <vTaskStepTick+0x90>
        {
            /* Arrange for xTickCount to reach xNextTaskUnblockTime in
             * xTaskIncrementTick() when the scheduler resumes.  This ensures
             * that any delayed tasks are resumed at the correct time. */
            configASSERT( uxSchedulerSuspended );
 8002c82:	4b1b      	ldr	r3, [pc, #108]	; (8002cf0 <vTaskStepTick+0xac>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10a      	bne.n	8002ca0 <vTaskStepTick+0x5c>
        __asm volatile
 8002c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8e:	f383 8811 	msr	BASEPRI, r3
 8002c92:	f3bf 8f6f 	isb	sy
 8002c96:	f3bf 8f4f 	dsb	sy
 8002c9a:	613b      	str	r3, [r7, #16]
    }
 8002c9c:	bf00      	nop
 8002c9e:	e7fe      	b.n	8002c9e <vTaskStepTick+0x5a>
            configASSERT( xTicksToJump != ( TickType_t ) 0 );
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10a      	bne.n	8002cbc <vTaskStepTick+0x78>
        __asm volatile
 8002ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002caa:	f383 8811 	msr	BASEPRI, r3
 8002cae:	f3bf 8f6f 	isb	sy
 8002cb2:	f3bf 8f4f 	dsb	sy
 8002cb6:	60fb      	str	r3, [r7, #12]
    }
 8002cb8:	bf00      	nop
 8002cba:	e7fe      	b.n	8002cba <vTaskStepTick+0x76>

            /* Prevent the tick interrupt modifying xPendedTicks simultaneously. */
            taskENTER_CRITICAL();
 8002cbc:	f001 f918 	bl	8003ef0 <vPortEnterCritical>
            {
                xPendedTicks++;
 8002cc0:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <vTaskStepTick+0xb0>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	4a0b      	ldr	r2, [pc, #44]	; (8002cf4 <vTaskStepTick+0xb0>)
 8002cc8:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8002cca:	f001 f941 	bl	8003f50 <vPortExitCritical>
            xTicksToJump--;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        xTickCount += xTicksToJump;
 8002cd4:	4b04      	ldr	r3, [pc, #16]	; (8002ce8 <vTaskStepTick+0xa4>)
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4413      	add	r3, r2
 8002cdc:	4a02      	ldr	r2, [pc, #8]	; (8002ce8 <vTaskStepTick+0xa4>)
 8002cde:	6013      	str	r3, [r2, #0]
        traceINCREASE_TICK_COUNT( xTicksToJump );
    }
 8002ce0:	bf00      	nop
 8002ce2:	3718      	adds	r7, #24
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	20000584 	.word	0x20000584
 8002cec:	200005a0 	.word	0x200005a0
 8002cf0:	200005a8 	.word	0x200005a8
 8002cf4:	20000590 	.word	0x20000590

08002cf8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b08a      	sub	sp, #40	; 0x28
 8002cfc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d02:	4b7e      	ldr	r3, [pc, #504]	; (8002efc <xTaskIncrementTick+0x204>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f040 80ed 	bne.w	8002ee6 <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d0c:	4b7c      	ldr	r3, [pc, #496]	; (8002f00 <xTaskIncrementTick+0x208>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	3301      	adds	r3, #1
 8002d12:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002d14:	4a7a      	ldr	r2, [pc, #488]	; (8002f00 <xTaskIncrementTick+0x208>)
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d120      	bne.n	8002d62 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002d20:	4b78      	ldr	r3, [pc, #480]	; (8002f04 <xTaskIncrementTick+0x20c>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00a      	beq.n	8002d40 <xTaskIncrementTick+0x48>
        __asm volatile
 8002d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2e:	f383 8811 	msr	BASEPRI, r3
 8002d32:	f3bf 8f6f 	isb	sy
 8002d36:	f3bf 8f4f 	dsb	sy
 8002d3a:	607b      	str	r3, [r7, #4]
    }
 8002d3c:	bf00      	nop
 8002d3e:	e7fe      	b.n	8002d3e <xTaskIncrementTick+0x46>
 8002d40:	4b70      	ldr	r3, [pc, #448]	; (8002f04 <xTaskIncrementTick+0x20c>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	61fb      	str	r3, [r7, #28]
 8002d46:	4b70      	ldr	r3, [pc, #448]	; (8002f08 <xTaskIncrementTick+0x210>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a6e      	ldr	r2, [pc, #440]	; (8002f04 <xTaskIncrementTick+0x20c>)
 8002d4c:	6013      	str	r3, [r2, #0]
 8002d4e:	4a6e      	ldr	r2, [pc, #440]	; (8002f08 <xTaskIncrementTick+0x210>)
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	6013      	str	r3, [r2, #0]
 8002d54:	4b6d      	ldr	r3, [pc, #436]	; (8002f0c <xTaskIncrementTick+0x214>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	4a6c      	ldr	r2, [pc, #432]	; (8002f0c <xTaskIncrementTick+0x214>)
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	f000 fbfd 	bl	800355c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002d62:	4b6b      	ldr	r3, [pc, #428]	; (8002f10 <xTaskIncrementTick+0x218>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6a3a      	ldr	r2, [r7, #32]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	f0c0 80a7 	bcc.w	8002ebc <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d6e:	4b65      	ldr	r3, [pc, #404]	; (8002f04 <xTaskIncrementTick+0x20c>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d104      	bne.n	8002d82 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d78:	4b65      	ldr	r3, [pc, #404]	; (8002f10 <xTaskIncrementTick+0x218>)
 8002d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d7e:	601a      	str	r2, [r3, #0]
                    break;
 8002d80:	e09c      	b.n	8002ebc <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d82:	4b60      	ldr	r3, [pc, #384]	; (8002f04 <xTaskIncrementTick+0x20c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002d92:	6a3a      	ldr	r2, [r7, #32]
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d203      	bcs.n	8002da2 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002d9a:	4a5d      	ldr	r2, [pc, #372]	; (8002f10 <xTaskIncrementTick+0x218>)
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002da0:	e08c      	b.n	8002ebc <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	613b      	str	r3, [r7, #16]
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	68d2      	ldr	r2, [r2, #12]
 8002db0:	609a      	str	r2, [r3, #8]
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	6892      	ldr	r2, [r2, #8]
 8002dba:	605a      	str	r2, [r3, #4]
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d103      	bne.n	8002dd0 <xTaskIncrementTick+0xd8>
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	68da      	ldr	r2, [r3, #12]
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	605a      	str	r2, [r3, #4]
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	615a      	str	r2, [r3, #20]
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	1e5a      	subs	r2, r3, #1
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d01e      	beq.n	8002e26 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	6a12      	ldr	r2, [r2, #32]
 8002df6:	609a      	str	r2, [r3, #8]
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	6a1b      	ldr	r3, [r3, #32]
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	69d2      	ldr	r2, [r2, #28]
 8002e00:	605a      	str	r2, [r3, #4]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	3318      	adds	r3, #24
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d103      	bne.n	8002e16 <xTaskIncrementTick+0x11e>
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	6a1a      	ldr	r2, [r3, #32]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	605a      	str	r2, [r3, #4]
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	629a      	str	r2, [r3, #40]	; 0x28
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	1e5a      	subs	r2, r3, #1
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e2a:	4b3a      	ldr	r3, [pc, #232]	; (8002f14 <xTaskIncrementTick+0x21c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d903      	bls.n	8002e3a <xTaskIncrementTick+0x142>
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e36:	4a37      	ldr	r2, [pc, #220]	; (8002f14 <xTaskIncrementTick+0x21c>)
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e3e:	4936      	ldr	r1, [pc, #216]	; (8002f18 <xTaskIncrementTick+0x220>)
 8002e40:	4613      	mov	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	440b      	add	r3, r1
 8002e4a:	3304      	adds	r3, #4
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	60bb      	str	r3, [r7, #8]
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	609a      	str	r2, [r3, #8]
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	60da      	str	r2, [r3, #12]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	3204      	adds	r2, #4
 8002e66:	605a      	str	r2, [r3, #4]
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	1d1a      	adds	r2, r3, #4
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	609a      	str	r2, [r3, #8]
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e74:	4613      	mov	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4a26      	ldr	r2, [pc, #152]	; (8002f18 <xTaskIncrementTick+0x220>)
 8002e7e:	441a      	add	r2, r3
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	615a      	str	r2, [r3, #20]
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e88:	4923      	ldr	r1, [pc, #140]	; (8002f18 <xTaskIncrementTick+0x220>)
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	1c59      	adds	r1, r3, #1
 8002e98:	481f      	ldr	r0, [pc, #124]	; (8002f18 <xTaskIncrementTick+0x220>)
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4403      	add	r3, r0
 8002ea4:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eaa:	4b1c      	ldr	r3, [pc, #112]	; (8002f1c <xTaskIncrementTick+0x224>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	f67f af5c 	bls.w	8002d6e <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002eba:	e758      	b.n	8002d6e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002ebc:	4b17      	ldr	r3, [pc, #92]	; (8002f1c <xTaskIncrementTick+0x224>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec2:	4915      	ldr	r1, [pc, #84]	; (8002f18 <xTaskIncrementTick+0x220>)
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4413      	add	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	440b      	add	r3, r1
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d901      	bls.n	8002ed8 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002ed8:	4b11      	ldr	r3, [pc, #68]	; (8002f20 <xTaskIncrementTick+0x228>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d007      	beq.n	8002ef0 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee4:	e004      	b.n	8002ef0 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002ee6:	4b0f      	ldr	r3, [pc, #60]	; (8002f24 <xTaskIncrementTick+0x22c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	3301      	adds	r3, #1
 8002eec:	4a0d      	ldr	r2, [pc, #52]	; (8002f24 <xTaskIncrementTick+0x22c>)
 8002eee:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3728      	adds	r7, #40	; 0x28
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	200005a8 	.word	0x200005a8
 8002f00:	20000584 	.word	0x20000584
 8002f04:	20000538 	.word	0x20000538
 8002f08:	2000053c 	.word	0x2000053c
 8002f0c:	20000598 	.word	0x20000598
 8002f10:	200005a0 	.word	0x200005a0
 8002f14:	20000588 	.word	0x20000588
 8002f18:	200004ac 	.word	0x200004ac
 8002f1c:	200004a8 	.word	0x200004a8
 8002f20:	20000594 	.word	0x20000594
 8002f24:	20000590 	.word	0x20000590

08002f28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002f2e:	4b27      	ldr	r3, [pc, #156]	; (8002fcc <vTaskSwitchContext+0xa4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002f36:	4b26      	ldr	r3, [pc, #152]	; (8002fd0 <vTaskSwitchContext+0xa8>)
 8002f38:	2201      	movs	r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002f3c:	e041      	b.n	8002fc2 <vTaskSwitchContext+0x9a>
        xYieldPending = pdFALSE;
 8002f3e:	4b24      	ldr	r3, [pc, #144]	; (8002fd0 <vTaskSwitchContext+0xa8>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f44:	4b23      	ldr	r3, [pc, #140]	; (8002fd4 <vTaskSwitchContext+0xac>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	e010      	b.n	8002f6e <vTaskSwitchContext+0x46>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10a      	bne.n	8002f68 <vTaskSwitchContext+0x40>
        __asm volatile
 8002f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f56:	f383 8811 	msr	BASEPRI, r3
 8002f5a:	f3bf 8f6f 	isb	sy
 8002f5e:	f3bf 8f4f 	dsb	sy
 8002f62:	607b      	str	r3, [r7, #4]
    }
 8002f64:	bf00      	nop
 8002f66:	e7fe      	b.n	8002f66 <vTaskSwitchContext+0x3e>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	491a      	ldr	r1, [pc, #104]	; (8002fd8 <vTaskSwitchContext+0xb0>)
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	4613      	mov	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4413      	add	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	440b      	add	r3, r1
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d0e4      	beq.n	8002f4c <vTaskSwitchContext+0x24>
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	4613      	mov	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4a12      	ldr	r2, [pc, #72]	; (8002fd8 <vTaskSwitchContext+0xb0>)
 8002f8e:	4413      	add	r3, r2
 8002f90:	60bb      	str	r3, [r7, #8]
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	605a      	str	r2, [r3, #4]
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	3308      	adds	r3, #8
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d104      	bne.n	8002fb2 <vTaskSwitchContext+0x8a>
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	605a      	str	r2, [r3, #4]
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	4a08      	ldr	r2, [pc, #32]	; (8002fdc <vTaskSwitchContext+0xb4>)
 8002fba:	6013      	str	r3, [r2, #0]
 8002fbc:	4a05      	ldr	r2, [pc, #20]	; (8002fd4 <vTaskSwitchContext+0xac>)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6013      	str	r3, [r2, #0]
}
 8002fc2:	bf00      	nop
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr
 8002fcc:	200005a8 	.word	0x200005a8
 8002fd0:	20000594 	.word	0x20000594
 8002fd4:	20000588 	.word	0x20000588
 8002fd8:	200004ac 	.word	0x200004ac
 8002fdc:	200004a8 	.word	0x200004a8

08002fe0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10a      	bne.n	8003006 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff4:	f383 8811 	msr	BASEPRI, r3
 8002ff8:	f3bf 8f6f 	isb	sy
 8002ffc:	f3bf 8f4f 	dsb	sy
 8003000:	60fb      	str	r3, [r7, #12]
    }
 8003002:	bf00      	nop
 8003004:	e7fe      	b.n	8003004 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003006:	4b07      	ldr	r3, [pc, #28]	; (8003024 <vTaskPlaceOnEventList+0x44>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	3318      	adds	r3, #24
 800300c:	4619      	mov	r1, r3
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 fe1b 	bl	8003c4a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003014:	2101      	movs	r1, #1
 8003016:	6838      	ldr	r0, [r7, #0]
 8003018:	f000 fad8 	bl	80035cc <prvAddCurrentTaskToDelayedList>
}
 800301c:	bf00      	nop
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	200004a8 	.word	0x200004a8

08003028 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10a      	bne.n	8003050 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800303a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303e:	f383 8811 	msr	BASEPRI, r3
 8003042:	f3bf 8f6f 	isb	sy
 8003046:	f3bf 8f4f 	dsb	sy
 800304a:	613b      	str	r3, [r7, #16]
    }
 800304c:	bf00      	nop
 800304e:	e7fe      	b.n	800304e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	617b      	str	r3, [r7, #20]
 8003056:	4b16      	ldr	r3, [pc, #88]	; (80030b0 <vTaskPlaceOnEventListRestricted+0x88>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	61da      	str	r2, [r3, #28]
 800305e:	4b14      	ldr	r3, [pc, #80]	; (80030b0 <vTaskPlaceOnEventListRestricted+0x88>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	6892      	ldr	r2, [r2, #8]
 8003066:	621a      	str	r2, [r3, #32]
 8003068:	4b11      	ldr	r3, [pc, #68]	; (80030b0 <vTaskPlaceOnEventListRestricted+0x88>)
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	3218      	adds	r2, #24
 8003072:	605a      	str	r2, [r3, #4]
 8003074:	4b0e      	ldr	r3, [pc, #56]	; (80030b0 <vTaskPlaceOnEventListRestricted+0x88>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f103 0218 	add.w	r2, r3, #24
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	609a      	str	r2, [r3, #8]
 8003080:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <vTaskPlaceOnEventListRestricted+0x88>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	629a      	str	r2, [r3, #40]	; 0x28
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	1c5a      	adds	r2, r3, #1
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d002      	beq.n	800309e <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003098:	f04f 33ff 	mov.w	r3, #4294967295
 800309c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	68b8      	ldr	r0, [r7, #8]
 80030a2:	f000 fa93 	bl	80035cc <prvAddCurrentTaskToDelayedList>
    }
 80030a6:	bf00      	nop
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	200004a8 	.word	0x200004a8

080030b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b08a      	sub	sp, #40	; 0x28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80030c4:	6a3b      	ldr	r3, [r7, #32]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10a      	bne.n	80030e0 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80030ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ce:	f383 8811 	msr	BASEPRI, r3
 80030d2:	f3bf 8f6f 	isb	sy
 80030d6:	f3bf 8f4f 	dsb	sy
 80030da:	60fb      	str	r3, [r7, #12]
    }
 80030dc:	bf00      	nop
 80030de:	e7fe      	b.n	80030de <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e4:	61fb      	str	r3, [r7, #28]
 80030e6:	6a3b      	ldr	r3, [r7, #32]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	6a3a      	ldr	r2, [r7, #32]
 80030ec:	6a12      	ldr	r2, [r2, #32]
 80030ee:	609a      	str	r2, [r3, #8]
 80030f0:	6a3b      	ldr	r3, [r7, #32]
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	6a3a      	ldr	r2, [r7, #32]
 80030f6:	69d2      	ldr	r2, [r2, #28]
 80030f8:	605a      	str	r2, [r3, #4]
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	3318      	adds	r3, #24
 8003102:	429a      	cmp	r2, r3
 8003104:	d103      	bne.n	800310e <xTaskRemoveFromEventList+0x5a>
 8003106:	6a3b      	ldr	r3, [r7, #32]
 8003108:	6a1a      	ldr	r2, [r3, #32]
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	605a      	str	r2, [r3, #4]
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	2200      	movs	r2, #0
 8003112:	629a      	str	r2, [r3, #40]	; 0x28
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	1e5a      	subs	r2, r3, #1
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800311e:	4b4b      	ldr	r3, [pc, #300]	; (800324c <xTaskRemoveFromEventList+0x198>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d161      	bne.n	80031ea <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003126:	6a3b      	ldr	r3, [r7, #32]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	617b      	str	r3, [r7, #20]
 800312c:	6a3b      	ldr	r3, [r7, #32]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	6a3a      	ldr	r2, [r7, #32]
 8003132:	68d2      	ldr	r2, [r2, #12]
 8003134:	609a      	str	r2, [r3, #8]
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	6a3a      	ldr	r2, [r7, #32]
 800313c:	6892      	ldr	r2, [r2, #8]
 800313e:	605a      	str	r2, [r3, #4]
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	3304      	adds	r3, #4
 8003148:	429a      	cmp	r2, r3
 800314a:	d103      	bne.n	8003154 <xTaskRemoveFromEventList+0xa0>
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	68da      	ldr	r2, [r3, #12]
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	605a      	str	r2, [r3, #4]
 8003154:	6a3b      	ldr	r3, [r7, #32]
 8003156:	2200      	movs	r2, #0
 8003158:	615a      	str	r2, [r3, #20]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	1e5a      	subs	r2, r3, #1
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003164:	6a3b      	ldr	r3, [r7, #32]
 8003166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003168:	4b39      	ldr	r3, [pc, #228]	; (8003250 <xTaskRemoveFromEventList+0x19c>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	429a      	cmp	r2, r3
 800316e:	d903      	bls.n	8003178 <xTaskRemoveFromEventList+0xc4>
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003174:	4a36      	ldr	r2, [pc, #216]	; (8003250 <xTaskRemoveFromEventList+0x19c>)
 8003176:	6013      	str	r3, [r2, #0]
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800317c:	4935      	ldr	r1, [pc, #212]	; (8003254 <xTaskRemoveFromEventList+0x1a0>)
 800317e:	4613      	mov	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	440b      	add	r3, r1
 8003188:	3304      	adds	r3, #4
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	613b      	str	r3, [r7, #16]
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	609a      	str	r2, [r3, #8]
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	60da      	str	r2, [r3, #12]
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	6a3a      	ldr	r2, [r7, #32]
 80031a2:	3204      	adds	r2, #4
 80031a4:	605a      	str	r2, [r3, #4]
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	1d1a      	adds	r2, r3, #4
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	609a      	str	r2, [r3, #8]
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b2:	4613      	mov	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4a26      	ldr	r2, [pc, #152]	; (8003254 <xTaskRemoveFromEventList+0x1a0>)
 80031bc:	441a      	add	r2, r3
 80031be:	6a3b      	ldr	r3, [r7, #32]
 80031c0:	615a      	str	r2, [r3, #20]
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c6:	4923      	ldr	r1, [pc, #140]	; (8003254 <xTaskRemoveFromEventList+0x1a0>)
 80031c8:	4613      	mov	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	1c59      	adds	r1, r3, #1
 80031d6:	481f      	ldr	r0, [pc, #124]	; (8003254 <xTaskRemoveFromEventList+0x1a0>)
 80031d8:	4613      	mov	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4413      	add	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4403      	add	r3, r0
 80031e2:	6019      	str	r1, [r3, #0]
             * normally left unchanged, because it is automatically reset to a new
             * value when the tick count equals xNextTaskUnblockTime.  However if
             * tickless idling is used it might be more important to enter sleep mode
             * at the earliest possible time - so reset xNextTaskUnblockTime here to
             * ensure it is updated at the earliest possible time. */
            prvResetNextTaskUnblockTime();
 80031e4:	f000 f9ba 	bl	800355c <prvResetNextTaskUnblockTime>
 80031e8:	e01b      	b.n	8003222 <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80031ea:	4b1b      	ldr	r3, [pc, #108]	; (8003258 <xTaskRemoveFromEventList+0x1a4>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	61bb      	str	r3, [r7, #24]
 80031f0:	6a3b      	ldr	r3, [r7, #32]
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	61da      	str	r2, [r3, #28]
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	6a3b      	ldr	r3, [r7, #32]
 80031fc:	621a      	str	r2, [r3, #32]
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	6a3a      	ldr	r2, [r7, #32]
 8003204:	3218      	adds	r2, #24
 8003206:	605a      	str	r2, [r3, #4]
 8003208:	6a3b      	ldr	r3, [r7, #32]
 800320a:	f103 0218 	add.w	r2, r3, #24
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	609a      	str	r2, [r3, #8]
 8003212:	6a3b      	ldr	r3, [r7, #32]
 8003214:	4a10      	ldr	r2, [pc, #64]	; (8003258 <xTaskRemoveFromEventList+0x1a4>)
 8003216:	629a      	str	r2, [r3, #40]	; 0x28
 8003218:	4b0f      	ldr	r3, [pc, #60]	; (8003258 <xTaskRemoveFromEventList+0x1a4>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	3301      	adds	r3, #1
 800321e:	4a0e      	ldr	r2, [pc, #56]	; (8003258 <xTaskRemoveFromEventList+0x1a4>)
 8003220:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003226:	4b0d      	ldr	r3, [pc, #52]	; (800325c <xTaskRemoveFromEventList+0x1a8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322c:	429a      	cmp	r2, r3
 800322e:	d905      	bls.n	800323c <xTaskRemoveFromEventList+0x188>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003230:	2301      	movs	r3, #1
 8003232:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003234:	4b0a      	ldr	r3, [pc, #40]	; (8003260 <xTaskRemoveFromEventList+0x1ac>)
 8003236:	2201      	movs	r2, #1
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	e001      	b.n	8003240 <xTaskRemoveFromEventList+0x18c>
    }
    else
    {
        xReturn = pdFALSE;
 800323c:	2300      	movs	r3, #0
 800323e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003242:	4618      	mov	r0, r3
 8003244:	3728      	adds	r7, #40	; 0x28
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	200005a8 	.word	0x200005a8
 8003250:	20000588 	.word	0x20000588
 8003254:	200004ac 	.word	0x200004ac
 8003258:	20000540 	.word	0x20000540
 800325c:	200004a8 	.word	0x200004a8
 8003260:	20000594 	.word	0x20000594

08003264 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800326c:	4b06      	ldr	r3, [pc, #24]	; (8003288 <vTaskInternalSetTimeOutState+0x24>)
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003274:	4b05      	ldr	r3, [pc, #20]	; (800328c <vTaskInternalSetTimeOutState+0x28>)
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	605a      	str	r2, [r3, #4]
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	bc80      	pop	{r7}
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	20000598 	.word	0x20000598
 800328c:	20000584 	.word	0x20000584

08003290 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b088      	sub	sp, #32
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10a      	bne.n	80032b6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80032a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a4:	f383 8811 	msr	BASEPRI, r3
 80032a8:	f3bf 8f6f 	isb	sy
 80032ac:	f3bf 8f4f 	dsb	sy
 80032b0:	613b      	str	r3, [r7, #16]
    }
 80032b2:	bf00      	nop
 80032b4:	e7fe      	b.n	80032b4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d10a      	bne.n	80032d2 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80032bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c0:	f383 8811 	msr	BASEPRI, r3
 80032c4:	f3bf 8f6f 	isb	sy
 80032c8:	f3bf 8f4f 	dsb	sy
 80032cc:	60fb      	str	r3, [r7, #12]
    }
 80032ce:	bf00      	nop
 80032d0:	e7fe      	b.n	80032d0 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80032d2:	f000 fe0d 	bl	8003ef0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80032d6:	4b1f      	ldr	r3, [pc, #124]	; (8003354 <xTaskCheckForTimeOut+0xc4>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ee:	d102      	bne.n	80032f6 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80032f0:	2300      	movs	r3, #0
 80032f2:	61fb      	str	r3, [r7, #28]
 80032f4:	e026      	b.n	8003344 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	4b17      	ldr	r3, [pc, #92]	; (8003358 <xTaskCheckForTimeOut+0xc8>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d00a      	beq.n	8003318 <xTaskCheckForTimeOut+0x88>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	429a      	cmp	r2, r3
 800330a:	d305      	bcc.n	8003318 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800330c:	2301      	movs	r3, #1
 800330e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]
 8003316:	e015      	b.n	8003344 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	429a      	cmp	r2, r3
 8003320:	d20b      	bcs.n	800333a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	1ad2      	subs	r2, r2, r3
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7ff ff98 	bl	8003264 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003334:	2300      	movs	r3, #0
 8003336:	61fb      	str	r3, [r7, #28]
 8003338:	e004      	b.n	8003344 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003340:	2301      	movs	r3, #1
 8003342:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003344:	f000 fe04 	bl	8003f50 <vPortExitCritical>

    return xReturn;
 8003348:	69fb      	ldr	r3, [r7, #28]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3720      	adds	r7, #32
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	20000584 	.word	0x20000584
 8003358:	20000598 	.word	0x20000598

0800335c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003360:	4b03      	ldr	r3, [pc, #12]	; (8003370 <vTaskMissedYield+0x14>)
 8003362:	2201      	movs	r2, #1
 8003364:	601a      	str	r2, [r3, #0]
}
 8003366:	bf00      	nop
 8003368:	46bd      	mov	sp, r7
 800336a:	bc80      	pop	{r7}
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	20000594 	.word	0x20000594

08003374 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800337c:	f000 f8b0 	bl	80034e0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003380:	4b18      	ldr	r3, [pc, #96]	; (80033e4 <prvIdleTask+0x70>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d907      	bls.n	8003398 <prvIdleTask+0x24>
            {
                taskYIELD();
 8003388:	4b17      	ldr	r3, [pc, #92]	; (80033e8 <prvIdleTask+0x74>)
 800338a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	f3bf 8f4f 	dsb	sy
 8003394:	f3bf 8f6f 	isb	sy
            /* It is not desirable to suspend then resume the scheduler on
             * each iteration of the idle task.  Therefore, a preliminary
             * test of the expected idle time is performed without the
             * scheduler suspended.  The result here is not necessarily
             * valid. */
            xExpectedIdleTime = prvGetExpectedIdleTime();
 8003398:	f7ff fb14 	bl	80029c4 <prvGetExpectedIdleTime>
 800339c:	60f8      	str	r0, [r7, #12]

            if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d9eb      	bls.n	800337c <prvIdleTask+0x8>
            {
                vTaskSuspendAll();
 80033a4:	f7ff fb00 	bl	80029a8 <vTaskSuspendAll>
                {
                    /* Now the scheduler is suspended, the expected idle
                     * time can be sampled again, and this time its value can
                     * be used. */
                    configASSERT( xNextTaskUnblockTime >= xTickCount );
 80033a8:	4b10      	ldr	r3, [pc, #64]	; (80033ec <prvIdleTask+0x78>)
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	4b10      	ldr	r3, [pc, #64]	; (80033f0 <prvIdleTask+0x7c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d20a      	bcs.n	80033ca <prvIdleTask+0x56>
        __asm volatile
 80033b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b8:	f383 8811 	msr	BASEPRI, r3
 80033bc:	f3bf 8f6f 	isb	sy
 80033c0:	f3bf 8f4f 	dsb	sy
 80033c4:	60bb      	str	r3, [r7, #8]
    }
 80033c6:	bf00      	nop
 80033c8:	e7fe      	b.n	80033c8 <prvIdleTask+0x54>
                    xExpectedIdleTime = prvGetExpectedIdleTime();
 80033ca:	f7ff fafb 	bl	80029c4 <prvGetExpectedIdleTime>
 80033ce:	60f8      	str	r0, [r7, #12]
                    /* Define the following macro to set xExpectedIdleTime to 0
                     * if the application does not want
                     * portSUPPRESS_TICKS_AND_SLEEP() to be called. */
                    configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

                    if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d902      	bls.n	80033dc <prvIdleTask+0x68>
                    {
                        traceLOW_POWER_IDLE_BEGIN();
                        portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 fe28 	bl	800402c <vPortSuppressTicksAndSleep>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                ( void ) xTaskResumeAll();
 80033dc:	f7ff fb28 	bl	8002a30 <xTaskResumeAll>
        prvCheckTasksWaitingTermination();
 80033e0:	e7cc      	b.n	800337c <prvIdleTask+0x8>
 80033e2:	bf00      	nop
 80033e4:	200004ac 	.word	0x200004ac
 80033e8:	e000ed04 	.word	0xe000ed04
 80033ec:	200005a0 	.word	0x200005a0
 80033f0:	20000584 	.word	0x20000584

080033f4 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

    eSleepModeStatus eTaskConfirmSleepModeStatus( void )
    {
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
        #if ( INCLUDE_vTaskSuspend == 1 )
            /* The idle task exists in addition to the application tasks. */
            const UBaseType_t uxNonApplicationTasks = 1;
 80033fa:	2301      	movs	r3, #1
 80033fc:	603b      	str	r3, [r7, #0]
        #endif /* INCLUDE_vTaskSuspend */

        eSleepModeStatus eReturn = eStandardSleep;
 80033fe:	2301      	movs	r3, #1
 8003400:	71fb      	strb	r3, [r7, #7]

        /* This function must be called from a critical section. */

        if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 8003402:	4b12      	ldr	r3, [pc, #72]	; (800344c <eTaskConfirmSleepModeStatus+0x58>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d002      	beq.n	8003410 <eTaskConfirmSleepModeStatus+0x1c>
        {
            /* A task was made ready while the scheduler was suspended. */
            eReturn = eAbortSleep;
 800340a:	2300      	movs	r3, #0
 800340c:	71fb      	strb	r3, [r7, #7]
 800340e:	e017      	b.n	8003440 <eTaskConfirmSleepModeStatus+0x4c>
        }
        else if( xYieldPending != pdFALSE )
 8003410:	4b0f      	ldr	r3, [pc, #60]	; (8003450 <eTaskConfirmSleepModeStatus+0x5c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d002      	beq.n	800341e <eTaskConfirmSleepModeStatus+0x2a>
        {
            /* A yield was pended while the scheduler was suspended. */
            eReturn = eAbortSleep;
 8003418:	2300      	movs	r3, #0
 800341a:	71fb      	strb	r3, [r7, #7]
 800341c:	e010      	b.n	8003440 <eTaskConfirmSleepModeStatus+0x4c>
        }
        else if( xPendedTicks != 0 )
 800341e:	4b0d      	ldr	r3, [pc, #52]	; (8003454 <eTaskConfirmSleepModeStatus+0x60>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d002      	beq.n	800342c <eTaskConfirmSleepModeStatus+0x38>
        {
            /* A tick interrupt has already occurred but was held pending
             * because the scheduler is suspended. */
            eReturn = eAbortSleep;
 8003426:	2300      	movs	r3, #0
 8003428:	71fb      	strb	r3, [r7, #7]
 800342a:	e009      	b.n	8003440 <eTaskConfirmSleepModeStatus+0x4c>
        }

        #if ( INCLUDE_vTaskSuspend == 1 )
            else if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800342c:	4b0a      	ldr	r3, [pc, #40]	; (8003458 <eTaskConfirmSleepModeStatus+0x64>)
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	4b0a      	ldr	r3, [pc, #40]	; (800345c <eTaskConfirmSleepModeStatus+0x68>)
 8003432:	6819      	ldr	r1, [r3, #0]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	1acb      	subs	r3, r1, r3
 8003438:	429a      	cmp	r2, r3
 800343a:	d101      	bne.n	8003440 <eTaskConfirmSleepModeStatus+0x4c>
            {
                /* If all the tasks are in the suspended list (which might mean they
                 * have an infinite block time rather than actually being suspended)
                 * then it is safe to turn all clocks off and just wait for external
                 * interrupts. */
                eReturn = eNoTasksWaitingTimeout;
 800343c:	2302      	movs	r3, #2
 800343e:	71fb      	strb	r3, [r7, #7]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return eReturn;
 8003440:	79fb      	ldrb	r3, [r7, #7]
    }
 8003442:	4618      	mov	r0, r3
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	bc80      	pop	{r7}
 800344a:	4770      	bx	lr
 800344c:	20000540 	.word	0x20000540
 8003450:	20000594 	.word	0x20000594
 8003454:	20000590 	.word	0x20000590
 8003458:	2000056c 	.word	0x2000056c
 800345c:	20000580 	.word	0x20000580

08003460 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003466:	2300      	movs	r3, #0
 8003468:	607b      	str	r3, [r7, #4]
 800346a:	e00c      	b.n	8003486 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	4613      	mov	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4a12      	ldr	r2, [pc, #72]	; (80034c0 <prvInitialiseTaskLists+0x60>)
 8003478:	4413      	add	r3, r2
 800347a:	4618      	mov	r0, r3
 800347c:	f000 fbba 	bl	8003bf4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3301      	adds	r3, #1
 8003484:	607b      	str	r3, [r7, #4]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b04      	cmp	r3, #4
 800348a:	d9ef      	bls.n	800346c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800348c:	480d      	ldr	r0, [pc, #52]	; (80034c4 <prvInitialiseTaskLists+0x64>)
 800348e:	f000 fbb1 	bl	8003bf4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003492:	480d      	ldr	r0, [pc, #52]	; (80034c8 <prvInitialiseTaskLists+0x68>)
 8003494:	f000 fbae 	bl	8003bf4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003498:	480c      	ldr	r0, [pc, #48]	; (80034cc <prvInitialiseTaskLists+0x6c>)
 800349a:	f000 fbab 	bl	8003bf4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800349e:	480c      	ldr	r0, [pc, #48]	; (80034d0 <prvInitialiseTaskLists+0x70>)
 80034a0:	f000 fba8 	bl	8003bf4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80034a4:	480b      	ldr	r0, [pc, #44]	; (80034d4 <prvInitialiseTaskLists+0x74>)
 80034a6:	f000 fba5 	bl	8003bf4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80034aa:	4b0b      	ldr	r3, [pc, #44]	; (80034d8 <prvInitialiseTaskLists+0x78>)
 80034ac:	4a05      	ldr	r2, [pc, #20]	; (80034c4 <prvInitialiseTaskLists+0x64>)
 80034ae:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80034b0:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <prvInitialiseTaskLists+0x7c>)
 80034b2:	4a05      	ldr	r2, [pc, #20]	; (80034c8 <prvInitialiseTaskLists+0x68>)
 80034b4:	601a      	str	r2, [r3, #0]
}
 80034b6:	bf00      	nop
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	200004ac 	.word	0x200004ac
 80034c4:	20000510 	.word	0x20000510
 80034c8:	20000524 	.word	0x20000524
 80034cc:	20000540 	.word	0x20000540
 80034d0:	20000554 	.word	0x20000554
 80034d4:	2000056c 	.word	0x2000056c
 80034d8:	20000538 	.word	0x20000538
 80034dc:	2000053c 	.word	0x2000053c

080034e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80034e6:	e019      	b.n	800351c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80034e8:	f000 fd02 	bl	8003ef0 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034ec:	4b10      	ldr	r3, [pc, #64]	; (8003530 <prvCheckTasksWaitingTermination+0x50>)
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3304      	adds	r3, #4
 80034f8:	4618      	mov	r0, r3
 80034fa:	f000 fbde 	bl	8003cba <uxListRemove>
                --uxCurrentNumberOfTasks;
 80034fe:	4b0d      	ldr	r3, [pc, #52]	; (8003534 <prvCheckTasksWaitingTermination+0x54>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	3b01      	subs	r3, #1
 8003504:	4a0b      	ldr	r2, [pc, #44]	; (8003534 <prvCheckTasksWaitingTermination+0x54>)
 8003506:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003508:	4b0b      	ldr	r3, [pc, #44]	; (8003538 <prvCheckTasksWaitingTermination+0x58>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	3b01      	subs	r3, #1
 800350e:	4a0a      	ldr	r2, [pc, #40]	; (8003538 <prvCheckTasksWaitingTermination+0x58>)
 8003510:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003512:	f000 fd1d 	bl	8003f50 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f810 	bl	800353c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800351c:	4b06      	ldr	r3, [pc, #24]	; (8003538 <prvCheckTasksWaitingTermination+0x58>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1e1      	bne.n	80034e8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003524:	bf00      	nop
 8003526:	bf00      	nop
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	20000554 	.word	0x20000554
 8003534:	20000580 	.word	0x20000580
 8003538:	20000568 	.word	0x20000568

0800353c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003548:	4618      	mov	r0, r3
 800354a:	f000 fb41 	bl	8003bd0 <vPortFree>
            vPortFree( pxTCB );
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 fb3e 	bl	8003bd0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003554:	bf00      	nop
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003560:	4b09      	ldr	r3, [pc, #36]	; (8003588 <prvResetNextTaskUnblockTime+0x2c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d104      	bne.n	8003574 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800356a:	4b08      	ldr	r3, [pc, #32]	; (800358c <prvResetNextTaskUnblockTime+0x30>)
 800356c:	f04f 32ff 	mov.w	r2, #4294967295
 8003570:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003572:	e005      	b.n	8003580 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003574:	4b04      	ldr	r3, [pc, #16]	; (8003588 <prvResetNextTaskUnblockTime+0x2c>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a03      	ldr	r2, [pc, #12]	; (800358c <prvResetNextTaskUnblockTime+0x30>)
 800357e:	6013      	str	r3, [r2, #0]
}
 8003580:	bf00      	nop
 8003582:	46bd      	mov	sp, r7
 8003584:	bc80      	pop	{r7}
 8003586:	4770      	bx	lr
 8003588:	20000538 	.word	0x20000538
 800358c:	200005a0 	.word	0x200005a0

08003590 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003596:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <xTaskGetSchedulerState+0x34>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d102      	bne.n	80035a4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800359e:	2301      	movs	r3, #1
 80035a0:	607b      	str	r3, [r7, #4]
 80035a2:	e008      	b.n	80035b6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035a4:	4b08      	ldr	r3, [pc, #32]	; (80035c8 <xTaskGetSchedulerState+0x38>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d102      	bne.n	80035b2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80035ac:	2302      	movs	r3, #2
 80035ae:	607b      	str	r3, [r7, #4]
 80035b0:	e001      	b.n	80035b6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80035b2:	2300      	movs	r3, #0
 80035b4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80035b6:	687b      	ldr	r3, [r7, #4]
    }
 80035b8:	4618      	mov	r0, r3
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	bc80      	pop	{r7}
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	2000058c 	.word	0x2000058c
 80035c8:	200005a8 	.word	0x200005a8

080035cc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80035d6:	4b2e      	ldr	r3, [pc, #184]	; (8003690 <prvAddCurrentTaskToDelayedList+0xc4>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035dc:	4b2d      	ldr	r3, [pc, #180]	; (8003694 <prvAddCurrentTaskToDelayedList+0xc8>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	3304      	adds	r3, #4
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 fb69 	bl	8003cba <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ee:	d124      	bne.n	800363a <prvAddCurrentTaskToDelayedList+0x6e>
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d021      	beq.n	800363a <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035f6:	4b28      	ldr	r3, [pc, #160]	; (8003698 <prvAddCurrentTaskToDelayedList+0xcc>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	613b      	str	r3, [r7, #16]
 80035fc:	4b25      	ldr	r3, [pc, #148]	; (8003694 <prvAddCurrentTaskToDelayedList+0xc8>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	609a      	str	r2, [r3, #8]
 8003604:	4b23      	ldr	r3, [pc, #140]	; (8003694 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	6892      	ldr	r2, [r2, #8]
 800360c:	60da      	str	r2, [r3, #12]
 800360e:	4b21      	ldr	r3, [pc, #132]	; (8003694 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	3204      	adds	r2, #4
 8003618:	605a      	str	r2, [r3, #4]
 800361a:	4b1e      	ldr	r3, [pc, #120]	; (8003694 <prvAddCurrentTaskToDelayedList+0xc8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	1d1a      	adds	r2, r3, #4
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	609a      	str	r2, [r3, #8]
 8003624:	4b1b      	ldr	r3, [pc, #108]	; (8003694 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a1b      	ldr	r2, [pc, #108]	; (8003698 <prvAddCurrentTaskToDelayedList+0xcc>)
 800362a:	615a      	str	r2, [r3, #20]
 800362c:	4b1a      	ldr	r3, [pc, #104]	; (8003698 <prvAddCurrentTaskToDelayedList+0xcc>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	3301      	adds	r3, #1
 8003632:	4a19      	ldr	r2, [pc, #100]	; (8003698 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003634:	6013      	str	r3, [r2, #0]
 8003636:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003638:	e026      	b.n	8003688 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4413      	add	r3, r2
 8003640:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003642:	4b14      	ldr	r3, [pc, #80]	; (8003694 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	429a      	cmp	r2, r3
 8003650:	d209      	bcs.n	8003666 <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003652:	4b12      	ldr	r3, [pc, #72]	; (800369c <prvAddCurrentTaskToDelayedList+0xd0>)
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	4b0f      	ldr	r3, [pc, #60]	; (8003694 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	3304      	adds	r3, #4
 800365c:	4619      	mov	r1, r3
 800365e:	4610      	mov	r0, r2
 8003660:	f000 faf3 	bl	8003c4a <vListInsert>
}
 8003664:	e010      	b.n	8003688 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003666:	4b0e      	ldr	r3, [pc, #56]	; (80036a0 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	4b0a      	ldr	r3, [pc, #40]	; (8003694 <prvAddCurrentTaskToDelayedList+0xc8>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	3304      	adds	r3, #4
 8003670:	4619      	mov	r1, r3
 8003672:	4610      	mov	r0, r2
 8003674:	f000 fae9 	bl	8003c4a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003678:	4b0a      	ldr	r3, [pc, #40]	; (80036a4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	429a      	cmp	r2, r3
 8003680:	d202      	bcs.n	8003688 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 8003682:	4a08      	ldr	r2, [pc, #32]	; (80036a4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6013      	str	r3, [r2, #0]
}
 8003688:	bf00      	nop
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	20000584 	.word	0x20000584
 8003694:	200004a8 	.word	0x200004a8
 8003698:	2000056c 	.word	0x2000056c
 800369c:	2000053c 	.word	0x2000053c
 80036a0:	20000538 	.word	0x20000538
 80036a4:	200005a0 	.word	0x200005a0

080036a8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80036b2:	f000 fa45 	bl	8003b40 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80036b6:	4b11      	ldr	r3, [pc, #68]	; (80036fc <xTimerCreateTimerTask+0x54>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00a      	beq.n	80036d4 <xTimerCreateTimerTask+0x2c>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80036be:	4b10      	ldr	r3, [pc, #64]	; (8003700 <xTimerCreateTimerTask+0x58>)
 80036c0:	9301      	str	r3, [sp, #4]
 80036c2:	2303      	movs	r3, #3
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	2300      	movs	r3, #0
 80036c8:	2280      	movs	r2, #128	; 0x80
 80036ca:	490e      	ldr	r1, [pc, #56]	; (8003704 <xTimerCreateTimerTask+0x5c>)
 80036cc:	480e      	ldr	r0, [pc, #56]	; (8003708 <xTimerCreateTimerTask+0x60>)
 80036ce:	f7fe ffad 	bl	800262c <xTaskCreate>
 80036d2:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10a      	bne.n	80036f0 <xTimerCreateTimerTask+0x48>
        __asm volatile
 80036da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036de:	f383 8811 	msr	BASEPRI, r3
 80036e2:	f3bf 8f6f 	isb	sy
 80036e6:	f3bf 8f4f 	dsb	sy
 80036ea:	603b      	str	r3, [r7, #0]
    }
 80036ec:	bf00      	nop
 80036ee:	e7fe      	b.n	80036ee <xTimerCreateTimerTask+0x46>
        return xReturn;
 80036f0:	687b      	ldr	r3, [r7, #4]
    }
 80036f2:	4618      	mov	r0, r3
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	200005dc 	.word	0x200005dc
 8003700:	200005e0 	.word	0x200005e0
 8003704:	08005148 	.word	0x08005148
 8003708:	080037b1 	.word	0x080037b1

0800370c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003718:	e008      	b.n	800372c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	4413      	add	r3, r2
 8003722:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	699a      	ldr	r2, [r3, #24]
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	18d1      	adds	r1, r2, r3
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 f8db 	bl	80038f4 <prvInsertTimerInActiveList>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1ea      	bne.n	800371a <prvReloadTimer+0xe>
        }
    }
 8003744:	bf00      	nop
 8003746:	bf00      	nop
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
	...

08003750 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800375a:	4b14      	ldr	r3, [pc, #80]	; (80037ac <prvProcessExpiredTimer+0x5c>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	3304      	adds	r3, #4
 8003768:	4618      	mov	r0, r3
 800376a:	f000 faa6 	bl	8003cba <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	d005      	beq.n	8003788 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f7ff ffc3 	bl	800370c <prvReloadTimer>
 8003786:	e008      	b.n	800379a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800378e:	f023 0301 	bic.w	r3, r3, #1
 8003792:	b2da      	uxtb	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	4798      	blx	r3
    }
 80037a2:	bf00      	nop
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	200005d4 	.word	0x200005d4

080037b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80037b8:	f107 0308 	add.w	r3, r7, #8
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 f857 	bl	8003870 <prvGetNextExpireTime>
 80037c2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	4619      	mov	r1, r3
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f000 f803 	bl	80037d4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80037ce:	f000 f8d3 	bl	8003978 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80037d2:	e7f1      	b.n	80037b8 <prvTimerTask+0x8>

080037d4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80037de:	f7ff f8e3 	bl	80029a8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80037e2:	f107 0308 	add.w	r3, r7, #8
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 f864 	bl	80038b4 <prvSampleTimeNow>
 80037ec:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d130      	bne.n	8003856 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10a      	bne.n	8003810 <prvProcessTimerOrBlockTask+0x3c>
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d806      	bhi.n	8003810 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003802:	f7ff f915 	bl	8002a30 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003806:	68f9      	ldr	r1, [r7, #12]
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7ff ffa1 	bl	8003750 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800380e:	e024      	b.n	800385a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d008      	beq.n	8003828 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003816:	4b13      	ldr	r3, [pc, #76]	; (8003864 <prvProcessTimerOrBlockTask+0x90>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <prvProcessTimerOrBlockTask+0x50>
 8003820:	2301      	movs	r3, #1
 8003822:	e000      	b.n	8003826 <prvProcessTimerOrBlockTask+0x52>
 8003824:	2300      	movs	r3, #0
 8003826:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003828:	4b0f      	ldr	r3, [pc, #60]	; (8003868 <prvProcessTimerOrBlockTask+0x94>)
 800382a:	6818      	ldr	r0, [r3, #0]
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	4619      	mov	r1, r3
 8003836:	f000 ffbd 	bl	80047b4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800383a:	f7ff f8f9 	bl	8002a30 <xTaskResumeAll>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10a      	bne.n	800385a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003844:	4b09      	ldr	r3, [pc, #36]	; (800386c <prvProcessTimerOrBlockTask+0x98>)
 8003846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	f3bf 8f4f 	dsb	sy
 8003850:	f3bf 8f6f 	isb	sy
    }
 8003854:	e001      	b.n	800385a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003856:	f7ff f8eb 	bl	8002a30 <xTaskResumeAll>
    }
 800385a:	bf00      	nop
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	200005d8 	.word	0x200005d8
 8003868:	200005dc 	.word	0x200005dc
 800386c:	e000ed04 	.word	0xe000ed04

08003870 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003878:	4b0d      	ldr	r3, [pc, #52]	; (80038b0 <prvGetNextExpireTime+0x40>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <prvGetNextExpireTime+0x16>
 8003882:	2201      	movs	r2, #1
 8003884:	e000      	b.n	8003888 <prvGetNextExpireTime+0x18>
 8003886:	2200      	movs	r2, #0
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d105      	bne.n	80038a0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003894:	4b06      	ldr	r3, [pc, #24]	; (80038b0 <prvGetNextExpireTime+0x40>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	60fb      	str	r3, [r7, #12]
 800389e:	e001      	b.n	80038a4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80038a0:	2300      	movs	r3, #0
 80038a2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80038a4:	68fb      	ldr	r3, [r7, #12]
    }
 80038a6:	4618      	mov	r0, r3
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bc80      	pop	{r7}
 80038ae:	4770      	bx	lr
 80038b0:	200005d4 	.word	0x200005d4

080038b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80038bc:	f7ff f9b4 	bl	8002c28 <xTaskGetTickCount>
 80038c0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80038c2:	4b0b      	ldr	r3, [pc, #44]	; (80038f0 <prvSampleTimeNow+0x3c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d205      	bcs.n	80038d8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80038cc:	f000 f912 	bl	8003af4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	e002      	b.n	80038de <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80038de:	4a04      	ldr	r2, [pc, #16]	; (80038f0 <prvSampleTimeNow+0x3c>)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80038e4:	68fb      	ldr	r3, [r7, #12]
    }
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	200005e4 	.word	0x200005e4

080038f4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
 8003900:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003902:	2300      	movs	r3, #0
 8003904:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	429a      	cmp	r2, r3
 8003918:	d812      	bhi.n	8003940 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	1ad2      	subs	r2, r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	429a      	cmp	r2, r3
 8003926:	d302      	bcc.n	800392e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003928:	2301      	movs	r3, #1
 800392a:	617b      	str	r3, [r7, #20]
 800392c:	e01b      	b.n	8003966 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800392e:	4b10      	ldr	r3, [pc, #64]	; (8003970 <prvInsertTimerInActiveList+0x7c>)
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	3304      	adds	r3, #4
 8003936:	4619      	mov	r1, r3
 8003938:	4610      	mov	r0, r2
 800393a:	f000 f986 	bl	8003c4a <vListInsert>
 800393e:	e012      	b.n	8003966 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	429a      	cmp	r2, r3
 8003946:	d206      	bcs.n	8003956 <prvInsertTimerInActiveList+0x62>
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	429a      	cmp	r2, r3
 800394e:	d302      	bcc.n	8003956 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003950:	2301      	movs	r3, #1
 8003952:	617b      	str	r3, [r7, #20]
 8003954:	e007      	b.n	8003966 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003956:	4b07      	ldr	r3, [pc, #28]	; (8003974 <prvInsertTimerInActiveList+0x80>)
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	3304      	adds	r3, #4
 800395e:	4619      	mov	r1, r3
 8003960:	4610      	mov	r0, r2
 8003962:	f000 f972 	bl	8003c4a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003966:	697b      	ldr	r3, [r7, #20]
    }
 8003968:	4618      	mov	r0, r3
 800396a:	3718      	adds	r7, #24
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	200005d8 	.word	0x200005d8
 8003974:	200005d4 	.word	0x200005d4

08003978 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003978:	b580      	push	{r7, lr}
 800397a:	b088      	sub	sp, #32
 800397c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800397e:	e0a6      	b.n	8003ace <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2b00      	cmp	r3, #0
 8003984:	f2c0 80a2 	blt.w	8003acc <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d004      	beq.n	800399e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	3304      	adds	r3, #4
 8003998:	4618      	mov	r0, r3
 800399a:	f000 f98e 	bl	8003cba <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800399e:	1d3b      	adds	r3, r7, #4
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff ff87 	bl	80038b4 <prvSampleTimeNow>
 80039a6:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	3b01      	subs	r3, #1
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	f200 808e 	bhi.w	8003ace <prvProcessReceivedCommands+0x156>
 80039b2:	a201      	add	r2, pc, #4	; (adr r2, 80039b8 <prvProcessReceivedCommands+0x40>)
 80039b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b8:	080039dd 	.word	0x080039dd
 80039bc:	080039dd 	.word	0x080039dd
 80039c0:	08003a45 	.word	0x08003a45
 80039c4:	08003a59 	.word	0x08003a59
 80039c8:	08003aa3 	.word	0x08003aa3
 80039cc:	080039dd 	.word	0x080039dd
 80039d0:	080039dd 	.word	0x080039dd
 80039d4:	08003a45 	.word	0x08003a45
 80039d8:	08003a59 	.word	0x08003a59
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039e2:	f043 0301 	orr.w	r3, r3, #1
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	18d1      	adds	r1, r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	69f8      	ldr	r0, [r7, #28]
 80039fc:	f7ff ff7a 	bl	80038f4 <prvInsertTimerInActiveList>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d063      	beq.n	8003ace <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d009      	beq.n	8003a28 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	4619      	mov	r1, r3
 8003a20:	69f8      	ldr	r0, [r7, #28]
 8003a22:	f7ff fe73 	bl	800370c <prvReloadTimer>
 8003a26:	e008      	b.n	8003a3a <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a2e:	f023 0301 	bic.w	r3, r3, #1
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	69f8      	ldr	r0, [r7, #28]
 8003a40:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003a42:	e044      	b.n	8003ace <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a4a:	f023 0301 	bic.w	r3, r3, #1
 8003a4e:	b2da      	uxtb	r2, r3
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003a56:	e03a      	b.n	8003ace <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a5e:	f043 0301 	orr.w	r3, r3, #1
 8003a62:	b2da      	uxtb	r2, r3
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10a      	bne.n	8003a8e <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7c:	f383 8811 	msr	BASEPRI, r3
 8003a80:	f3bf 8f6f 	isb	sy
 8003a84:	f3bf 8f4f 	dsb	sy
 8003a88:	617b      	str	r3, [r7, #20]
    }
 8003a8a:	bf00      	nop
 8003a8c:	e7fe      	b.n	8003a8c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	699a      	ldr	r2, [r3, #24]
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	18d1      	adds	r1, r2, r3
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	69f8      	ldr	r0, [r7, #28]
 8003a9c:	f7ff ff2a 	bl	80038f4 <prvInsertTimerInActiveList>
                        break;
 8003aa0:	e015      	b.n	8003ace <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d103      	bne.n	8003ab8 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8003ab0:	69f8      	ldr	r0, [r7, #28]
 8003ab2:	f000 f88d 	bl	8003bd0 <vPortFree>
 8003ab6:	e00a      	b.n	8003ace <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003abe:	f023 0301 	bic.w	r3, r3, #1
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003aca:	e000      	b.n	8003ace <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003acc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ace:	4b08      	ldr	r3, [pc, #32]	; (8003af0 <prvProcessReceivedCommands+0x178>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f107 0108 	add.w	r1, r7, #8
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f000 fcaf 	bl	800443c <xQueueReceive>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f47f af4d 	bne.w	8003980 <prvProcessReceivedCommands+0x8>
        }
    }
 8003ae6:	bf00      	nop
 8003ae8:	bf00      	nop
 8003aea:	3720      	adds	r7, #32
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	200005dc 	.word	0x200005dc

08003af4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003afa:	e009      	b.n	8003b10 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003afc:	4b0e      	ldr	r3, [pc, #56]	; (8003b38 <prvSwitchTimerLists+0x44>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003b06:	f04f 31ff 	mov.w	r1, #4294967295
 8003b0a:	6838      	ldr	r0, [r7, #0]
 8003b0c:	f7ff fe20 	bl	8003750 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003b10:	4b09      	ldr	r3, [pc, #36]	; (8003b38 <prvSwitchTimerLists+0x44>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1f0      	bne.n	8003afc <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003b1a:	4b07      	ldr	r3, [pc, #28]	; (8003b38 <prvSwitchTimerLists+0x44>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003b20:	4b06      	ldr	r3, [pc, #24]	; (8003b3c <prvSwitchTimerLists+0x48>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a04      	ldr	r2, [pc, #16]	; (8003b38 <prvSwitchTimerLists+0x44>)
 8003b26:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003b28:	4a04      	ldr	r2, [pc, #16]	; (8003b3c <prvSwitchTimerLists+0x48>)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6013      	str	r3, [r2, #0]
    }
 8003b2e:	bf00      	nop
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	200005d4 	.word	0x200005d4
 8003b3c:	200005d8 	.word	0x200005d8

08003b40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003b44:	f000 f9d4 	bl	8003ef0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003b48:	4b12      	ldr	r3, [pc, #72]	; (8003b94 <prvCheckForValidListAndQueue+0x54>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d11d      	bne.n	8003b8c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003b50:	4811      	ldr	r0, [pc, #68]	; (8003b98 <prvCheckForValidListAndQueue+0x58>)
 8003b52:	f000 f84f 	bl	8003bf4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003b56:	4811      	ldr	r0, [pc, #68]	; (8003b9c <prvCheckForValidListAndQueue+0x5c>)
 8003b58:	f000 f84c 	bl	8003bf4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003b5c:	4b10      	ldr	r3, [pc, #64]	; (8003ba0 <prvCheckForValidListAndQueue+0x60>)
 8003b5e:	4a0e      	ldr	r2, [pc, #56]	; (8003b98 <prvCheckForValidListAndQueue+0x58>)
 8003b60:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003b62:	4b10      	ldr	r3, [pc, #64]	; (8003ba4 <prvCheckForValidListAndQueue+0x64>)
 8003b64:	4a0d      	ldr	r2, [pc, #52]	; (8003b9c <prvCheckForValidListAndQueue+0x5c>)
 8003b66:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003b68:	2200      	movs	r2, #0
 8003b6a:	210c      	movs	r1, #12
 8003b6c:	200a      	movs	r0, #10
 8003b6e:	f000 fbf3 	bl	8004358 <xQueueGenericCreate>
 8003b72:	4603      	mov	r3, r0
 8003b74:	4a07      	ldr	r2, [pc, #28]	; (8003b94 <prvCheckForValidListAndQueue+0x54>)
 8003b76:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003b78:	4b06      	ldr	r3, [pc, #24]	; (8003b94 <prvCheckForValidListAndQueue+0x54>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d005      	beq.n	8003b8c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003b80:	4b04      	ldr	r3, [pc, #16]	; (8003b94 <prvCheckForValidListAndQueue+0x54>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4908      	ldr	r1, [pc, #32]	; (8003ba8 <prvCheckForValidListAndQueue+0x68>)
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 fdc6 	bl	8004718 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003b8c:	f000 f9e0 	bl	8003f50 <vPortExitCritical>
    }
 8003b90:	bf00      	nop
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	200005dc 	.word	0x200005dc
 8003b98:	200005ac 	.word	0x200005ac
 8003b9c:	200005c0 	.word	0x200005c0
 8003ba0:	200005d4 	.word	0x200005d4
 8003ba4:	200005d8 	.word	0x200005d8
 8003ba8:	08005150 	.word	0x08005150

08003bac <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
    void * pvReturn;

    vTaskSuspendAll();
 8003bb4:	f7fe fef8 	bl	80029a8 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 fe59 	bl	8004870 <malloc>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	60fb      	str	r3, [r7, #12]
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003bc2:	f7fe ff35 	bl	8002a30 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
    if( pv != NULL )
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d006      	beq.n	8003bec <vPortFree+0x1c>
    {
        vTaskSuspendAll();
 8003bde:	f7fe fee3 	bl	80029a8 <vTaskSuspendAll>
        {
            free( pv );
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 fe4c 	bl	8004880 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
 8003be8:	f7fe ff22 	bl	8002a30 <xTaskResumeAll>
    }
}
 8003bec:	bf00      	nop
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f103 0208 	add.w	r2, r3, #8
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f04f 32ff 	mov.w	r2, #4294967295
 8003c0c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f103 0208 	add.w	r2, r3, #8
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f103 0208 	add.w	r2, r3, #8
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bc80      	pop	{r7}
 8003c30:	4770      	bx	lr

08003c32 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bc80      	pop	{r7}
 8003c48:	4770      	bx	lr

08003c4a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b085      	sub	sp, #20
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
 8003c52:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c60:	d103      	bne.n	8003c6a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	e00c      	b.n	8003c84 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	3308      	adds	r3, #8
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	e002      	b.n	8003c78 <vListInsert+0x2e>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	60fb      	str	r3, [r7, #12]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d2f6      	bcs.n	8003c72 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	1c5a      	adds	r2, r3, #1
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	601a      	str	r2, [r3, #0]
}
 8003cb0:	bf00      	nop
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bc80      	pop	{r7}
 8003cb8:	4770      	bx	lr

08003cba <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b085      	sub	sp, #20
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6892      	ldr	r2, [r2, #8]
 8003cd0:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6852      	ldr	r2, [r2, #4]
 8003cda:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d103      	bne.n	8003cee <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	689a      	ldr	r2, [r3, #8]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	1e5a      	subs	r2, r3, #1
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bc80      	pop	{r7}
 8003d0a:	4770      	bx	lr

08003d0c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	3b04      	subs	r3, #4
 8003d1c:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d24:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	3b04      	subs	r3, #4
 8003d2a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	f023 0201 	bic.w	r2, r3, #1
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	3b04      	subs	r3, #4
 8003d3a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003d3c:	4a08      	ldr	r2, [pc, #32]	; (8003d60 <pxPortInitialiseStack+0x54>)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	3b14      	subs	r3, #20
 8003d46:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	3b20      	subs	r3, #32
 8003d52:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003d54:	68fb      	ldr	r3, [r7, #12]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3714      	adds	r7, #20
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bc80      	pop	{r7}
 8003d5e:	4770      	bx	lr
 8003d60:	08003d65 	.word	0x08003d65

08003d64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003d6e:	4b12      	ldr	r3, [pc, #72]	; (8003db8 <prvTaskExitError+0x54>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d76:	d00a      	beq.n	8003d8e <prvTaskExitError+0x2a>
        __asm volatile
 8003d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7c:	f383 8811 	msr	BASEPRI, r3
 8003d80:	f3bf 8f6f 	isb	sy
 8003d84:	f3bf 8f4f 	dsb	sy
 8003d88:	60fb      	str	r3, [r7, #12]
    }
 8003d8a:	bf00      	nop
 8003d8c:	e7fe      	b.n	8003d8c <prvTaskExitError+0x28>
        __asm volatile
 8003d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d92:	f383 8811 	msr	BASEPRI, r3
 8003d96:	f3bf 8f6f 	isb	sy
 8003d9a:	f3bf 8f4f 	dsb	sy
 8003d9e:	60bb      	str	r3, [r7, #8]
    }
 8003da0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003da2:	bf00      	nop
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d0fc      	beq.n	8003da4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003daa:	bf00      	nop
 8003dac:	bf00      	nop
 8003dae:	3714      	adds	r7, #20
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bc80      	pop	{r7}
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	20000018 	.word	0x20000018
 8003dbc:	00000000 	.word	0x00000000

08003dc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003dc0:	4b07      	ldr	r3, [pc, #28]	; (8003de0 <pxCurrentTCBConst2>)
 8003dc2:	6819      	ldr	r1, [r3, #0]
 8003dc4:	6808      	ldr	r0, [r1, #0]
 8003dc6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003dca:	f380 8809 	msr	PSP, r0
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f04f 0000 	mov.w	r0, #0
 8003dd6:	f380 8811 	msr	BASEPRI, r0
 8003dda:	f04e 0e0d 	orr.w	lr, lr, #13
 8003dde:	4770      	bx	lr

08003de0 <pxCurrentTCBConst2>:
 8003de0:	200004a8 	.word	0x200004a8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003de4:	bf00      	nop
 8003de6:	bf00      	nop

08003de8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8003de8:	4806      	ldr	r0, [pc, #24]	; (8003e04 <prvPortStartFirstTask+0x1c>)
 8003dea:	6800      	ldr	r0, [r0, #0]
 8003dec:	6800      	ldr	r0, [r0, #0]
 8003dee:	f380 8808 	msr	MSP, r0
 8003df2:	b662      	cpsie	i
 8003df4:	b661      	cpsie	f
 8003df6:	f3bf 8f4f 	dsb	sy
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	df00      	svc	0
 8003e00:	bf00      	nop
 8003e02:	0000      	.short	0x0000
 8003e04:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003e08:	bf00      	nop
 8003e0a:	bf00      	nop

08003e0c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e12:	4b32      	ldr	r3, [pc, #200]	; (8003edc <xPortStartScheduler+0xd0>)
 8003e14:	60fb      	str	r3, [r7, #12]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	22ff      	movs	r2, #255	; 0xff
 8003e22:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e2c:	78fb      	ldrb	r3, [r7, #3]
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	4b2a      	ldr	r3, [pc, #168]	; (8003ee0 <xPortStartScheduler+0xd4>)
 8003e38:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003e3a:	4b2a      	ldr	r3, [pc, #168]	; (8003ee4 <xPortStartScheduler+0xd8>)
 8003e3c:	2207      	movs	r2, #7
 8003e3e:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e40:	e009      	b.n	8003e56 <xPortStartScheduler+0x4a>
        {
            ulMaxPRIGROUPValue--;
 8003e42:	4b28      	ldr	r3, [pc, #160]	; (8003ee4 <xPortStartScheduler+0xd8>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	4a26      	ldr	r2, [pc, #152]	; (8003ee4 <xPortStartScheduler+0xd8>)
 8003e4a:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003e4c:	78fb      	ldrb	r3, [r7, #3]
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e56:	78fb      	ldrb	r3, [r7, #3]
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e5e:	2b80      	cmp	r3, #128	; 0x80
 8003e60:	d0ef      	beq.n	8003e42 <xPortStartScheduler+0x36>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003e62:	4b20      	ldr	r3, [pc, #128]	; (8003ee4 <xPortStartScheduler+0xd8>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f1c3 0307 	rsb	r3, r3, #7
 8003e6a:	2b04      	cmp	r3, #4
 8003e6c:	d00a      	beq.n	8003e84 <xPortStartScheduler+0x78>
        __asm volatile
 8003e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e72:	f383 8811 	msr	BASEPRI, r3
 8003e76:	f3bf 8f6f 	isb	sy
 8003e7a:	f3bf 8f4f 	dsb	sy
 8003e7e:	60bb      	str	r3, [r7, #8]
    }
 8003e80:	bf00      	nop
 8003e82:	e7fe      	b.n	8003e82 <xPortStartScheduler+0x76>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003e84:	4b17      	ldr	r3, [pc, #92]	; (8003ee4 <xPortStartScheduler+0xd8>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	021b      	lsls	r3, r3, #8
 8003e8a:	4a16      	ldr	r2, [pc, #88]	; (8003ee4 <xPortStartScheduler+0xd8>)
 8003e8c:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003e8e:	4b15      	ldr	r3, [pc, #84]	; (8003ee4 <xPortStartScheduler+0xd8>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e96:	4a13      	ldr	r2, [pc, #76]	; (8003ee4 <xPortStartScheduler+0xd8>)
 8003e98:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003ea2:	4b11      	ldr	r3, [pc, #68]	; (8003ee8 <xPortStartScheduler+0xdc>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a10      	ldr	r2, [pc, #64]	; (8003ee8 <xPortStartScheduler+0xdc>)
 8003ea8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003eac:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003eae:	4b0e      	ldr	r3, [pc, #56]	; (8003ee8 <xPortStartScheduler+0xdc>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a0d      	ldr	r2, [pc, #52]	; (8003ee8 <xPortStartScheduler+0xdc>)
 8003eb4:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003eb8:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003eba:	f000 f981 	bl	80041c0 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003ebe:	4b0b      	ldr	r3, [pc, #44]	; (8003eec <xPortStartScheduler+0xe0>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003ec4:	f7ff ff90 	bl	8003de8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003ec8:	f7ff f82e 	bl	8002f28 <vTaskSwitchContext>
    prvTaskExitError();
 8003ecc:	f7ff ff4a 	bl	8003d64 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	e000e400 	.word	0xe000e400
 8003ee0:	200005f4 	.word	0x200005f4
 8003ee4:	200005f8 	.word	0x200005f8
 8003ee8:	e000ed20 	.word	0xe000ed20
 8003eec:	20000018 	.word	0x20000018

08003ef0 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
        __asm volatile
 8003ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efa:	f383 8811 	msr	BASEPRI, r3
 8003efe:	f3bf 8f6f 	isb	sy
 8003f02:	f3bf 8f4f 	dsb	sy
 8003f06:	607b      	str	r3, [r7, #4]
    }
 8003f08:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003f0a:	4b0f      	ldr	r3, [pc, #60]	; (8003f48 <vPortEnterCritical+0x58>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	4a0d      	ldr	r2, [pc, #52]	; (8003f48 <vPortEnterCritical+0x58>)
 8003f12:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003f14:	4b0c      	ldr	r3, [pc, #48]	; (8003f48 <vPortEnterCritical+0x58>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d10f      	bne.n	8003f3c <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003f1c:	4b0b      	ldr	r3, [pc, #44]	; (8003f4c <vPortEnterCritical+0x5c>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00a      	beq.n	8003f3c <vPortEnterCritical+0x4c>
        __asm volatile
 8003f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2a:	f383 8811 	msr	BASEPRI, r3
 8003f2e:	f3bf 8f6f 	isb	sy
 8003f32:	f3bf 8f4f 	dsb	sy
 8003f36:	603b      	str	r3, [r7, #0]
    }
 8003f38:	bf00      	nop
 8003f3a:	e7fe      	b.n	8003f3a <vPortEnterCritical+0x4a>
    }
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bc80      	pop	{r7}
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	20000018 	.word	0x20000018
 8003f4c:	e000ed04 	.word	0xe000ed04

08003f50 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003f56:	4b11      	ldr	r3, [pc, #68]	; (8003f9c <vPortExitCritical+0x4c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10a      	bne.n	8003f74 <vPortExitCritical+0x24>
        __asm volatile
 8003f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f62:	f383 8811 	msr	BASEPRI, r3
 8003f66:	f3bf 8f6f 	isb	sy
 8003f6a:	f3bf 8f4f 	dsb	sy
 8003f6e:	607b      	str	r3, [r7, #4]
    }
 8003f70:	bf00      	nop
 8003f72:	e7fe      	b.n	8003f72 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003f74:	4b09      	ldr	r3, [pc, #36]	; (8003f9c <vPortExitCritical+0x4c>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	4a08      	ldr	r2, [pc, #32]	; (8003f9c <vPortExitCritical+0x4c>)
 8003f7c:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003f7e:	4b07      	ldr	r3, [pc, #28]	; (8003f9c <vPortExitCritical+0x4c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d105      	bne.n	8003f92 <vPortExitCritical+0x42>
 8003f86:	2300      	movs	r3, #0
 8003f88:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003f90:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bc80      	pop	{r7}
 8003f9a:	4770      	bx	lr
 8003f9c:	20000018 	.word	0x20000018

08003fa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003fa0:	f3ef 8009 	mrs	r0, PSP
 8003fa4:	f3bf 8f6f 	isb	sy
 8003fa8:	4b0d      	ldr	r3, [pc, #52]	; (8003fe0 <pxCurrentTCBConst>)
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003fb0:	6010      	str	r0, [r2, #0]
 8003fb2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003fb6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003fba:	f380 8811 	msr	BASEPRI, r0
 8003fbe:	f7fe ffb3 	bl	8002f28 <vTaskSwitchContext>
 8003fc2:	f04f 0000 	mov.w	r0, #0
 8003fc6:	f380 8811 	msr	BASEPRI, r0
 8003fca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003fce:	6819      	ldr	r1, [r3, #0]
 8003fd0:	6808      	ldr	r0, [r1, #0]
 8003fd2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003fd6:	f380 8809 	msr	PSP, r0
 8003fda:	f3bf 8f6f 	isb	sy
 8003fde:	4770      	bx	lr

08003fe0 <pxCurrentTCBConst>:
 8003fe0:	200004a8 	.word	0x200004a8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003fe4:	bf00      	nop
 8003fe6:	bf00      	nop

08003fe8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
        __asm volatile
 8003fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff2:	f383 8811 	msr	BASEPRI, r3
 8003ff6:	f3bf 8f6f 	isb	sy
 8003ffa:	f3bf 8f4f 	dsb	sy
 8003ffe:	607b      	str	r3, [r7, #4]
    }
 8004000:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004002:	f7fe fe79 	bl	8002cf8 <xTaskIncrementTick>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800400c:	4b06      	ldr	r3, [pc, #24]	; (8004028 <SysTick_Handler+0x40>)
 800400e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	2300      	movs	r3, #0
 8004016:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	f383 8811 	msr	BASEPRI, r3
    }
 800401e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004020:	bf00      	nop
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	e000ed04 	.word	0xe000ed04

0800402c <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE == 1 )

    __attribute__( ( weak ) ) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
    {
 800402c:	b580      	push	{r7, lr}
 800402e:	b088      	sub	sp, #32
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
        uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements, ulSysTickDecrementsLeft;
        TickType_t xModifiableIdleTime;

        /* Make sure the SysTick reload value does not overflow the counter. */
        if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 8004034:	4b5b      	ldr	r3, [pc, #364]	; (80041a4 <vPortSuppressTicksAndSleep+0x178>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	429a      	cmp	r2, r3
 800403c:	d902      	bls.n	8004044 <vPortSuppressTicksAndSleep+0x18>
        {
            xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800403e:	4b59      	ldr	r3, [pc, #356]	; (80041a4 <vPortSuppressTicksAndSleep+0x178>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	607b      	str	r3, [r7, #4]
        }

        /* Enter a critical section but don't use the taskENTER_CRITICAL()
         * method as that will mask interrupts that should exit sleep mode. */
        __asm volatile ( "cpsid i" ::: "memory" );
 8004044:	b672      	cpsid	i
        __asm volatile ( "dsb" );
 8004046:	f3bf 8f4f 	dsb	sy
        __asm volatile ( "isb" );
 800404a:	f3bf 8f6f 	isb	sy

        /* If a context switch is pending or a task is waiting for the scheduler
         * to be unsuspended then abandon the low power entry. */
        if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800404e:	f7ff f9d1 	bl	80033f4 <eTaskConfirmSleepModeStatus>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <vPortSuppressTicksAndSleep+0x30>
        {
            /* Re-enable interrupts - see comments above the cpsid instruction
             * above. */
            __asm volatile ( "cpsie i" ::: "memory" );
 8004058:	b662      	cpsie	i
            vTaskStepTick( ulCompleteTickPeriods );

            /* Exit with interrupts enabled. */
            __asm volatile ( "cpsie i" ::: "memory" );
        }
    }
 800405a:	e09e      	b.n	800419a <vPortSuppressTicksAndSleep+0x16e>
            portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT );
 800405c:	4b52      	ldr	r3, [pc, #328]	; (80041a8 <vPortSuppressTicksAndSleep+0x17c>)
 800405e:	2206      	movs	r2, #6
 8004060:	601a      	str	r2, [r3, #0]
            ulSysTickDecrementsLeft = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8004062:	4b52      	ldr	r3, [pc, #328]	; (80041ac <vPortSuppressTicksAndSleep+0x180>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	617b      	str	r3, [r7, #20]
            if( ulSysTickDecrementsLeft == 0 )
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d102      	bne.n	8004074 <vPortSuppressTicksAndSleep+0x48>
                ulSysTickDecrementsLeft = ulTimerCountsForOneTick;
 800406e:	4b50      	ldr	r3, [pc, #320]	; (80041b0 <vPortSuppressTicksAndSleep+0x184>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	617b      	str	r3, [r7, #20]
            ulReloadValue = ulSysTickDecrementsLeft + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	3b01      	subs	r3, #1
 8004078:	4a4d      	ldr	r2, [pc, #308]	; (80041b0 <vPortSuppressTicksAndSleep+0x184>)
 800407a:	6812      	ldr	r2, [r2, #0]
 800407c:	fb02 f303 	mul.w	r3, r2, r3
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	4413      	add	r3, r2
 8004084:	61fb      	str	r3, [r7, #28]
            if( ( portNVIC_INT_CTRL_REG & portNVIC_PEND_SYSTICK_SET_BIT ) != 0 )
 8004086:	4b4b      	ldr	r3, [pc, #300]	; (80041b4 <vPortSuppressTicksAndSleep+0x188>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d008      	beq.n	80040a4 <vPortSuppressTicksAndSleep+0x78>
                portNVIC_INT_CTRL_REG = portNVIC_PEND_SYSTICK_CLEAR_BIT;
 8004092:	4b48      	ldr	r3, [pc, #288]	; (80041b4 <vPortSuppressTicksAndSleep+0x188>)
 8004094:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004098:	601a      	str	r2, [r3, #0]
                ulReloadValue -= ulTimerCountsForOneTick;
 800409a:	4b45      	ldr	r3, [pc, #276]	; (80041b0 <vPortSuppressTicksAndSleep+0x184>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	69fa      	ldr	r2, [r7, #28]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	61fb      	str	r3, [r7, #28]
            if( ulReloadValue > ulStoppedTimerCompensation )
 80040a4:	4b44      	ldr	r3, [pc, #272]	; (80041b8 <vPortSuppressTicksAndSleep+0x18c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	69fa      	ldr	r2, [r7, #28]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d904      	bls.n	80040b8 <vPortSuppressTicksAndSleep+0x8c>
                ulReloadValue -= ulStoppedTimerCompensation;
 80040ae:	4b42      	ldr	r3, [pc, #264]	; (80041b8 <vPortSuppressTicksAndSleep+0x18c>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	69fa      	ldr	r2, [r7, #28]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	61fb      	str	r3, [r7, #28]
            portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 80040b8:	4a40      	ldr	r2, [pc, #256]	; (80041bc <vPortSuppressTicksAndSleep+0x190>)
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	6013      	str	r3, [r2, #0]
            portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80040be:	4b3b      	ldr	r3, [pc, #236]	; (80041ac <vPortSuppressTicksAndSleep+0x180>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]
            portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 80040c4:	4b38      	ldr	r3, [pc, #224]	; (80041a8 <vPortSuppressTicksAndSleep+0x17c>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a37      	ldr	r2, [pc, #220]	; (80041a8 <vPortSuppressTicksAndSleep+0x17c>)
 80040ca:	f043 0301 	orr.w	r3, r3, #1
 80040ce:	6013      	str	r3, [r2, #0]
            xModifiableIdleTime = xExpectedIdleTime;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	60fb      	str	r3, [r7, #12]
            if( xModifiableIdleTime > 0 )
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d004      	beq.n	80040e4 <vPortSuppressTicksAndSleep+0xb8>
                __asm volatile ( "dsb" ::: "memory" );
 80040da:	f3bf 8f4f 	dsb	sy
                __asm volatile ( "wfi" );
 80040de:	bf30      	wfi
                __asm volatile ( "isb" );
 80040e0:	f3bf 8f6f 	isb	sy
            __asm volatile ( "cpsie i" ::: "memory" );
 80040e4:	b662      	cpsie	i
            __asm volatile ( "dsb" );
 80040e6:	f3bf 8f4f 	dsb	sy
            __asm volatile ( "isb" );
 80040ea:	f3bf 8f6f 	isb	sy
            __asm volatile ( "cpsid i" ::: "memory" );
 80040ee:	b672      	cpsid	i
            __asm volatile ( "dsb" );
 80040f0:	f3bf 8f4f 	dsb	sy
            __asm volatile ( "isb" );
 80040f4:	f3bf 8f6f 	isb	sy
            portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT );
 80040f8:	4b2b      	ldr	r3, [pc, #172]	; (80041a8 <vPortSuppressTicksAndSleep+0x17c>)
 80040fa:	2206      	movs	r2, #6
 80040fc:	601a      	str	r2, [r3, #0]
            if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 80040fe:	4b2a      	ldr	r3, [pc, #168]	; (80041a8 <vPortSuppressTicksAndSleep+0x17c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d01d      	beq.n	8004146 <vPortSuppressTicksAndSleep+0x11a>
                ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800410a:	4b29      	ldr	r3, [pc, #164]	; (80041b0 <vPortSuppressTicksAndSleep+0x184>)
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	4b27      	ldr	r3, [pc, #156]	; (80041ac <vPortSuppressTicksAndSleep+0x180>)
 8004110:	6819      	ldr	r1, [r3, #0]
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	1acb      	subs	r3, r1, r3
 8004116:	4413      	add	r3, r2
 8004118:	3b01      	subs	r3, #1
 800411a:	613b      	str	r3, [r7, #16]
                if( ( ulCalculatedLoadValue <= ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800411c:	4b26      	ldr	r3, [pc, #152]	; (80041b8 <vPortSuppressTicksAndSleep+0x18c>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	429a      	cmp	r2, r3
 8004124:	d904      	bls.n	8004130 <vPortSuppressTicksAndSleep+0x104>
 8004126:	4b22      	ldr	r3, [pc, #136]	; (80041b0 <vPortSuppressTicksAndSleep+0x184>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	429a      	cmp	r2, r3
 800412e:	d903      	bls.n	8004138 <vPortSuppressTicksAndSleep+0x10c>
                    ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 8004130:	4b1f      	ldr	r3, [pc, #124]	; (80041b0 <vPortSuppressTicksAndSleep+0x184>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	3b01      	subs	r3, #1
 8004136:	613b      	str	r3, [r7, #16]
                portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 8004138:	4a20      	ldr	r2, [pc, #128]	; (80041bc <vPortSuppressTicksAndSleep+0x190>)
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	6013      	str	r3, [r2, #0]
                ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	3b01      	subs	r3, #1
 8004142:	61bb      	str	r3, [r7, #24]
 8004144:	e01a      	b.n	800417c <vPortSuppressTicksAndSleep+0x150>
                ulSysTickDecrementsLeft = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8004146:	4b19      	ldr	r3, [pc, #100]	; (80041ac <vPortSuppressTicksAndSleep+0x180>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	617b      	str	r3, [r7, #20]
                ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - ulSysTickDecrementsLeft;
 800414c:	4b18      	ldr	r3, [pc, #96]	; (80041b0 <vPortSuppressTicksAndSleep+0x184>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	fb02 f203 	mul.w	r2, r2, r3
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	60bb      	str	r3, [r7, #8]
                ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800415c:	4b14      	ldr	r3, [pc, #80]	; (80041b0 <vPortSuppressTicksAndSleep+0x184>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	fbb2 f3f3 	udiv	r3, r2, r3
 8004166:	61bb      	str	r3, [r7, #24]
                portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	3301      	adds	r3, #1
 800416c:	4a10      	ldr	r2, [pc, #64]	; (80041b0 <vPortSuppressTicksAndSleep+0x184>)
 800416e:	6812      	ldr	r2, [r2, #0]
 8004170:	fb02 f203 	mul.w	r2, r2, r3
 8004174:	4911      	ldr	r1, [pc, #68]	; (80041bc <vPortSuppressTicksAndSleep+0x190>)
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	600b      	str	r3, [r1, #0]
            portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800417c:	4b0b      	ldr	r3, [pc, #44]	; (80041ac <vPortSuppressTicksAndSleep+0x180>)
 800417e:	2200      	movs	r2, #0
 8004180:	601a      	str	r2, [r3, #0]
            portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8004182:	4b09      	ldr	r3, [pc, #36]	; (80041a8 <vPortSuppressTicksAndSleep+0x17c>)
 8004184:	2207      	movs	r2, #7
 8004186:	601a      	str	r2, [r3, #0]
                portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8004188:	4b09      	ldr	r3, [pc, #36]	; (80041b0 <vPortSuppressTicksAndSleep+0x184>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a0b      	ldr	r2, [pc, #44]	; (80041bc <vPortSuppressTicksAndSleep+0x190>)
 800418e:	3b01      	subs	r3, #1
 8004190:	6013      	str	r3, [r2, #0]
            vTaskStepTick( ulCompleteTickPeriods );
 8004192:	69b8      	ldr	r0, [r7, #24]
 8004194:	f7fe fd56 	bl	8002c44 <vTaskStepTick>
            __asm volatile ( "cpsie i" ::: "memory" );
 8004198:	b662      	cpsie	i
    }
 800419a:	bf00      	nop
 800419c:	3720      	adds	r7, #32
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	200005ec 	.word	0x200005ec
 80041a8:	e000e010 	.word	0xe000e010
 80041ac:	e000e018 	.word	0xe000e018
 80041b0:	200005e8 	.word	0x200005e8
 80041b4:	e000ed04 	.word	0xe000ed04
 80041b8:	200005f0 	.word	0x200005f0
 80041bc:	e000e014 	.word	0xe000e014

080041c0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80041c0:	b480      	push	{r7}
 80041c2:	af00      	add	r7, sp, #0
    /* Calculate the constants required to configure the tick interrupt. */
    #if ( configUSE_TICKLESS_IDLE == 1 )
    {
        ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 80041c4:	4b14      	ldr	r3, [pc, #80]	; (8004218 <vPortSetupTimerInterrupt+0x58>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a14      	ldr	r2, [pc, #80]	; (800421c <vPortSetupTimerInterrupt+0x5c>)
 80041ca:	fba2 2303 	umull	r2, r3, r2, r3
 80041ce:	099b      	lsrs	r3, r3, #6
 80041d0:	4a13      	ldr	r2, [pc, #76]	; (8004220 <vPortSetupTimerInterrupt+0x60>)
 80041d2:	6013      	str	r3, [r2, #0]
        xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 80041d4:	4b12      	ldr	r3, [pc, #72]	; (8004220 <vPortSetupTimerInterrupt+0x60>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80041dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e0:	4a10      	ldr	r2, [pc, #64]	; (8004224 <vPortSetupTimerInterrupt+0x64>)
 80041e2:	6013      	str	r3, [r2, #0]
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 80041e4:	4b10      	ldr	r3, [pc, #64]	; (8004228 <vPortSetupTimerInterrupt+0x68>)
 80041e6:	225e      	movs	r2, #94	; 0x5e
 80041e8:	601a      	str	r2, [r3, #0]
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80041ea:	4b10      	ldr	r3, [pc, #64]	; (800422c <vPortSetupTimerInterrupt+0x6c>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80041f0:	4b0f      	ldr	r3, [pc, #60]	; (8004230 <vPortSetupTimerInterrupt+0x70>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80041f6:	4b08      	ldr	r3, [pc, #32]	; (8004218 <vPortSetupTimerInterrupt+0x58>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a08      	ldr	r2, [pc, #32]	; (800421c <vPortSetupTimerInterrupt+0x5c>)
 80041fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004200:	099b      	lsrs	r3, r3, #6
 8004202:	4a0c      	ldr	r2, [pc, #48]	; (8004234 <vPortSetupTimerInterrupt+0x74>)
 8004204:	3b01      	subs	r3, #1
 8004206:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004208:	4b08      	ldr	r3, [pc, #32]	; (800422c <vPortSetupTimerInterrupt+0x6c>)
 800420a:	2207      	movs	r2, #7
 800420c:	601a      	str	r2, [r3, #0]
}
 800420e:	bf00      	nop
 8004210:	46bd      	mov	sp, r7
 8004212:	bc80      	pop	{r7}
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	20000000 	.word	0x20000000
 800421c:	10624dd3 	.word	0x10624dd3
 8004220:	200005e8 	.word	0x200005e8
 8004224:	200005ec 	.word	0x200005ec
 8004228:	200005f0 	.word	0x200005f0
 800422c:	e000e010 	.word	0xe000e010
 8004230:	e000e018 	.word	0xe000e018
 8004234:	e000e014 	.word	0xe000e014

08004238 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8004242:	2301      	movs	r3, #1
 8004244:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10a      	bne.n	8004266 <xQueueGenericReset+0x2e>
        __asm volatile
 8004250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004254:	f383 8811 	msr	BASEPRI, r3
 8004258:	f3bf 8f6f 	isb	sy
 800425c:	f3bf 8f4f 	dsb	sy
 8004260:	60fb      	str	r3, [r7, #12]
    }
 8004262:	bf00      	nop
 8004264:	e7fe      	b.n	8004264 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d05d      	beq.n	8004328 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8004270:	2b00      	cmp	r3, #0
 8004272:	d059      	beq.n	8004328 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427c:	2100      	movs	r1, #0
 800427e:	fba3 2302 	umull	r2, r3, r3, r2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d000      	beq.n	8004288 <xQueueGenericReset+0x50>
 8004286:	2101      	movs	r1, #1
 8004288:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800428a:	2b00      	cmp	r3, #0
 800428c:	d14c      	bne.n	8004328 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 800428e:	f7ff fe2f 	bl	8003ef0 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429a:	6939      	ldr	r1, [r7, #16]
 800429c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800429e:	fb01 f303 	mul.w	r3, r1, r3
 80042a2:	441a      	add	r2, r3
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	2200      	movs	r2, #0
 80042ac:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042be:	3b01      	subs	r3, #1
 80042c0:	6939      	ldr	r1, [r7, #16]
 80042c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80042c4:	fb01 f303 	mul.w	r3, r1, r3
 80042c8:	441a      	add	r2, r3
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	22ff      	movs	r2, #255	; 0xff
 80042d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	22ff      	movs	r2, #255	; 0xff
 80042da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d114      	bne.n	800430e <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d01a      	beq.n	8004322 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	3310      	adds	r3, #16
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7fe fedf 	bl	80030b4 <xTaskRemoveFromEventList>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d012      	beq.n	8004322 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80042fc:	4b15      	ldr	r3, [pc, #84]	; (8004354 <xQueueGenericReset+0x11c>)
 80042fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004302:	601a      	str	r2, [r3, #0]
 8004304:	f3bf 8f4f 	dsb	sy
 8004308:	f3bf 8f6f 	isb	sy
 800430c:	e009      	b.n	8004322 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	3310      	adds	r3, #16
 8004312:	4618      	mov	r0, r3
 8004314:	f7ff fc6e 	bl	8003bf4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	3324      	adds	r3, #36	; 0x24
 800431c:	4618      	mov	r0, r3
 800431e:	f7ff fc69 	bl	8003bf4 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8004322:	f7ff fe15 	bl	8003f50 <vPortExitCritical>
 8004326:	e001      	b.n	800432c <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8004328:	2300      	movs	r3, #0
 800432a:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10a      	bne.n	8004348 <xQueueGenericReset+0x110>
        __asm volatile
 8004332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004336:	f383 8811 	msr	BASEPRI, r3
 800433a:	f3bf 8f6f 	isb	sy
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	60bb      	str	r3, [r7, #8]
    }
 8004344:	bf00      	nop
 8004346:	e7fe      	b.n	8004346 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8004348:	697b      	ldr	r3, [r7, #20]
}
 800434a:	4618      	mov	r0, r3
 800434c:	3718      	adds	r7, #24
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	e000ed04 	.word	0xe000ed04

08004358 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004358:	b580      	push	{r7, lr}
 800435a:	b08a      	sub	sp, #40	; 0x28
 800435c:	af02      	add	r7, sp, #8
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	4613      	mov	r3, r2
 8004364:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8004366:	2300      	movs	r3, #0
 8004368:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d02e      	beq.n	80043ce <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8004370:	2100      	movs	r1, #0
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	fba3 2302 	umull	r2, r3, r3, r2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d000      	beq.n	8004380 <xQueueGenericCreate+0x28>
 800437e:	2101      	movs	r1, #1
 8004380:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8004382:	2b00      	cmp	r3, #0
 8004384:	d123      	bne.n	80043ce <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800438e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8004392:	d81c      	bhi.n	80043ce <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	fb02 f303 	mul.w	r3, r2, r3
 800439c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	3350      	adds	r3, #80	; 0x50
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff fc02 	bl	8003bac <pvPortMalloc>
 80043a8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d01c      	beq.n	80043ea <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	3350      	adds	r3, #80	; 0x50
 80043b8:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80043ba:	79fa      	ldrb	r2, [r7, #7]
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	4613      	mov	r3, r2
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	68b9      	ldr	r1, [r7, #8]
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 f814 	bl	80043f4 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80043cc:	e00d      	b.n	80043ea <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10a      	bne.n	80043ea <xQueueGenericCreate+0x92>
        __asm volatile
 80043d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d8:	f383 8811 	msr	BASEPRI, r3
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	613b      	str	r3, [r7, #16]
    }
 80043e6:	bf00      	nop
 80043e8:	e7fe      	b.n	80043e8 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80043ea:	69fb      	ldr	r3, [r7, #28]
    }
 80043ec:	4618      	mov	r0, r3
 80043ee:	3720      	adds	r7, #32
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
 8004400:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d103      	bne.n	8004410 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	69ba      	ldr	r2, [r7, #24]
 800440c:	601a      	str	r2, [r3, #0]
 800440e:	e002      	b.n	8004416 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	68ba      	ldr	r2, [r7, #8]
 8004420:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004422:	2101      	movs	r1, #1
 8004424:	69b8      	ldr	r0, [r7, #24]
 8004426:	f7ff ff07 	bl	8004238 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	78fa      	ldrb	r2, [r7, #3]
 800442e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8004432:	bf00      	nop
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
	...

0800443c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b08c      	sub	sp, #48	; 0x30
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004448:	2300      	movs	r3, #0
 800444a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10a      	bne.n	800446c <xQueueReceive+0x30>
        __asm volatile
 8004456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445a:	f383 8811 	msr	BASEPRI, r3
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	f3bf 8f4f 	dsb	sy
 8004466:	623b      	str	r3, [r7, #32]
    }
 8004468:	bf00      	nop
 800446a:	e7fe      	b.n	800446a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d103      	bne.n	800447a <xQueueReceive+0x3e>
 8004472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <xQueueReceive+0x42>
 800447a:	2301      	movs	r3, #1
 800447c:	e000      	b.n	8004480 <xQueueReceive+0x44>
 800447e:	2300      	movs	r3, #0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10a      	bne.n	800449a <xQueueReceive+0x5e>
        __asm volatile
 8004484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004488:	f383 8811 	msr	BASEPRI, r3
 800448c:	f3bf 8f6f 	isb	sy
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	61fb      	str	r3, [r7, #28]
    }
 8004496:	bf00      	nop
 8004498:	e7fe      	b.n	8004498 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800449a:	f7ff f879 	bl	8003590 <xTaskGetSchedulerState>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d102      	bne.n	80044aa <xQueueReceive+0x6e>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <xQueueReceive+0x72>
 80044aa:	2301      	movs	r3, #1
 80044ac:	e000      	b.n	80044b0 <xQueueReceive+0x74>
 80044ae:	2300      	movs	r3, #0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10a      	bne.n	80044ca <xQueueReceive+0x8e>
        __asm volatile
 80044b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b8:	f383 8811 	msr	BASEPRI, r3
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	61bb      	str	r3, [r7, #24]
    }
 80044c6:	bf00      	nop
 80044c8:	e7fe      	b.n	80044c8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80044ca:	f7ff fd11 	bl	8003ef0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d01f      	beq.n	800451a <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80044da:	68b9      	ldr	r1, [r7, #8]
 80044dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044de:	f000 f88d 	bl	80045fc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80044e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e4:	1e5a      	subs	r2, r3, #1
 80044e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00f      	beq.n	8004512 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f4:	3310      	adds	r3, #16
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fe fddc 	bl	80030b4 <xTaskRemoveFromEventList>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d007      	beq.n	8004512 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004502:	4b3d      	ldr	r3, [pc, #244]	; (80045f8 <xQueueReceive+0x1bc>)
 8004504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004508:	601a      	str	r2, [r3, #0]
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004512:	f7ff fd1d 	bl	8003f50 <vPortExitCritical>
                return pdPASS;
 8004516:	2301      	movs	r3, #1
 8004518:	e069      	b.n	80045ee <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d103      	bne.n	8004528 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004520:	f7ff fd16 	bl	8003f50 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8004524:	2300      	movs	r3, #0
 8004526:	e062      	b.n	80045ee <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800452a:	2b00      	cmp	r3, #0
 800452c:	d106      	bne.n	800453c <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800452e:	f107 0310 	add.w	r3, r7, #16
 8004532:	4618      	mov	r0, r3
 8004534:	f7fe fe96 	bl	8003264 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004538:	2301      	movs	r3, #1
 800453a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800453c:	f7ff fd08 	bl	8003f50 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004540:	f7fe fa32 	bl	80029a8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004544:	f7ff fcd4 	bl	8003ef0 <vPortEnterCritical>
 8004548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800454e:	b25b      	sxtb	r3, r3
 8004550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004554:	d103      	bne.n	800455e <xQueueReceive+0x122>
 8004556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800455e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004560:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004564:	b25b      	sxtb	r3, r3
 8004566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456a:	d103      	bne.n	8004574 <xQueueReceive+0x138>
 800456c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456e:	2200      	movs	r2, #0
 8004570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004574:	f7ff fcec 	bl	8003f50 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004578:	1d3a      	adds	r2, r7, #4
 800457a:	f107 0310 	add.w	r3, r7, #16
 800457e:	4611      	mov	r1, r2
 8004580:	4618      	mov	r0, r3
 8004582:	f7fe fe85 	bl	8003290 <xTaskCheckForTimeOut>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d123      	bne.n	80045d4 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800458c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800458e:	f000 f8ad 	bl	80046ec <prvIsQueueEmpty>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d017      	beq.n	80045c8 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459a:	3324      	adds	r3, #36	; 0x24
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	4611      	mov	r1, r2
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7fe fd1d 	bl	8002fe0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80045a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045a8:	f000 f84e 	bl	8004648 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80045ac:	f7fe fa40 	bl	8002a30 <xTaskResumeAll>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d189      	bne.n	80044ca <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80045b6:	4b10      	ldr	r3, [pc, #64]	; (80045f8 <xQueueReceive+0x1bc>)
 80045b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045bc:	601a      	str	r2, [r3, #0]
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	f3bf 8f6f 	isb	sy
 80045c6:	e780      	b.n	80044ca <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80045c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045ca:	f000 f83d 	bl	8004648 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80045ce:	f7fe fa2f 	bl	8002a30 <xTaskResumeAll>
 80045d2:	e77a      	b.n	80044ca <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80045d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045d6:	f000 f837 	bl	8004648 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80045da:	f7fe fa29 	bl	8002a30 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045e0:	f000 f884 	bl	80046ec <prvIsQueueEmpty>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f43f af6f 	beq.w	80044ca <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80045ec:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3730      	adds	r7, #48	; 0x30
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	e000ed04 	.word	0xe000ed04

080045fc <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460a:	2b00      	cmp	r3, #0
 800460c:	d018      	beq.n	8004640 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68da      	ldr	r2, [r3, #12]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	441a      	add	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	429a      	cmp	r2, r3
 8004626:	d303      	bcc.n	8004630 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68d9      	ldr	r1, [r3, #12]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004638:	461a      	mov	r2, r3
 800463a:	6838      	ldr	r0, [r7, #0]
 800463c:	f000 f928 	bl	8004890 <memcpy>
    }
}
 8004640:	bf00      	nop
 8004642:	3708      	adds	r7, #8
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004650:	f7ff fc4e 	bl	8003ef0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800465a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800465c:	e011      	b.n	8004682 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	2b00      	cmp	r3, #0
 8004664:	d012      	beq.n	800468c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	3324      	adds	r3, #36	; 0x24
 800466a:	4618      	mov	r0, r3
 800466c:	f7fe fd22 	bl	80030b4 <xTaskRemoveFromEventList>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8004676:	f7fe fe71 	bl	800335c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800467a:	7bfb      	ldrb	r3, [r7, #15]
 800467c:	3b01      	subs	r3, #1
 800467e:	b2db      	uxtb	r3, r3
 8004680:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004686:	2b00      	cmp	r3, #0
 8004688:	dce9      	bgt.n	800465e <prvUnlockQueue+0x16>
 800468a:	e000      	b.n	800468e <prvUnlockQueue+0x46>
                    break;
 800468c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	22ff      	movs	r2, #255	; 0xff
 8004692:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8004696:	f7ff fc5b 	bl	8003f50 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800469a:	f7ff fc29 	bl	8003ef0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046a4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80046a6:	e011      	b.n	80046cc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d012      	beq.n	80046d6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	3310      	adds	r3, #16
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7fe fcfd 	bl	80030b4 <xTaskRemoveFromEventList>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80046c0:	f7fe fe4c 	bl	800335c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80046c4:	7bbb      	ldrb	r3, [r7, #14]
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80046cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	dce9      	bgt.n	80046a8 <prvUnlockQueue+0x60>
 80046d4:	e000      	b.n	80046d8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80046d6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	22ff      	movs	r2, #255	; 0xff
 80046dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80046e0:	f7ff fc36 	bl	8003f50 <vPortExitCritical>
}
 80046e4:	bf00      	nop
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80046f4:	f7ff fbfc 	bl	8003ef0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d102      	bne.n	8004706 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004700:	2301      	movs	r3, #1
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	e001      	b.n	800470a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8004706:	2300      	movs	r3, #0
 8004708:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800470a:	f7ff fc21 	bl	8003f50 <vPortExitCritical>

    return xReturn;
 800470e:	68fb      	ldr	r3, [r7, #12]
}
 8004710:	4618      	mov	r0, r3
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8004718:	b480      	push	{r7}
 800471a:	b087      	sub	sp, #28
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8004722:	2300      	movs	r3, #0
 8004724:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10a      	bne.n	8004742 <vQueueAddToRegistry+0x2a>
        __asm volatile
 800472c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004730:	f383 8811 	msr	BASEPRI, r3
 8004734:	f3bf 8f6f 	isb	sy
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	60fb      	str	r3, [r7, #12]
    }
 800473e:	bf00      	nop
 8004740:	e7fe      	b.n	8004740 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d024      	beq.n	8004792 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004748:	2300      	movs	r3, #0
 800474a:	617b      	str	r3, [r7, #20]
 800474c:	e01e      	b.n	800478c <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800474e:	4a18      	ldr	r2, [pc, #96]	; (80047b0 <vQueueAddToRegistry+0x98>)
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	00db      	lsls	r3, r3, #3
 8004754:	4413      	add	r3, r2
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	429a      	cmp	r2, r3
 800475c:	d105      	bne.n	800476a <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	00db      	lsls	r3, r3, #3
 8004762:	4a13      	ldr	r2, [pc, #76]	; (80047b0 <vQueueAddToRegistry+0x98>)
 8004764:	4413      	add	r3, r2
 8004766:	613b      	str	r3, [r7, #16]
                    break;
 8004768:	e013      	b.n	8004792 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10a      	bne.n	8004786 <vQueueAddToRegistry+0x6e>
 8004770:	4a0f      	ldr	r2, [pc, #60]	; (80047b0 <vQueueAddToRegistry+0x98>)
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d104      	bne.n	8004786 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	4a0b      	ldr	r2, [pc, #44]	; (80047b0 <vQueueAddToRegistry+0x98>)
 8004782:	4413      	add	r3, r2
 8004784:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	3301      	adds	r3, #1
 800478a:	617b      	str	r3, [r7, #20]
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	2b07      	cmp	r3, #7
 8004790:	d9dd      	bls.n	800474e <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d005      	beq.n	80047a4 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80047a4:	bf00      	nop
 80047a6:	371c      	adds	r7, #28
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bc80      	pop	{r7}
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	200006a4 	.word	0x200006a4

080047b4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b086      	sub	sp, #24
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80047c4:	f7ff fb94 	bl	8003ef0 <vPortEnterCritical>
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047ce:	b25b      	sxtb	r3, r3
 80047d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d4:	d103      	bne.n	80047de <vQueueWaitForMessageRestricted+0x2a>
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047e4:	b25b      	sxtb	r3, r3
 80047e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ea:	d103      	bne.n	80047f4 <vQueueWaitForMessageRestricted+0x40>
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047f4:	f7ff fbac 	bl	8003f50 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d106      	bne.n	800480e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	3324      	adds	r3, #36	; 0x24
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	68b9      	ldr	r1, [r7, #8]
 8004808:	4618      	mov	r0, r3
 800480a:	f7fe fc0d 	bl	8003028 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800480e:	6978      	ldr	r0, [r7, #20]
 8004810:	f7ff ff1a 	bl	8004648 <prvUnlockQueue>
    }
 8004814:	bf00      	nop
 8004816:	3718      	adds	r7, #24
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <__errno>:
 800481c:	4b01      	ldr	r3, [pc, #4]	; (8004824 <__errno+0x8>)
 800481e:	6818      	ldr	r0, [r3, #0]
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	2000001c 	.word	0x2000001c

08004828 <__libc_init_array>:
 8004828:	b570      	push	{r4, r5, r6, lr}
 800482a:	2600      	movs	r6, #0
 800482c:	4d0c      	ldr	r5, [pc, #48]	; (8004860 <__libc_init_array+0x38>)
 800482e:	4c0d      	ldr	r4, [pc, #52]	; (8004864 <__libc_init_array+0x3c>)
 8004830:	1b64      	subs	r4, r4, r5
 8004832:	10a4      	asrs	r4, r4, #2
 8004834:	42a6      	cmp	r6, r4
 8004836:	d109      	bne.n	800484c <__libc_init_array+0x24>
 8004838:	f000 fc6c 	bl	8005114 <_init>
 800483c:	2600      	movs	r6, #0
 800483e:	4d0a      	ldr	r5, [pc, #40]	; (8004868 <__libc_init_array+0x40>)
 8004840:	4c0a      	ldr	r4, [pc, #40]	; (800486c <__libc_init_array+0x44>)
 8004842:	1b64      	subs	r4, r4, r5
 8004844:	10a4      	asrs	r4, r4, #2
 8004846:	42a6      	cmp	r6, r4
 8004848:	d105      	bne.n	8004856 <__libc_init_array+0x2e>
 800484a:	bd70      	pop	{r4, r5, r6, pc}
 800484c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004850:	4798      	blx	r3
 8004852:	3601      	adds	r6, #1
 8004854:	e7ee      	b.n	8004834 <__libc_init_array+0xc>
 8004856:	f855 3b04 	ldr.w	r3, [r5], #4
 800485a:	4798      	blx	r3
 800485c:	3601      	adds	r6, #1
 800485e:	e7f2      	b.n	8004846 <__libc_init_array+0x1e>
 8004860:	08005924 	.word	0x08005924
 8004864:	08005924 	.word	0x08005924
 8004868:	08005924 	.word	0x08005924
 800486c:	08005928 	.word	0x08005928

08004870 <malloc>:
 8004870:	4b02      	ldr	r3, [pc, #8]	; (800487c <malloc+0xc>)
 8004872:	4601      	mov	r1, r0
 8004874:	6818      	ldr	r0, [r3, #0]
 8004876:	f000 b86d 	b.w	8004954 <_malloc_r>
 800487a:	bf00      	nop
 800487c:	2000001c 	.word	0x2000001c

08004880 <free>:
 8004880:	4b02      	ldr	r3, [pc, #8]	; (800488c <free+0xc>)
 8004882:	4601      	mov	r1, r0
 8004884:	6818      	ldr	r0, [r3, #0]
 8004886:	f000 b819 	b.w	80048bc <_free_r>
 800488a:	bf00      	nop
 800488c:	2000001c 	.word	0x2000001c

08004890 <memcpy>:
 8004890:	440a      	add	r2, r1
 8004892:	4291      	cmp	r1, r2
 8004894:	f100 33ff 	add.w	r3, r0, #4294967295
 8004898:	d100      	bne.n	800489c <memcpy+0xc>
 800489a:	4770      	bx	lr
 800489c:	b510      	push	{r4, lr}
 800489e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048a2:	4291      	cmp	r1, r2
 80048a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048a8:	d1f9      	bne.n	800489e <memcpy+0xe>
 80048aa:	bd10      	pop	{r4, pc}

080048ac <memset>:
 80048ac:	4603      	mov	r3, r0
 80048ae:	4402      	add	r2, r0
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d100      	bne.n	80048b6 <memset+0xa>
 80048b4:	4770      	bx	lr
 80048b6:	f803 1b01 	strb.w	r1, [r3], #1
 80048ba:	e7f9      	b.n	80048b0 <memset+0x4>

080048bc <_free_r>:
 80048bc:	b538      	push	{r3, r4, r5, lr}
 80048be:	4605      	mov	r5, r0
 80048c0:	2900      	cmp	r1, #0
 80048c2:	d043      	beq.n	800494c <_free_r+0x90>
 80048c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048c8:	1f0c      	subs	r4, r1, #4
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	bfb8      	it	lt
 80048ce:	18e4      	addlt	r4, r4, r3
 80048d0:	f000 f8ca 	bl	8004a68 <__malloc_lock>
 80048d4:	4a1e      	ldr	r2, [pc, #120]	; (8004950 <_free_r+0x94>)
 80048d6:	6813      	ldr	r3, [r2, #0]
 80048d8:	4610      	mov	r0, r2
 80048da:	b933      	cbnz	r3, 80048ea <_free_r+0x2e>
 80048dc:	6063      	str	r3, [r4, #4]
 80048de:	6014      	str	r4, [r2, #0]
 80048e0:	4628      	mov	r0, r5
 80048e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048e6:	f000 b8c5 	b.w	8004a74 <__malloc_unlock>
 80048ea:	42a3      	cmp	r3, r4
 80048ec:	d90a      	bls.n	8004904 <_free_r+0x48>
 80048ee:	6821      	ldr	r1, [r4, #0]
 80048f0:	1862      	adds	r2, r4, r1
 80048f2:	4293      	cmp	r3, r2
 80048f4:	bf01      	itttt	eq
 80048f6:	681a      	ldreq	r2, [r3, #0]
 80048f8:	685b      	ldreq	r3, [r3, #4]
 80048fa:	1852      	addeq	r2, r2, r1
 80048fc:	6022      	streq	r2, [r4, #0]
 80048fe:	6063      	str	r3, [r4, #4]
 8004900:	6004      	str	r4, [r0, #0]
 8004902:	e7ed      	b.n	80048e0 <_free_r+0x24>
 8004904:	461a      	mov	r2, r3
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	b10b      	cbz	r3, 800490e <_free_r+0x52>
 800490a:	42a3      	cmp	r3, r4
 800490c:	d9fa      	bls.n	8004904 <_free_r+0x48>
 800490e:	6811      	ldr	r1, [r2, #0]
 8004910:	1850      	adds	r0, r2, r1
 8004912:	42a0      	cmp	r0, r4
 8004914:	d10b      	bne.n	800492e <_free_r+0x72>
 8004916:	6820      	ldr	r0, [r4, #0]
 8004918:	4401      	add	r1, r0
 800491a:	1850      	adds	r0, r2, r1
 800491c:	4283      	cmp	r3, r0
 800491e:	6011      	str	r1, [r2, #0]
 8004920:	d1de      	bne.n	80048e0 <_free_r+0x24>
 8004922:	6818      	ldr	r0, [r3, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	4401      	add	r1, r0
 8004928:	6011      	str	r1, [r2, #0]
 800492a:	6053      	str	r3, [r2, #4]
 800492c:	e7d8      	b.n	80048e0 <_free_r+0x24>
 800492e:	d902      	bls.n	8004936 <_free_r+0x7a>
 8004930:	230c      	movs	r3, #12
 8004932:	602b      	str	r3, [r5, #0]
 8004934:	e7d4      	b.n	80048e0 <_free_r+0x24>
 8004936:	6820      	ldr	r0, [r4, #0]
 8004938:	1821      	adds	r1, r4, r0
 800493a:	428b      	cmp	r3, r1
 800493c:	bf01      	itttt	eq
 800493e:	6819      	ldreq	r1, [r3, #0]
 8004940:	685b      	ldreq	r3, [r3, #4]
 8004942:	1809      	addeq	r1, r1, r0
 8004944:	6021      	streq	r1, [r4, #0]
 8004946:	6063      	str	r3, [r4, #4]
 8004948:	6054      	str	r4, [r2, #4]
 800494a:	e7c9      	b.n	80048e0 <_free_r+0x24>
 800494c:	bd38      	pop	{r3, r4, r5, pc}
 800494e:	bf00      	nop
 8004950:	200005fc 	.word	0x200005fc

08004954 <_malloc_r>:
 8004954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004956:	1ccd      	adds	r5, r1, #3
 8004958:	f025 0503 	bic.w	r5, r5, #3
 800495c:	3508      	adds	r5, #8
 800495e:	2d0c      	cmp	r5, #12
 8004960:	bf38      	it	cc
 8004962:	250c      	movcc	r5, #12
 8004964:	2d00      	cmp	r5, #0
 8004966:	4606      	mov	r6, r0
 8004968:	db01      	blt.n	800496e <_malloc_r+0x1a>
 800496a:	42a9      	cmp	r1, r5
 800496c:	d903      	bls.n	8004976 <_malloc_r+0x22>
 800496e:	230c      	movs	r3, #12
 8004970:	6033      	str	r3, [r6, #0]
 8004972:	2000      	movs	r0, #0
 8004974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004976:	f000 f877 	bl	8004a68 <__malloc_lock>
 800497a:	4921      	ldr	r1, [pc, #132]	; (8004a00 <_malloc_r+0xac>)
 800497c:	680a      	ldr	r2, [r1, #0]
 800497e:	4614      	mov	r4, r2
 8004980:	b99c      	cbnz	r4, 80049aa <_malloc_r+0x56>
 8004982:	4f20      	ldr	r7, [pc, #128]	; (8004a04 <_malloc_r+0xb0>)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	b923      	cbnz	r3, 8004992 <_malloc_r+0x3e>
 8004988:	4621      	mov	r1, r4
 800498a:	4630      	mov	r0, r6
 800498c:	f000 f83c 	bl	8004a08 <_sbrk_r>
 8004990:	6038      	str	r0, [r7, #0]
 8004992:	4629      	mov	r1, r5
 8004994:	4630      	mov	r0, r6
 8004996:	f000 f837 	bl	8004a08 <_sbrk_r>
 800499a:	1c43      	adds	r3, r0, #1
 800499c:	d123      	bne.n	80049e6 <_malloc_r+0x92>
 800499e:	230c      	movs	r3, #12
 80049a0:	4630      	mov	r0, r6
 80049a2:	6033      	str	r3, [r6, #0]
 80049a4:	f000 f866 	bl	8004a74 <__malloc_unlock>
 80049a8:	e7e3      	b.n	8004972 <_malloc_r+0x1e>
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	1b5b      	subs	r3, r3, r5
 80049ae:	d417      	bmi.n	80049e0 <_malloc_r+0x8c>
 80049b0:	2b0b      	cmp	r3, #11
 80049b2:	d903      	bls.n	80049bc <_malloc_r+0x68>
 80049b4:	6023      	str	r3, [r4, #0]
 80049b6:	441c      	add	r4, r3
 80049b8:	6025      	str	r5, [r4, #0]
 80049ba:	e004      	b.n	80049c6 <_malloc_r+0x72>
 80049bc:	6863      	ldr	r3, [r4, #4]
 80049be:	42a2      	cmp	r2, r4
 80049c0:	bf0c      	ite	eq
 80049c2:	600b      	streq	r3, [r1, #0]
 80049c4:	6053      	strne	r3, [r2, #4]
 80049c6:	4630      	mov	r0, r6
 80049c8:	f000 f854 	bl	8004a74 <__malloc_unlock>
 80049cc:	f104 000b 	add.w	r0, r4, #11
 80049d0:	1d23      	adds	r3, r4, #4
 80049d2:	f020 0007 	bic.w	r0, r0, #7
 80049d6:	1ac2      	subs	r2, r0, r3
 80049d8:	d0cc      	beq.n	8004974 <_malloc_r+0x20>
 80049da:	1a1b      	subs	r3, r3, r0
 80049dc:	50a3      	str	r3, [r4, r2]
 80049de:	e7c9      	b.n	8004974 <_malloc_r+0x20>
 80049e0:	4622      	mov	r2, r4
 80049e2:	6864      	ldr	r4, [r4, #4]
 80049e4:	e7cc      	b.n	8004980 <_malloc_r+0x2c>
 80049e6:	1cc4      	adds	r4, r0, #3
 80049e8:	f024 0403 	bic.w	r4, r4, #3
 80049ec:	42a0      	cmp	r0, r4
 80049ee:	d0e3      	beq.n	80049b8 <_malloc_r+0x64>
 80049f0:	1a21      	subs	r1, r4, r0
 80049f2:	4630      	mov	r0, r6
 80049f4:	f000 f808 	bl	8004a08 <_sbrk_r>
 80049f8:	3001      	adds	r0, #1
 80049fa:	d1dd      	bne.n	80049b8 <_malloc_r+0x64>
 80049fc:	e7cf      	b.n	800499e <_malloc_r+0x4a>
 80049fe:	bf00      	nop
 8004a00:	200005fc 	.word	0x200005fc
 8004a04:	20000600 	.word	0x20000600

08004a08 <_sbrk_r>:
 8004a08:	b538      	push	{r3, r4, r5, lr}
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	4d05      	ldr	r5, [pc, #20]	; (8004a24 <_sbrk_r+0x1c>)
 8004a0e:	4604      	mov	r4, r0
 8004a10:	4608      	mov	r0, r1
 8004a12:	602b      	str	r3, [r5, #0]
 8004a14:	f7fb fd84 	bl	8000520 <_sbrk>
 8004a18:	1c43      	adds	r3, r0, #1
 8004a1a:	d102      	bne.n	8004a22 <_sbrk_r+0x1a>
 8004a1c:	682b      	ldr	r3, [r5, #0]
 8004a1e:	b103      	cbz	r3, 8004a22 <_sbrk_r+0x1a>
 8004a20:	6023      	str	r3, [r4, #0]
 8004a22:	bd38      	pop	{r3, r4, r5, pc}
 8004a24:	200006e4 	.word	0x200006e4

08004a28 <siprintf>:
 8004a28:	b40e      	push	{r1, r2, r3}
 8004a2a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a2e:	b500      	push	{lr}
 8004a30:	b09c      	sub	sp, #112	; 0x70
 8004a32:	ab1d      	add	r3, sp, #116	; 0x74
 8004a34:	9002      	str	r0, [sp, #8]
 8004a36:	9006      	str	r0, [sp, #24]
 8004a38:	9107      	str	r1, [sp, #28]
 8004a3a:	9104      	str	r1, [sp, #16]
 8004a3c:	4808      	ldr	r0, [pc, #32]	; (8004a60 <siprintf+0x38>)
 8004a3e:	4909      	ldr	r1, [pc, #36]	; (8004a64 <siprintf+0x3c>)
 8004a40:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a44:	9105      	str	r1, [sp, #20]
 8004a46:	6800      	ldr	r0, [r0, #0]
 8004a48:	a902      	add	r1, sp, #8
 8004a4a:	9301      	str	r3, [sp, #4]
 8004a4c:	f000 f874 	bl	8004b38 <_svfiprintf_r>
 8004a50:	2200      	movs	r2, #0
 8004a52:	9b02      	ldr	r3, [sp, #8]
 8004a54:	701a      	strb	r2, [r3, #0]
 8004a56:	b01c      	add	sp, #112	; 0x70
 8004a58:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a5c:	b003      	add	sp, #12
 8004a5e:	4770      	bx	lr
 8004a60:	2000001c 	.word	0x2000001c
 8004a64:	ffff0208 	.word	0xffff0208

08004a68 <__malloc_lock>:
 8004a68:	4801      	ldr	r0, [pc, #4]	; (8004a70 <__malloc_lock+0x8>)
 8004a6a:	f000 bafb 	b.w	8005064 <__retarget_lock_acquire_recursive>
 8004a6e:	bf00      	nop
 8004a70:	200006ec 	.word	0x200006ec

08004a74 <__malloc_unlock>:
 8004a74:	4801      	ldr	r0, [pc, #4]	; (8004a7c <__malloc_unlock+0x8>)
 8004a76:	f000 baf6 	b.w	8005066 <__retarget_lock_release_recursive>
 8004a7a:	bf00      	nop
 8004a7c:	200006ec 	.word	0x200006ec

08004a80 <__ssputs_r>:
 8004a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a84:	688e      	ldr	r6, [r1, #8]
 8004a86:	4682      	mov	sl, r0
 8004a88:	429e      	cmp	r6, r3
 8004a8a:	460c      	mov	r4, r1
 8004a8c:	4690      	mov	r8, r2
 8004a8e:	461f      	mov	r7, r3
 8004a90:	d838      	bhi.n	8004b04 <__ssputs_r+0x84>
 8004a92:	898a      	ldrh	r2, [r1, #12]
 8004a94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a98:	d032      	beq.n	8004b00 <__ssputs_r+0x80>
 8004a9a:	6825      	ldr	r5, [r4, #0]
 8004a9c:	6909      	ldr	r1, [r1, #16]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	eba5 0901 	sub.w	r9, r5, r1
 8004aa4:	6965      	ldr	r5, [r4, #20]
 8004aa6:	444b      	add	r3, r9
 8004aa8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004aac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ab0:	106d      	asrs	r5, r5, #1
 8004ab2:	429d      	cmp	r5, r3
 8004ab4:	bf38      	it	cc
 8004ab6:	461d      	movcc	r5, r3
 8004ab8:	0553      	lsls	r3, r2, #21
 8004aba:	d531      	bpl.n	8004b20 <__ssputs_r+0xa0>
 8004abc:	4629      	mov	r1, r5
 8004abe:	f7ff ff49 	bl	8004954 <_malloc_r>
 8004ac2:	4606      	mov	r6, r0
 8004ac4:	b950      	cbnz	r0, 8004adc <__ssputs_r+0x5c>
 8004ac6:	230c      	movs	r3, #12
 8004ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8004acc:	f8ca 3000 	str.w	r3, [sl]
 8004ad0:	89a3      	ldrh	r3, [r4, #12]
 8004ad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ad6:	81a3      	strh	r3, [r4, #12]
 8004ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004adc:	464a      	mov	r2, r9
 8004ade:	6921      	ldr	r1, [r4, #16]
 8004ae0:	f7ff fed6 	bl	8004890 <memcpy>
 8004ae4:	89a3      	ldrh	r3, [r4, #12]
 8004ae6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aee:	81a3      	strh	r3, [r4, #12]
 8004af0:	6126      	str	r6, [r4, #16]
 8004af2:	444e      	add	r6, r9
 8004af4:	6026      	str	r6, [r4, #0]
 8004af6:	463e      	mov	r6, r7
 8004af8:	6165      	str	r5, [r4, #20]
 8004afa:	eba5 0509 	sub.w	r5, r5, r9
 8004afe:	60a5      	str	r5, [r4, #8]
 8004b00:	42be      	cmp	r6, r7
 8004b02:	d900      	bls.n	8004b06 <__ssputs_r+0x86>
 8004b04:	463e      	mov	r6, r7
 8004b06:	4632      	mov	r2, r6
 8004b08:	4641      	mov	r1, r8
 8004b0a:	6820      	ldr	r0, [r4, #0]
 8004b0c:	f000 faba 	bl	8005084 <memmove>
 8004b10:	68a3      	ldr	r3, [r4, #8]
 8004b12:	6822      	ldr	r2, [r4, #0]
 8004b14:	1b9b      	subs	r3, r3, r6
 8004b16:	4432      	add	r2, r6
 8004b18:	2000      	movs	r0, #0
 8004b1a:	60a3      	str	r3, [r4, #8]
 8004b1c:	6022      	str	r2, [r4, #0]
 8004b1e:	e7db      	b.n	8004ad8 <__ssputs_r+0x58>
 8004b20:	462a      	mov	r2, r5
 8004b22:	f000 fac9 	bl	80050b8 <_realloc_r>
 8004b26:	4606      	mov	r6, r0
 8004b28:	2800      	cmp	r0, #0
 8004b2a:	d1e1      	bne.n	8004af0 <__ssputs_r+0x70>
 8004b2c:	4650      	mov	r0, sl
 8004b2e:	6921      	ldr	r1, [r4, #16]
 8004b30:	f7ff fec4 	bl	80048bc <_free_r>
 8004b34:	e7c7      	b.n	8004ac6 <__ssputs_r+0x46>
	...

08004b38 <_svfiprintf_r>:
 8004b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b3c:	4698      	mov	r8, r3
 8004b3e:	898b      	ldrh	r3, [r1, #12]
 8004b40:	4607      	mov	r7, r0
 8004b42:	061b      	lsls	r3, r3, #24
 8004b44:	460d      	mov	r5, r1
 8004b46:	4614      	mov	r4, r2
 8004b48:	b09d      	sub	sp, #116	; 0x74
 8004b4a:	d50e      	bpl.n	8004b6a <_svfiprintf_r+0x32>
 8004b4c:	690b      	ldr	r3, [r1, #16]
 8004b4e:	b963      	cbnz	r3, 8004b6a <_svfiprintf_r+0x32>
 8004b50:	2140      	movs	r1, #64	; 0x40
 8004b52:	f7ff feff 	bl	8004954 <_malloc_r>
 8004b56:	6028      	str	r0, [r5, #0]
 8004b58:	6128      	str	r0, [r5, #16]
 8004b5a:	b920      	cbnz	r0, 8004b66 <_svfiprintf_r+0x2e>
 8004b5c:	230c      	movs	r3, #12
 8004b5e:	603b      	str	r3, [r7, #0]
 8004b60:	f04f 30ff 	mov.w	r0, #4294967295
 8004b64:	e0d1      	b.n	8004d0a <_svfiprintf_r+0x1d2>
 8004b66:	2340      	movs	r3, #64	; 0x40
 8004b68:	616b      	str	r3, [r5, #20]
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	9309      	str	r3, [sp, #36]	; 0x24
 8004b6e:	2320      	movs	r3, #32
 8004b70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b74:	2330      	movs	r3, #48	; 0x30
 8004b76:	f04f 0901 	mov.w	r9, #1
 8004b7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b7e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004d24 <_svfiprintf_r+0x1ec>
 8004b82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b86:	4623      	mov	r3, r4
 8004b88:	469a      	mov	sl, r3
 8004b8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b8e:	b10a      	cbz	r2, 8004b94 <_svfiprintf_r+0x5c>
 8004b90:	2a25      	cmp	r2, #37	; 0x25
 8004b92:	d1f9      	bne.n	8004b88 <_svfiprintf_r+0x50>
 8004b94:	ebba 0b04 	subs.w	fp, sl, r4
 8004b98:	d00b      	beq.n	8004bb2 <_svfiprintf_r+0x7a>
 8004b9a:	465b      	mov	r3, fp
 8004b9c:	4622      	mov	r2, r4
 8004b9e:	4629      	mov	r1, r5
 8004ba0:	4638      	mov	r0, r7
 8004ba2:	f7ff ff6d 	bl	8004a80 <__ssputs_r>
 8004ba6:	3001      	adds	r0, #1
 8004ba8:	f000 80aa 	beq.w	8004d00 <_svfiprintf_r+0x1c8>
 8004bac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bae:	445a      	add	r2, fp
 8004bb0:	9209      	str	r2, [sp, #36]	; 0x24
 8004bb2:	f89a 3000 	ldrb.w	r3, [sl]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f000 80a2 	beq.w	8004d00 <_svfiprintf_r+0x1c8>
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8004bc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bc6:	f10a 0a01 	add.w	sl, sl, #1
 8004bca:	9304      	str	r3, [sp, #16]
 8004bcc:	9307      	str	r3, [sp, #28]
 8004bce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bd2:	931a      	str	r3, [sp, #104]	; 0x68
 8004bd4:	4654      	mov	r4, sl
 8004bd6:	2205      	movs	r2, #5
 8004bd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bdc:	4851      	ldr	r0, [pc, #324]	; (8004d24 <_svfiprintf_r+0x1ec>)
 8004bde:	f000 fa43 	bl	8005068 <memchr>
 8004be2:	9a04      	ldr	r2, [sp, #16]
 8004be4:	b9d8      	cbnz	r0, 8004c1e <_svfiprintf_r+0xe6>
 8004be6:	06d0      	lsls	r0, r2, #27
 8004be8:	bf44      	itt	mi
 8004bea:	2320      	movmi	r3, #32
 8004bec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bf0:	0711      	lsls	r1, r2, #28
 8004bf2:	bf44      	itt	mi
 8004bf4:	232b      	movmi	r3, #43	; 0x2b
 8004bf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bfa:	f89a 3000 	ldrb.w	r3, [sl]
 8004bfe:	2b2a      	cmp	r3, #42	; 0x2a
 8004c00:	d015      	beq.n	8004c2e <_svfiprintf_r+0xf6>
 8004c02:	4654      	mov	r4, sl
 8004c04:	2000      	movs	r0, #0
 8004c06:	f04f 0c0a 	mov.w	ip, #10
 8004c0a:	9a07      	ldr	r2, [sp, #28]
 8004c0c:	4621      	mov	r1, r4
 8004c0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c12:	3b30      	subs	r3, #48	; 0x30
 8004c14:	2b09      	cmp	r3, #9
 8004c16:	d94e      	bls.n	8004cb6 <_svfiprintf_r+0x17e>
 8004c18:	b1b0      	cbz	r0, 8004c48 <_svfiprintf_r+0x110>
 8004c1a:	9207      	str	r2, [sp, #28]
 8004c1c:	e014      	b.n	8004c48 <_svfiprintf_r+0x110>
 8004c1e:	eba0 0308 	sub.w	r3, r0, r8
 8004c22:	fa09 f303 	lsl.w	r3, r9, r3
 8004c26:	4313      	orrs	r3, r2
 8004c28:	46a2      	mov	sl, r4
 8004c2a:	9304      	str	r3, [sp, #16]
 8004c2c:	e7d2      	b.n	8004bd4 <_svfiprintf_r+0x9c>
 8004c2e:	9b03      	ldr	r3, [sp, #12]
 8004c30:	1d19      	adds	r1, r3, #4
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	9103      	str	r1, [sp, #12]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	bfbb      	ittet	lt
 8004c3a:	425b      	neglt	r3, r3
 8004c3c:	f042 0202 	orrlt.w	r2, r2, #2
 8004c40:	9307      	strge	r3, [sp, #28]
 8004c42:	9307      	strlt	r3, [sp, #28]
 8004c44:	bfb8      	it	lt
 8004c46:	9204      	strlt	r2, [sp, #16]
 8004c48:	7823      	ldrb	r3, [r4, #0]
 8004c4a:	2b2e      	cmp	r3, #46	; 0x2e
 8004c4c:	d10c      	bne.n	8004c68 <_svfiprintf_r+0x130>
 8004c4e:	7863      	ldrb	r3, [r4, #1]
 8004c50:	2b2a      	cmp	r3, #42	; 0x2a
 8004c52:	d135      	bne.n	8004cc0 <_svfiprintf_r+0x188>
 8004c54:	9b03      	ldr	r3, [sp, #12]
 8004c56:	3402      	adds	r4, #2
 8004c58:	1d1a      	adds	r2, r3, #4
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	9203      	str	r2, [sp, #12]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	bfb8      	it	lt
 8004c62:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c66:	9305      	str	r3, [sp, #20]
 8004c68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004d34 <_svfiprintf_r+0x1fc>
 8004c6c:	2203      	movs	r2, #3
 8004c6e:	4650      	mov	r0, sl
 8004c70:	7821      	ldrb	r1, [r4, #0]
 8004c72:	f000 f9f9 	bl	8005068 <memchr>
 8004c76:	b140      	cbz	r0, 8004c8a <_svfiprintf_r+0x152>
 8004c78:	2340      	movs	r3, #64	; 0x40
 8004c7a:	eba0 000a 	sub.w	r0, r0, sl
 8004c7e:	fa03 f000 	lsl.w	r0, r3, r0
 8004c82:	9b04      	ldr	r3, [sp, #16]
 8004c84:	3401      	adds	r4, #1
 8004c86:	4303      	orrs	r3, r0
 8004c88:	9304      	str	r3, [sp, #16]
 8004c8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c8e:	2206      	movs	r2, #6
 8004c90:	4825      	ldr	r0, [pc, #148]	; (8004d28 <_svfiprintf_r+0x1f0>)
 8004c92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c96:	f000 f9e7 	bl	8005068 <memchr>
 8004c9a:	2800      	cmp	r0, #0
 8004c9c:	d038      	beq.n	8004d10 <_svfiprintf_r+0x1d8>
 8004c9e:	4b23      	ldr	r3, [pc, #140]	; (8004d2c <_svfiprintf_r+0x1f4>)
 8004ca0:	bb1b      	cbnz	r3, 8004cea <_svfiprintf_r+0x1b2>
 8004ca2:	9b03      	ldr	r3, [sp, #12]
 8004ca4:	3307      	adds	r3, #7
 8004ca6:	f023 0307 	bic.w	r3, r3, #7
 8004caa:	3308      	adds	r3, #8
 8004cac:	9303      	str	r3, [sp, #12]
 8004cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cb0:	4433      	add	r3, r6
 8004cb2:	9309      	str	r3, [sp, #36]	; 0x24
 8004cb4:	e767      	b.n	8004b86 <_svfiprintf_r+0x4e>
 8004cb6:	460c      	mov	r4, r1
 8004cb8:	2001      	movs	r0, #1
 8004cba:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cbe:	e7a5      	b.n	8004c0c <_svfiprintf_r+0xd4>
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	f04f 0c0a 	mov.w	ip, #10
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	3401      	adds	r4, #1
 8004cca:	9305      	str	r3, [sp, #20]
 8004ccc:	4620      	mov	r0, r4
 8004cce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cd2:	3a30      	subs	r2, #48	; 0x30
 8004cd4:	2a09      	cmp	r2, #9
 8004cd6:	d903      	bls.n	8004ce0 <_svfiprintf_r+0x1a8>
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d0c5      	beq.n	8004c68 <_svfiprintf_r+0x130>
 8004cdc:	9105      	str	r1, [sp, #20]
 8004cde:	e7c3      	b.n	8004c68 <_svfiprintf_r+0x130>
 8004ce0:	4604      	mov	r4, r0
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ce8:	e7f0      	b.n	8004ccc <_svfiprintf_r+0x194>
 8004cea:	ab03      	add	r3, sp, #12
 8004cec:	9300      	str	r3, [sp, #0]
 8004cee:	462a      	mov	r2, r5
 8004cf0:	4638      	mov	r0, r7
 8004cf2:	4b0f      	ldr	r3, [pc, #60]	; (8004d30 <_svfiprintf_r+0x1f8>)
 8004cf4:	a904      	add	r1, sp, #16
 8004cf6:	f3af 8000 	nop.w
 8004cfa:	1c42      	adds	r2, r0, #1
 8004cfc:	4606      	mov	r6, r0
 8004cfe:	d1d6      	bne.n	8004cae <_svfiprintf_r+0x176>
 8004d00:	89ab      	ldrh	r3, [r5, #12]
 8004d02:	065b      	lsls	r3, r3, #25
 8004d04:	f53f af2c 	bmi.w	8004b60 <_svfiprintf_r+0x28>
 8004d08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d0a:	b01d      	add	sp, #116	; 0x74
 8004d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d10:	ab03      	add	r3, sp, #12
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	462a      	mov	r2, r5
 8004d16:	4638      	mov	r0, r7
 8004d18:	4b05      	ldr	r3, [pc, #20]	; (8004d30 <_svfiprintf_r+0x1f8>)
 8004d1a:	a904      	add	r1, sp, #16
 8004d1c:	f000 f87c 	bl	8004e18 <_printf_i>
 8004d20:	e7eb      	b.n	8004cfa <_svfiprintf_r+0x1c2>
 8004d22:	bf00      	nop
 8004d24:	080058ee 	.word	0x080058ee
 8004d28:	080058f8 	.word	0x080058f8
 8004d2c:	00000000 	.word	0x00000000
 8004d30:	08004a81 	.word	0x08004a81
 8004d34:	080058f4 	.word	0x080058f4

08004d38 <_printf_common>:
 8004d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d3c:	4616      	mov	r6, r2
 8004d3e:	4699      	mov	r9, r3
 8004d40:	688a      	ldr	r2, [r1, #8]
 8004d42:	690b      	ldr	r3, [r1, #16]
 8004d44:	4607      	mov	r7, r0
 8004d46:	4293      	cmp	r3, r2
 8004d48:	bfb8      	it	lt
 8004d4a:	4613      	movlt	r3, r2
 8004d4c:	6033      	str	r3, [r6, #0]
 8004d4e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d52:	460c      	mov	r4, r1
 8004d54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d58:	b10a      	cbz	r2, 8004d5e <_printf_common+0x26>
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	6033      	str	r3, [r6, #0]
 8004d5e:	6823      	ldr	r3, [r4, #0]
 8004d60:	0699      	lsls	r1, r3, #26
 8004d62:	bf42      	ittt	mi
 8004d64:	6833      	ldrmi	r3, [r6, #0]
 8004d66:	3302      	addmi	r3, #2
 8004d68:	6033      	strmi	r3, [r6, #0]
 8004d6a:	6825      	ldr	r5, [r4, #0]
 8004d6c:	f015 0506 	ands.w	r5, r5, #6
 8004d70:	d106      	bne.n	8004d80 <_printf_common+0x48>
 8004d72:	f104 0a19 	add.w	sl, r4, #25
 8004d76:	68e3      	ldr	r3, [r4, #12]
 8004d78:	6832      	ldr	r2, [r6, #0]
 8004d7a:	1a9b      	subs	r3, r3, r2
 8004d7c:	42ab      	cmp	r3, r5
 8004d7e:	dc28      	bgt.n	8004dd2 <_printf_common+0x9a>
 8004d80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d84:	1e13      	subs	r3, r2, #0
 8004d86:	6822      	ldr	r2, [r4, #0]
 8004d88:	bf18      	it	ne
 8004d8a:	2301      	movne	r3, #1
 8004d8c:	0692      	lsls	r2, r2, #26
 8004d8e:	d42d      	bmi.n	8004dec <_printf_common+0xb4>
 8004d90:	4649      	mov	r1, r9
 8004d92:	4638      	mov	r0, r7
 8004d94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d98:	47c0      	blx	r8
 8004d9a:	3001      	adds	r0, #1
 8004d9c:	d020      	beq.n	8004de0 <_printf_common+0xa8>
 8004d9e:	6823      	ldr	r3, [r4, #0]
 8004da0:	68e5      	ldr	r5, [r4, #12]
 8004da2:	f003 0306 	and.w	r3, r3, #6
 8004da6:	2b04      	cmp	r3, #4
 8004da8:	bf18      	it	ne
 8004daa:	2500      	movne	r5, #0
 8004dac:	6832      	ldr	r2, [r6, #0]
 8004dae:	f04f 0600 	mov.w	r6, #0
 8004db2:	68a3      	ldr	r3, [r4, #8]
 8004db4:	bf08      	it	eq
 8004db6:	1aad      	subeq	r5, r5, r2
 8004db8:	6922      	ldr	r2, [r4, #16]
 8004dba:	bf08      	it	eq
 8004dbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	bfc4      	itt	gt
 8004dc4:	1a9b      	subgt	r3, r3, r2
 8004dc6:	18ed      	addgt	r5, r5, r3
 8004dc8:	341a      	adds	r4, #26
 8004dca:	42b5      	cmp	r5, r6
 8004dcc:	d11a      	bne.n	8004e04 <_printf_common+0xcc>
 8004dce:	2000      	movs	r0, #0
 8004dd0:	e008      	b.n	8004de4 <_printf_common+0xac>
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	4652      	mov	r2, sl
 8004dd6:	4649      	mov	r1, r9
 8004dd8:	4638      	mov	r0, r7
 8004dda:	47c0      	blx	r8
 8004ddc:	3001      	adds	r0, #1
 8004dde:	d103      	bne.n	8004de8 <_printf_common+0xb0>
 8004de0:	f04f 30ff 	mov.w	r0, #4294967295
 8004de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004de8:	3501      	adds	r5, #1
 8004dea:	e7c4      	b.n	8004d76 <_printf_common+0x3e>
 8004dec:	2030      	movs	r0, #48	; 0x30
 8004dee:	18e1      	adds	r1, r4, r3
 8004df0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004df4:	1c5a      	adds	r2, r3, #1
 8004df6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004dfa:	4422      	add	r2, r4
 8004dfc:	3302      	adds	r3, #2
 8004dfe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e02:	e7c5      	b.n	8004d90 <_printf_common+0x58>
 8004e04:	2301      	movs	r3, #1
 8004e06:	4622      	mov	r2, r4
 8004e08:	4649      	mov	r1, r9
 8004e0a:	4638      	mov	r0, r7
 8004e0c:	47c0      	blx	r8
 8004e0e:	3001      	adds	r0, #1
 8004e10:	d0e6      	beq.n	8004de0 <_printf_common+0xa8>
 8004e12:	3601      	adds	r6, #1
 8004e14:	e7d9      	b.n	8004dca <_printf_common+0x92>
	...

08004e18 <_printf_i>:
 8004e18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e1c:	460c      	mov	r4, r1
 8004e1e:	7e27      	ldrb	r7, [r4, #24]
 8004e20:	4691      	mov	r9, r2
 8004e22:	2f78      	cmp	r7, #120	; 0x78
 8004e24:	4680      	mov	r8, r0
 8004e26:	469a      	mov	sl, r3
 8004e28:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004e2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e2e:	d807      	bhi.n	8004e40 <_printf_i+0x28>
 8004e30:	2f62      	cmp	r7, #98	; 0x62
 8004e32:	d80a      	bhi.n	8004e4a <_printf_i+0x32>
 8004e34:	2f00      	cmp	r7, #0
 8004e36:	f000 80d9 	beq.w	8004fec <_printf_i+0x1d4>
 8004e3a:	2f58      	cmp	r7, #88	; 0x58
 8004e3c:	f000 80a4 	beq.w	8004f88 <_printf_i+0x170>
 8004e40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e48:	e03a      	b.n	8004ec0 <_printf_i+0xa8>
 8004e4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e4e:	2b15      	cmp	r3, #21
 8004e50:	d8f6      	bhi.n	8004e40 <_printf_i+0x28>
 8004e52:	a001      	add	r0, pc, #4	; (adr r0, 8004e58 <_printf_i+0x40>)
 8004e54:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004e58:	08004eb1 	.word	0x08004eb1
 8004e5c:	08004ec5 	.word	0x08004ec5
 8004e60:	08004e41 	.word	0x08004e41
 8004e64:	08004e41 	.word	0x08004e41
 8004e68:	08004e41 	.word	0x08004e41
 8004e6c:	08004e41 	.word	0x08004e41
 8004e70:	08004ec5 	.word	0x08004ec5
 8004e74:	08004e41 	.word	0x08004e41
 8004e78:	08004e41 	.word	0x08004e41
 8004e7c:	08004e41 	.word	0x08004e41
 8004e80:	08004e41 	.word	0x08004e41
 8004e84:	08004fd3 	.word	0x08004fd3
 8004e88:	08004ef5 	.word	0x08004ef5
 8004e8c:	08004fb5 	.word	0x08004fb5
 8004e90:	08004e41 	.word	0x08004e41
 8004e94:	08004e41 	.word	0x08004e41
 8004e98:	08004ff5 	.word	0x08004ff5
 8004e9c:	08004e41 	.word	0x08004e41
 8004ea0:	08004ef5 	.word	0x08004ef5
 8004ea4:	08004e41 	.word	0x08004e41
 8004ea8:	08004e41 	.word	0x08004e41
 8004eac:	08004fbd 	.word	0x08004fbd
 8004eb0:	680b      	ldr	r3, [r1, #0]
 8004eb2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004eb6:	1d1a      	adds	r2, r3, #4
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	600a      	str	r2, [r1, #0]
 8004ebc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e0a4      	b.n	800500e <_printf_i+0x1f6>
 8004ec4:	6825      	ldr	r5, [r4, #0]
 8004ec6:	6808      	ldr	r0, [r1, #0]
 8004ec8:	062e      	lsls	r6, r5, #24
 8004eca:	f100 0304 	add.w	r3, r0, #4
 8004ece:	d50a      	bpl.n	8004ee6 <_printf_i+0xce>
 8004ed0:	6805      	ldr	r5, [r0, #0]
 8004ed2:	600b      	str	r3, [r1, #0]
 8004ed4:	2d00      	cmp	r5, #0
 8004ed6:	da03      	bge.n	8004ee0 <_printf_i+0xc8>
 8004ed8:	232d      	movs	r3, #45	; 0x2d
 8004eda:	426d      	negs	r5, r5
 8004edc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ee0:	230a      	movs	r3, #10
 8004ee2:	485e      	ldr	r0, [pc, #376]	; (800505c <_printf_i+0x244>)
 8004ee4:	e019      	b.n	8004f1a <_printf_i+0x102>
 8004ee6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004eea:	6805      	ldr	r5, [r0, #0]
 8004eec:	600b      	str	r3, [r1, #0]
 8004eee:	bf18      	it	ne
 8004ef0:	b22d      	sxthne	r5, r5
 8004ef2:	e7ef      	b.n	8004ed4 <_printf_i+0xbc>
 8004ef4:	680b      	ldr	r3, [r1, #0]
 8004ef6:	6825      	ldr	r5, [r4, #0]
 8004ef8:	1d18      	adds	r0, r3, #4
 8004efa:	6008      	str	r0, [r1, #0]
 8004efc:	0628      	lsls	r0, r5, #24
 8004efe:	d501      	bpl.n	8004f04 <_printf_i+0xec>
 8004f00:	681d      	ldr	r5, [r3, #0]
 8004f02:	e002      	b.n	8004f0a <_printf_i+0xf2>
 8004f04:	0669      	lsls	r1, r5, #25
 8004f06:	d5fb      	bpl.n	8004f00 <_printf_i+0xe8>
 8004f08:	881d      	ldrh	r5, [r3, #0]
 8004f0a:	2f6f      	cmp	r7, #111	; 0x6f
 8004f0c:	bf0c      	ite	eq
 8004f0e:	2308      	moveq	r3, #8
 8004f10:	230a      	movne	r3, #10
 8004f12:	4852      	ldr	r0, [pc, #328]	; (800505c <_printf_i+0x244>)
 8004f14:	2100      	movs	r1, #0
 8004f16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f1a:	6866      	ldr	r6, [r4, #4]
 8004f1c:	2e00      	cmp	r6, #0
 8004f1e:	bfa8      	it	ge
 8004f20:	6821      	ldrge	r1, [r4, #0]
 8004f22:	60a6      	str	r6, [r4, #8]
 8004f24:	bfa4      	itt	ge
 8004f26:	f021 0104 	bicge.w	r1, r1, #4
 8004f2a:	6021      	strge	r1, [r4, #0]
 8004f2c:	b90d      	cbnz	r5, 8004f32 <_printf_i+0x11a>
 8004f2e:	2e00      	cmp	r6, #0
 8004f30:	d04d      	beq.n	8004fce <_printf_i+0x1b6>
 8004f32:	4616      	mov	r6, r2
 8004f34:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f38:	fb03 5711 	mls	r7, r3, r1, r5
 8004f3c:	5dc7      	ldrb	r7, [r0, r7]
 8004f3e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f42:	462f      	mov	r7, r5
 8004f44:	42bb      	cmp	r3, r7
 8004f46:	460d      	mov	r5, r1
 8004f48:	d9f4      	bls.n	8004f34 <_printf_i+0x11c>
 8004f4a:	2b08      	cmp	r3, #8
 8004f4c:	d10b      	bne.n	8004f66 <_printf_i+0x14e>
 8004f4e:	6823      	ldr	r3, [r4, #0]
 8004f50:	07df      	lsls	r7, r3, #31
 8004f52:	d508      	bpl.n	8004f66 <_printf_i+0x14e>
 8004f54:	6923      	ldr	r3, [r4, #16]
 8004f56:	6861      	ldr	r1, [r4, #4]
 8004f58:	4299      	cmp	r1, r3
 8004f5a:	bfde      	ittt	le
 8004f5c:	2330      	movle	r3, #48	; 0x30
 8004f5e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f62:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f66:	1b92      	subs	r2, r2, r6
 8004f68:	6122      	str	r2, [r4, #16]
 8004f6a:	464b      	mov	r3, r9
 8004f6c:	4621      	mov	r1, r4
 8004f6e:	4640      	mov	r0, r8
 8004f70:	f8cd a000 	str.w	sl, [sp]
 8004f74:	aa03      	add	r2, sp, #12
 8004f76:	f7ff fedf 	bl	8004d38 <_printf_common>
 8004f7a:	3001      	adds	r0, #1
 8004f7c:	d14c      	bne.n	8005018 <_printf_i+0x200>
 8004f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f82:	b004      	add	sp, #16
 8004f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f88:	4834      	ldr	r0, [pc, #208]	; (800505c <_printf_i+0x244>)
 8004f8a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f8e:	680e      	ldr	r6, [r1, #0]
 8004f90:	6823      	ldr	r3, [r4, #0]
 8004f92:	f856 5b04 	ldr.w	r5, [r6], #4
 8004f96:	061f      	lsls	r7, r3, #24
 8004f98:	600e      	str	r6, [r1, #0]
 8004f9a:	d514      	bpl.n	8004fc6 <_printf_i+0x1ae>
 8004f9c:	07d9      	lsls	r1, r3, #31
 8004f9e:	bf44      	itt	mi
 8004fa0:	f043 0320 	orrmi.w	r3, r3, #32
 8004fa4:	6023      	strmi	r3, [r4, #0]
 8004fa6:	b91d      	cbnz	r5, 8004fb0 <_printf_i+0x198>
 8004fa8:	6823      	ldr	r3, [r4, #0]
 8004faa:	f023 0320 	bic.w	r3, r3, #32
 8004fae:	6023      	str	r3, [r4, #0]
 8004fb0:	2310      	movs	r3, #16
 8004fb2:	e7af      	b.n	8004f14 <_printf_i+0xfc>
 8004fb4:	6823      	ldr	r3, [r4, #0]
 8004fb6:	f043 0320 	orr.w	r3, r3, #32
 8004fba:	6023      	str	r3, [r4, #0]
 8004fbc:	2378      	movs	r3, #120	; 0x78
 8004fbe:	4828      	ldr	r0, [pc, #160]	; (8005060 <_printf_i+0x248>)
 8004fc0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004fc4:	e7e3      	b.n	8004f8e <_printf_i+0x176>
 8004fc6:	065e      	lsls	r6, r3, #25
 8004fc8:	bf48      	it	mi
 8004fca:	b2ad      	uxthmi	r5, r5
 8004fcc:	e7e6      	b.n	8004f9c <_printf_i+0x184>
 8004fce:	4616      	mov	r6, r2
 8004fd0:	e7bb      	b.n	8004f4a <_printf_i+0x132>
 8004fd2:	680b      	ldr	r3, [r1, #0]
 8004fd4:	6826      	ldr	r6, [r4, #0]
 8004fd6:	1d1d      	adds	r5, r3, #4
 8004fd8:	6960      	ldr	r0, [r4, #20]
 8004fda:	600d      	str	r5, [r1, #0]
 8004fdc:	0635      	lsls	r5, r6, #24
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	d501      	bpl.n	8004fe6 <_printf_i+0x1ce>
 8004fe2:	6018      	str	r0, [r3, #0]
 8004fe4:	e002      	b.n	8004fec <_printf_i+0x1d4>
 8004fe6:	0671      	lsls	r1, r6, #25
 8004fe8:	d5fb      	bpl.n	8004fe2 <_printf_i+0x1ca>
 8004fea:	8018      	strh	r0, [r3, #0]
 8004fec:	2300      	movs	r3, #0
 8004fee:	4616      	mov	r6, r2
 8004ff0:	6123      	str	r3, [r4, #16]
 8004ff2:	e7ba      	b.n	8004f6a <_printf_i+0x152>
 8004ff4:	680b      	ldr	r3, [r1, #0]
 8004ff6:	1d1a      	adds	r2, r3, #4
 8004ff8:	600a      	str	r2, [r1, #0]
 8004ffa:	681e      	ldr	r6, [r3, #0]
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	4630      	mov	r0, r6
 8005000:	6862      	ldr	r2, [r4, #4]
 8005002:	f000 f831 	bl	8005068 <memchr>
 8005006:	b108      	cbz	r0, 800500c <_printf_i+0x1f4>
 8005008:	1b80      	subs	r0, r0, r6
 800500a:	6060      	str	r0, [r4, #4]
 800500c:	6863      	ldr	r3, [r4, #4]
 800500e:	6123      	str	r3, [r4, #16]
 8005010:	2300      	movs	r3, #0
 8005012:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005016:	e7a8      	b.n	8004f6a <_printf_i+0x152>
 8005018:	4632      	mov	r2, r6
 800501a:	4649      	mov	r1, r9
 800501c:	4640      	mov	r0, r8
 800501e:	6923      	ldr	r3, [r4, #16]
 8005020:	47d0      	blx	sl
 8005022:	3001      	adds	r0, #1
 8005024:	d0ab      	beq.n	8004f7e <_printf_i+0x166>
 8005026:	6823      	ldr	r3, [r4, #0]
 8005028:	079b      	lsls	r3, r3, #30
 800502a:	d413      	bmi.n	8005054 <_printf_i+0x23c>
 800502c:	68e0      	ldr	r0, [r4, #12]
 800502e:	9b03      	ldr	r3, [sp, #12]
 8005030:	4298      	cmp	r0, r3
 8005032:	bfb8      	it	lt
 8005034:	4618      	movlt	r0, r3
 8005036:	e7a4      	b.n	8004f82 <_printf_i+0x16a>
 8005038:	2301      	movs	r3, #1
 800503a:	4632      	mov	r2, r6
 800503c:	4649      	mov	r1, r9
 800503e:	4640      	mov	r0, r8
 8005040:	47d0      	blx	sl
 8005042:	3001      	adds	r0, #1
 8005044:	d09b      	beq.n	8004f7e <_printf_i+0x166>
 8005046:	3501      	adds	r5, #1
 8005048:	68e3      	ldr	r3, [r4, #12]
 800504a:	9903      	ldr	r1, [sp, #12]
 800504c:	1a5b      	subs	r3, r3, r1
 800504e:	42ab      	cmp	r3, r5
 8005050:	dcf2      	bgt.n	8005038 <_printf_i+0x220>
 8005052:	e7eb      	b.n	800502c <_printf_i+0x214>
 8005054:	2500      	movs	r5, #0
 8005056:	f104 0619 	add.w	r6, r4, #25
 800505a:	e7f5      	b.n	8005048 <_printf_i+0x230>
 800505c:	080058ff 	.word	0x080058ff
 8005060:	08005910 	.word	0x08005910

08005064 <__retarget_lock_acquire_recursive>:
 8005064:	4770      	bx	lr

08005066 <__retarget_lock_release_recursive>:
 8005066:	4770      	bx	lr

08005068 <memchr>:
 8005068:	4603      	mov	r3, r0
 800506a:	b510      	push	{r4, lr}
 800506c:	b2c9      	uxtb	r1, r1
 800506e:	4402      	add	r2, r0
 8005070:	4293      	cmp	r3, r2
 8005072:	4618      	mov	r0, r3
 8005074:	d101      	bne.n	800507a <memchr+0x12>
 8005076:	2000      	movs	r0, #0
 8005078:	e003      	b.n	8005082 <memchr+0x1a>
 800507a:	7804      	ldrb	r4, [r0, #0]
 800507c:	3301      	adds	r3, #1
 800507e:	428c      	cmp	r4, r1
 8005080:	d1f6      	bne.n	8005070 <memchr+0x8>
 8005082:	bd10      	pop	{r4, pc}

08005084 <memmove>:
 8005084:	4288      	cmp	r0, r1
 8005086:	b510      	push	{r4, lr}
 8005088:	eb01 0402 	add.w	r4, r1, r2
 800508c:	d902      	bls.n	8005094 <memmove+0x10>
 800508e:	4284      	cmp	r4, r0
 8005090:	4623      	mov	r3, r4
 8005092:	d807      	bhi.n	80050a4 <memmove+0x20>
 8005094:	1e43      	subs	r3, r0, #1
 8005096:	42a1      	cmp	r1, r4
 8005098:	d008      	beq.n	80050ac <memmove+0x28>
 800509a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800509e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80050a2:	e7f8      	b.n	8005096 <memmove+0x12>
 80050a4:	4601      	mov	r1, r0
 80050a6:	4402      	add	r2, r0
 80050a8:	428a      	cmp	r2, r1
 80050aa:	d100      	bne.n	80050ae <memmove+0x2a>
 80050ac:	bd10      	pop	{r4, pc}
 80050ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80050b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80050b6:	e7f7      	b.n	80050a8 <memmove+0x24>

080050b8 <_realloc_r>:
 80050b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ba:	4607      	mov	r7, r0
 80050bc:	4614      	mov	r4, r2
 80050be:	460e      	mov	r6, r1
 80050c0:	b921      	cbnz	r1, 80050cc <_realloc_r+0x14>
 80050c2:	4611      	mov	r1, r2
 80050c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80050c8:	f7ff bc44 	b.w	8004954 <_malloc_r>
 80050cc:	b922      	cbnz	r2, 80050d8 <_realloc_r+0x20>
 80050ce:	f7ff fbf5 	bl	80048bc <_free_r>
 80050d2:	4625      	mov	r5, r4
 80050d4:	4628      	mov	r0, r5
 80050d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050d8:	f000 f814 	bl	8005104 <_malloc_usable_size_r>
 80050dc:	42a0      	cmp	r0, r4
 80050de:	d20f      	bcs.n	8005100 <_realloc_r+0x48>
 80050e0:	4621      	mov	r1, r4
 80050e2:	4638      	mov	r0, r7
 80050e4:	f7ff fc36 	bl	8004954 <_malloc_r>
 80050e8:	4605      	mov	r5, r0
 80050ea:	2800      	cmp	r0, #0
 80050ec:	d0f2      	beq.n	80050d4 <_realloc_r+0x1c>
 80050ee:	4631      	mov	r1, r6
 80050f0:	4622      	mov	r2, r4
 80050f2:	f7ff fbcd 	bl	8004890 <memcpy>
 80050f6:	4631      	mov	r1, r6
 80050f8:	4638      	mov	r0, r7
 80050fa:	f7ff fbdf 	bl	80048bc <_free_r>
 80050fe:	e7e9      	b.n	80050d4 <_realloc_r+0x1c>
 8005100:	4635      	mov	r5, r6
 8005102:	e7e7      	b.n	80050d4 <_realloc_r+0x1c>

08005104 <_malloc_usable_size_r>:
 8005104:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005108:	1f18      	subs	r0, r3, #4
 800510a:	2b00      	cmp	r3, #0
 800510c:	bfbc      	itt	lt
 800510e:	580b      	ldrlt	r3, [r1, r0]
 8005110:	18c0      	addlt	r0, r0, r3
 8005112:	4770      	bx	lr

08005114 <_init>:
 8005114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005116:	bf00      	nop
 8005118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800511a:	bc08      	pop	{r3}
 800511c:	469e      	mov	lr, r3
 800511e:	4770      	bx	lr

08005120 <_fini>:
 8005120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005122:	bf00      	nop
 8005124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005126:	bc08      	pop	{r3}
 8005128:	469e      	mov	lr, r3
 800512a:	4770      	bx	lr
