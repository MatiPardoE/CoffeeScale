
CoffeeScale.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000556c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f4  0800567c  0800567c  0001567c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e70  08005e70  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08005e70  08005e70  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e70  08005e70  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e70  08005e70  00015e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e74  08005e74  00015e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08005e78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c0  20000080  08005ef8  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000740  08005ef8  00020740  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016df9  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003036  00000000  00000000  00036ea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001258  00000000  00000000  00039ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001110  00000000  00000000  0003b130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a74b  00000000  00000000  0003c240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001468b  00000000  00000000  0005698b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000946de  00000000  00000000  0006b016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ff6f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050c8  00000000  00000000  000ff748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	08005664 	.word	0x08005664

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	08005664 	.word	0x08005664

08000150 <ShowScreen>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void ShowScreen( void *pvParameters) {
 8000150:	b580      	push	{r7, lr}
 8000152:	b090      	sub	sp, #64	; 0x40
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]

	char str[50];  // Declaramos un arreglo de caracteres para almacenar el resultado

	ssd1306_Select(SH1106_bigOLED);
 8000158:	2078      	movs	r0, #120	; 0x78
 800015a:	f000 fbc1 	bl	80008e0 <ssd1306_Select>
	ssd1306_Fill(Black);
 800015e:	2000      	movs	r0, #0
 8000160:	f000 fbce 	bl	8000900 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8000164:	f000 fbee 	bl	8000944 <ssd1306_UpdateScreen>
	ssd1306_Select(SSD1306_smallOLED);
 8000168:	207a      	movs	r0, #122	; 0x7a
 800016a:	f000 fbb9 	bl	80008e0 <ssd1306_Select>
	ssd1306_Fill(Black);
 800016e:	2000      	movs	r0, #0
 8000170:	f000 fbc6 	bl	8000900 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 8000174:	f000 fbe6 	bl	8000944 <ssd1306_UpdateScreen>


    while (1){
    	sprintf(str,"Encoder: %d",((int)(TIM3->CNT)>>2));
 8000178:	4b14      	ldr	r3, [pc, #80]	; (80001cc <ShowScreen+0x7c>)
 800017a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800017c:	109a      	asrs	r2, r3, #2
 800017e:	f107 030c 	add.w	r3, r7, #12
 8000182:	4913      	ldr	r1, [pc, #76]	; (80001d0 <ShowScreen+0x80>)
 8000184:	4618      	mov	r0, r3
 8000186:	f004 fef7 	bl	8004f78 <siprintf>

    	ssd1306_Select(SH1106_bigOLED);
 800018a:	2078      	movs	r0, #120	; 0x78
 800018c:	f000 fba8 	bl	80008e0 <ssd1306_Select>
    	ssd1306_SetCursor(0, 0);
 8000190:	2100      	movs	r1, #0
 8000192:	2000      	movs	r0, #0
 8000194:	f000 fd08 	bl	8000ba8 <ssd1306_SetCursor>
    	ssd1306_WriteString(str, Font_7x10, White);
 8000198:	4a0e      	ldr	r2, [pc, #56]	; (80001d4 <ShowScreen+0x84>)
 800019a:	f107 000c 	add.w	r0, r7, #12
 800019e:	2301      	movs	r3, #1
 80001a0:	ca06      	ldmia	r2, {r1, r2}
 80001a2:	f000 fcdb 	bl	8000b5c <ssd1306_WriteString>
    	ssd1306_UpdateScreen();
 80001a6:	f000 fbcd 	bl	8000944 <ssd1306_UpdateScreen>

    	ssd1306_Select(SSD1306_smallOLED);
 80001aa:	207a      	movs	r0, #122	; 0x7a
 80001ac:	f000 fb98 	bl	80008e0 <ssd1306_Select>
    	ssd1306_SetCursor(0, 0);
 80001b0:	2100      	movs	r1, #0
 80001b2:	2000      	movs	r0, #0
 80001b4:	f000 fcf8 	bl	8000ba8 <ssd1306_SetCursor>
    	ssd1306_WriteString(str, Font_7x10, White);
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <ShowScreen+0x84>)
 80001ba:	f107 000c 	add.w	r0, r7, #12
 80001be:	2301      	movs	r3, #1
 80001c0:	ca06      	ldmia	r2, {r1, r2}
 80001c2:	f000 fccb 	bl	8000b5c <ssd1306_WriteString>
    	ssd1306_UpdateScreen();
 80001c6:	f000 fbbd 	bl	8000944 <ssd1306_UpdateScreen>
    	sprintf(str,"Encoder: %d",((int)(TIM3->CNT)>>2));
 80001ca:	e7d5      	b.n	8000178 <ShowScreen+0x28>
 80001cc:	40000400 	.word	0x40000400
 80001d0:	0800567c 	.word	0x0800567c
 80001d4:	20000004 	.word	0x20000004

080001d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001de:	f000 fd2d 	bl	8000c3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e2:	f000 f827 	bl	8000234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e6:	f000 f8ed 	bl	80003c4 <MX_GPIO_Init>
  MX_I2C2_Init();
 80001ea:	f000 f869 	bl	80002c0 <MX_I2C2_Init>
  MX_TIM3_Init();
 80001ee:	f000 f895 	bl	800031c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80001f2:	213c      	movs	r1, #60	; 0x3c
 80001f4:	480c      	ldr	r0, [pc, #48]	; (8000228 <main+0x50>)
 80001f6:	f002 fa11 	bl	800261c <HAL_TIM_Encoder_Start>

  ssd1306_Select(SSD1306_smallOLED);
 80001fa:	207a      	movs	r0, #122	; 0x7a
 80001fc:	f000 fb70 	bl	80008e0 <ssd1306_Select>
  ssd1306_Init();
 8000200:	f000 fb04 	bl	800080c <ssd1306_Init>
  ssd1306_Select(SH1106_bigOLED);
 8000204:	2078      	movs	r0, #120	; 0x78
 8000206:	f000 fb6b 	bl	80008e0 <ssd1306_Select>
  ssd1306_Init();
 800020a:	f000 faff 	bl	800080c <ssd1306_Init>

  xTaskCreate(ShowScreen,                  	// Nombre de la funci칩n que se ejecutar치 como tarea
 800020e:	2300      	movs	r3, #0
 8000210:	9301      	str	r3, [sp, #4]
 8000212:	2303      	movs	r3, #3
 8000214:	9300      	str	r3, [sp, #0]
 8000216:	2300      	movs	r3, #0
 8000218:	2280      	movs	r2, #128	; 0x80
 800021a:	4904      	ldr	r1, [pc, #16]	; (800022c <main+0x54>)
 800021c:	4804      	ldr	r0, [pc, #16]	; (8000230 <main+0x58>)
 800021e:	f002 fcad 	bl	8002b7c <xTaskCreate>
			  NULL,                    	// Puntero a informaci칩n que se pasar치 como argumento a la tarea
			  3,                       	// Prioridad de la tarea
			  NULL);    	// Puntero a variable para almacenar el identificador de la tarea


  vTaskStartScheduler();
 8000222:	f002 fe17 	bl	8002e54 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000226:	e7fe      	b.n	8000226 <main+0x4e>
 8000228:	20000658 	.word	0x20000658
 800022c:	08005688 	.word	0x08005688
 8000230:	08000151 	.word	0x08000151

08000234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b090      	sub	sp, #64	; 0x40
 8000238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023a:	f107 0318 	add.w	r3, r7, #24
 800023e:	2228      	movs	r2, #40	; 0x28
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f004 fdda 	bl	8004dfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]
 8000254:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000256:	2301      	movs	r3, #1
 8000258:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800025a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800025e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000260:	2300      	movs	r3, #0
 8000262:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000264:	2301      	movs	r3, #1
 8000266:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000268:	2302      	movs	r3, #2
 800026a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800026c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000270:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000272:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000276:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000278:	f107 0318 	add.w	r3, r7, #24
 800027c:	4618      	mov	r0, r3
 800027e:	f001 fc43 	bl	8001b08 <HAL_RCC_OscConfig>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000288:	f000 f8f2 	bl	8000470 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028c:	230f      	movs	r3, #15
 800028e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000290:	2302      	movs	r3, #2
 8000292:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800029c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	2102      	movs	r1, #2
 80002a6:	4618      	mov	r0, r3
 80002a8:	f001 feae 	bl	8002008 <HAL_RCC_ClockConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002b2:	f000 f8dd 	bl	8000470 <Error_Handler>
  }
}
 80002b6:	bf00      	nop
 80002b8:	3740      	adds	r7, #64	; 0x40
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
	...

080002c0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80002c4:	4b12      	ldr	r3, [pc, #72]	; (8000310 <MX_I2C2_Init+0x50>)
 80002c6:	4a13      	ldr	r2, [pc, #76]	; (8000314 <MX_I2C2_Init+0x54>)
 80002c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80002ca:	4b11      	ldr	r3, [pc, #68]	; (8000310 <MX_I2C2_Init+0x50>)
 80002cc:	4a12      	ldr	r2, [pc, #72]	; (8000318 <MX_I2C2_Init+0x58>)
 80002ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002d0:	4b0f      	ldr	r3, [pc, #60]	; (8000310 <MX_I2C2_Init+0x50>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80002d6:	4b0e      	ldr	r3, [pc, #56]	; (8000310 <MX_I2C2_Init+0x50>)
 80002d8:	2200      	movs	r2, #0
 80002da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002dc:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <MX_I2C2_Init+0x50>)
 80002de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002e2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002e4:	4b0a      	ldr	r3, [pc, #40]	; (8000310 <MX_I2C2_Init+0x50>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80002ea:	4b09      	ldr	r3, [pc, #36]	; (8000310 <MX_I2C2_Init+0x50>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002f0:	4b07      	ldr	r3, [pc, #28]	; (8000310 <MX_I2C2_Init+0x50>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002f6:	4b06      	ldr	r3, [pc, #24]	; (8000310 <MX_I2C2_Init+0x50>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80002fc:	4804      	ldr	r0, [pc, #16]	; (8000310 <MX_I2C2_Init+0x50>)
 80002fe:	f000 ff57 	bl	80011b0 <HAL_I2C_Init>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000308:	f000 f8b2 	bl	8000470 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800030c:	bf00      	nop
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000604 	.word	0x20000604
 8000314:	40005800 	.word	0x40005800
 8000318:	00061a80 	.word	0x00061a80

0800031c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b08c      	sub	sp, #48	; 0x30
 8000320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000322:	f107 030c 	add.w	r3, r7, #12
 8000326:	2224      	movs	r2, #36	; 0x24
 8000328:	2100      	movs	r1, #0
 800032a:	4618      	mov	r0, r3
 800032c:	f004 fd66 	bl	8004dfc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000338:	4b20      	ldr	r3, [pc, #128]	; (80003bc <MX_TIM3_Init+0xa0>)
 800033a:	4a21      	ldr	r2, [pc, #132]	; (80003c0 <MX_TIM3_Init+0xa4>)
 800033c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800033e:	4b1f      	ldr	r3, [pc, #124]	; (80003bc <MX_TIM3_Init+0xa0>)
 8000340:	2200      	movs	r2, #0
 8000342:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000344:	4b1d      	ldr	r3, [pc, #116]	; (80003bc <MX_TIM3_Init+0xa0>)
 8000346:	2200      	movs	r2, #0
 8000348:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800034a:	4b1c      	ldr	r3, [pc, #112]	; (80003bc <MX_TIM3_Init+0xa0>)
 800034c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000350:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000352:	4b1a      	ldr	r3, [pc, #104]	; (80003bc <MX_TIM3_Init+0xa0>)
 8000354:	2200      	movs	r2, #0
 8000356:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000358:	4b18      	ldr	r3, [pc, #96]	; (80003bc <MX_TIM3_Init+0xa0>)
 800035a:	2280      	movs	r2, #128	; 0x80
 800035c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800035e:	2303      	movs	r3, #3
 8000360:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000362:	2300      	movs	r3, #0
 8000364:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000366:	2301      	movs	r3, #1
 8000368:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800036a:	2300      	movs	r3, #0
 800036c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800036e:	230a      	movs	r3, #10
 8000370:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000372:	2300      	movs	r3, #0
 8000374:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000376:	2301      	movs	r3, #1
 8000378:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800037a:	2300      	movs	r3, #0
 800037c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800037e:	230a      	movs	r3, #10
 8000380:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000382:	f107 030c 	add.w	r3, r7, #12
 8000386:	4619      	mov	r1, r3
 8000388:	480c      	ldr	r0, [pc, #48]	; (80003bc <MX_TIM3_Init+0xa0>)
 800038a:	f002 f8a5 	bl	80024d8 <HAL_TIM_Encoder_Init>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000394:	f000 f86c 	bl	8000470 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000398:	2300      	movs	r3, #0
 800039a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800039c:	2300      	movs	r3, #0
 800039e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	4619      	mov	r1, r3
 80003a4:	4805      	ldr	r0, [pc, #20]	; (80003bc <MX_TIM3_Init+0xa0>)
 80003a6:	f002 fb79 	bl	8002a9c <HAL_TIMEx_MasterConfigSynchronization>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80003b0:	f000 f85e 	bl	8000470 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80003b4:	bf00      	nop
 80003b6:	3730      	adds	r7, #48	; 0x30
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	20000658 	.word	0x20000658
 80003c0:	40000400 	.word	0x40000400

080003c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b088      	sub	sp, #32
 80003c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ca:	f107 0310 	add.w	r3, r7, #16
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003d8:	4b1a      	ldr	r3, [pc, #104]	; (8000444 <MX_GPIO_Init+0x80>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	4a19      	ldr	r2, [pc, #100]	; (8000444 <MX_GPIO_Init+0x80>)
 80003de:	f043 0320 	orr.w	r3, r3, #32
 80003e2:	6193      	str	r3, [r2, #24]
 80003e4:	4b17      	ldr	r3, [pc, #92]	; (8000444 <MX_GPIO_Init+0x80>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	f003 0320 	and.w	r3, r3, #32
 80003ec:	60fb      	str	r3, [r7, #12]
 80003ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f0:	4b14      	ldr	r3, [pc, #80]	; (8000444 <MX_GPIO_Init+0x80>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	4a13      	ldr	r2, [pc, #76]	; (8000444 <MX_GPIO_Init+0x80>)
 80003f6:	f043 0304 	orr.w	r3, r3, #4
 80003fa:	6193      	str	r3, [r2, #24]
 80003fc:	4b11      	ldr	r3, [pc, #68]	; (8000444 <MX_GPIO_Init+0x80>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	f003 0304 	and.w	r3, r3, #4
 8000404:	60bb      	str	r3, [r7, #8]
 8000406:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000408:	4b0e      	ldr	r3, [pc, #56]	; (8000444 <MX_GPIO_Init+0x80>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	4a0d      	ldr	r2, [pc, #52]	; (8000444 <MX_GPIO_Init+0x80>)
 800040e:	f043 0308 	orr.w	r3, r3, #8
 8000412:	6193      	str	r3, [r2, #24]
 8000414:	4b0b      	ldr	r3, [pc, #44]	; (8000444 <MX_GPIO_Init+0x80>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	f003 0308 	and.w	r3, r3, #8
 800041c:	607b      	str	r3, [r7, #4]
 800041e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : Encoder_btn_Pin */
  GPIO_InitStruct.Pin = Encoder_btn_Pin;
 8000420:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000424:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000426:	2300      	movs	r3, #0
 8000428:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800042a:	2301      	movs	r3, #1
 800042c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Encoder_btn_GPIO_Port, &GPIO_InitStruct);
 800042e:	f107 0310 	add.w	r3, r7, #16
 8000432:	4619      	mov	r1, r3
 8000434:	4804      	ldr	r0, [pc, #16]	; (8000448 <MX_GPIO_Init+0x84>)
 8000436:	f000 fd37 	bl	8000ea8 <HAL_GPIO_Init>

}
 800043a:	bf00      	nop
 800043c:	3720      	adds	r7, #32
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	40021000 	.word	0x40021000
 8000448:	40010800 	.word	0x40010800

0800044c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a04      	ldr	r2, [pc, #16]	; (800046c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d101      	bne.n	8000462 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800045e:	f000 fc03 	bl	8000c68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000462:	bf00      	nop
 8000464:	3708      	adds	r7, #8
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	40012c00 	.word	0x40012c00

08000470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000474:	b672      	cpsid	i
}
 8000476:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000478:	e7fe      	b.n	8000478 <Error_Handler+0x8>
	...

0800047c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000482:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <HAL_MspInit+0x5c>)
 8000484:	699b      	ldr	r3, [r3, #24]
 8000486:	4a14      	ldr	r2, [pc, #80]	; (80004d8 <HAL_MspInit+0x5c>)
 8000488:	f043 0301 	orr.w	r3, r3, #1
 800048c:	6193      	str	r3, [r2, #24]
 800048e:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <HAL_MspInit+0x5c>)
 8000490:	699b      	ldr	r3, [r3, #24]
 8000492:	f003 0301 	and.w	r3, r3, #1
 8000496:	60bb      	str	r3, [r7, #8]
 8000498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800049a:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <HAL_MspInit+0x5c>)
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	4a0e      	ldr	r2, [pc, #56]	; (80004d8 <HAL_MspInit+0x5c>)
 80004a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004a4:	61d3      	str	r3, [r2, #28]
 80004a6:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <HAL_MspInit+0x5c>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ae:	607b      	str	r3, [r7, #4]
 80004b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004b2:	4b0a      	ldr	r3, [pc, #40]	; (80004dc <HAL_MspInit+0x60>)
 80004b4:	685b      	ldr	r3, [r3, #4]
 80004b6:	60fb      	str	r3, [r7, #12]
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	4a04      	ldr	r2, [pc, #16]	; (80004dc <HAL_MspInit+0x60>)
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ce:	bf00      	nop
 80004d0:	3714      	adds	r7, #20
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr
 80004d8:	40021000 	.word	0x40021000
 80004dc:	40010000 	.word	0x40010000

080004e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b088      	sub	sp, #32
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e8:	f107 0310 	add.w	r3, r7, #16
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4a16      	ldr	r2, [pc, #88]	; (8000554 <HAL_I2C_MspInit+0x74>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d124      	bne.n	800054a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000500:	4b15      	ldr	r3, [pc, #84]	; (8000558 <HAL_I2C_MspInit+0x78>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	4a14      	ldr	r2, [pc, #80]	; (8000558 <HAL_I2C_MspInit+0x78>)
 8000506:	f043 0308 	orr.w	r3, r3, #8
 800050a:	6193      	str	r3, [r2, #24]
 800050c:	4b12      	ldr	r3, [pc, #72]	; (8000558 <HAL_I2C_MspInit+0x78>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	f003 0308 	and.w	r3, r3, #8
 8000514:	60fb      	str	r3, [r7, #12]
 8000516:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000518:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800051c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800051e:	2312      	movs	r3, #18
 8000520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000522:	2303      	movs	r3, #3
 8000524:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000526:	f107 0310 	add.w	r3, r7, #16
 800052a:	4619      	mov	r1, r3
 800052c:	480b      	ldr	r0, [pc, #44]	; (800055c <HAL_I2C_MspInit+0x7c>)
 800052e:	f000 fcbb 	bl	8000ea8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000532:	4b09      	ldr	r3, [pc, #36]	; (8000558 <HAL_I2C_MspInit+0x78>)
 8000534:	69db      	ldr	r3, [r3, #28]
 8000536:	4a08      	ldr	r2, [pc, #32]	; (8000558 <HAL_I2C_MspInit+0x78>)
 8000538:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800053c:	61d3      	str	r3, [r2, #28]
 800053e:	4b06      	ldr	r3, [pc, #24]	; (8000558 <HAL_I2C_MspInit+0x78>)
 8000540:	69db      	ldr	r3, [r3, #28]
 8000542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800054a:	bf00      	nop
 800054c:	3720      	adds	r7, #32
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40005800 	.word	0x40005800
 8000558:	40021000 	.word	0x40021000
 800055c:	40010c00 	.word	0x40010c00

08000560 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b088      	sub	sp, #32
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000568:	f107 0310 	add.w	r3, r7, #16
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a15      	ldr	r2, [pc, #84]	; (80005d0 <HAL_TIM_Encoder_MspInit+0x70>)
 800057c:	4293      	cmp	r3, r2
 800057e:	d123      	bne.n	80005c8 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000580:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <HAL_TIM_Encoder_MspInit+0x74>)
 8000582:	69db      	ldr	r3, [r3, #28]
 8000584:	4a13      	ldr	r2, [pc, #76]	; (80005d4 <HAL_TIM_Encoder_MspInit+0x74>)
 8000586:	f043 0302 	orr.w	r3, r3, #2
 800058a:	61d3      	str	r3, [r2, #28]
 800058c:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <HAL_TIM_Encoder_MspInit+0x74>)
 800058e:	69db      	ldr	r3, [r3, #28]
 8000590:	f003 0302 	and.w	r3, r3, #2
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000598:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <HAL_TIM_Encoder_MspInit+0x74>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	4a0d      	ldr	r2, [pc, #52]	; (80005d4 <HAL_TIM_Encoder_MspInit+0x74>)
 800059e:	f043 0304 	orr.w	r3, r3, #4
 80005a2:	6193      	str	r3, [r2, #24]
 80005a4:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <HAL_TIM_Encoder_MspInit+0x74>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	f003 0304 	and.w	r3, r3, #4
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005b0:	23c0      	movs	r3, #192	; 0xc0
 80005b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005b8:	2301      	movs	r3, #1
 80005ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005bc:	f107 0310 	add.w	r3, r7, #16
 80005c0:	4619      	mov	r1, r3
 80005c2:	4805      	ldr	r0, [pc, #20]	; (80005d8 <HAL_TIM_Encoder_MspInit+0x78>)
 80005c4:	f000 fc70 	bl	8000ea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80005c8:	bf00      	nop
 80005ca:	3720      	adds	r7, #32
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40000400 	.word	0x40000400
 80005d4:	40021000 	.word	0x40021000
 80005d8:	40010800 	.word	0x40010800

080005dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08c      	sub	sp, #48	; 0x30
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80005ec:	2200      	movs	r2, #0
 80005ee:	6879      	ldr	r1, [r7, #4]
 80005f0:	2019      	movs	r0, #25
 80005f2:	f000 fc2e 	bl	8000e52 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80005f6:	2019      	movs	r0, #25
 80005f8:	f000 fc47 	bl	8000e8a <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80005fc:	4b1e      	ldr	r3, [pc, #120]	; (8000678 <HAL_InitTick+0x9c>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	4a1d      	ldr	r2, [pc, #116]	; (8000678 <HAL_InitTick+0x9c>)
 8000602:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000606:	6193      	str	r3, [r2, #24]
 8000608:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <HAL_InitTick+0x9c>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000614:	f107 0210 	add.w	r2, r7, #16
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	4611      	mov	r1, r2
 800061e:	4618      	mov	r0, r3
 8000620:	f001 fe62 	bl	80022e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000624:	f001 fe4c 	bl	80022c0 <HAL_RCC_GetPCLK2Freq>
 8000628:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800062a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800062c:	4a13      	ldr	r2, [pc, #76]	; (800067c <HAL_InitTick+0xa0>)
 800062e:	fba2 2303 	umull	r2, r3, r2, r3
 8000632:	0c9b      	lsrs	r3, r3, #18
 8000634:	3b01      	subs	r3, #1
 8000636:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000638:	4b11      	ldr	r3, [pc, #68]	; (8000680 <HAL_InitTick+0xa4>)
 800063a:	4a12      	ldr	r2, [pc, #72]	; (8000684 <HAL_InitTick+0xa8>)
 800063c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800063e:	4b10      	ldr	r3, [pc, #64]	; (8000680 <HAL_InitTick+0xa4>)
 8000640:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000644:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000646:	4a0e      	ldr	r2, [pc, #56]	; (8000680 <HAL_InitTick+0xa4>)
 8000648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800064a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <HAL_InitTick+0xa4>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <HAL_InitTick+0xa4>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000658:	4809      	ldr	r0, [pc, #36]	; (8000680 <HAL_InitTick+0xa4>)
 800065a:	f001 fe93 	bl	8002384 <HAL_TIM_Base_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d104      	bne.n	800066e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000664:	4806      	ldr	r0, [pc, #24]	; (8000680 <HAL_InitTick+0xa4>)
 8000666:	f001 fee5 	bl	8002434 <HAL_TIM_Base_Start_IT>
 800066a:	4603      	mov	r3, r0
 800066c:	e000      	b.n	8000670 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800066e:	2301      	movs	r3, #1
}
 8000670:	4618      	mov	r0, r3
 8000672:	3730      	adds	r7, #48	; 0x30
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40021000 	.word	0x40021000
 800067c:	431bde83 	.word	0x431bde83
 8000680:	200006a4 	.word	0x200006a4
 8000684:	40012c00 	.word	0x40012c00

08000688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800068c:	e7fe      	b.n	800068c <NMI_Handler+0x4>

0800068e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000692:	e7fe      	b.n	8000692 <HardFault_Handler+0x4>

08000694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000698:	e7fe      	b.n	8000698 <MemManage_Handler+0x4>

0800069a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800069e:	e7fe      	b.n	800069e <BusFault_Handler+0x4>

080006a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <UsageFault_Handler+0x4>

080006a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006aa:	bf00      	nop
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr
	...

080006b4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80006b8:	4802      	ldr	r0, [pc, #8]	; (80006c4 <TIM1_UP_IRQHandler+0x10>)
 80006ba:	f002 f83d 	bl	8002738 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	200006a4 	.word	0x200006a4

080006c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006d0:	4a14      	ldr	r2, [pc, #80]	; (8000724 <_sbrk+0x5c>)
 80006d2:	4b15      	ldr	r3, [pc, #84]	; (8000728 <_sbrk+0x60>)
 80006d4:	1ad3      	subs	r3, r2, r3
 80006d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006dc:	4b13      	ldr	r3, [pc, #76]	; (800072c <_sbrk+0x64>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d102      	bne.n	80006ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <_sbrk+0x64>)
 80006e6:	4a12      	ldr	r2, [pc, #72]	; (8000730 <_sbrk+0x68>)
 80006e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006ea:	4b10      	ldr	r3, [pc, #64]	; (800072c <_sbrk+0x64>)
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4413      	add	r3, r2
 80006f2:	693a      	ldr	r2, [r7, #16]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d207      	bcs.n	8000708 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006f8:	f004 fb38 	bl	8004d6c <__errno>
 80006fc:	4603      	mov	r3, r0
 80006fe:	220c      	movs	r2, #12
 8000700:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000702:	f04f 33ff 	mov.w	r3, #4294967295
 8000706:	e009      	b.n	800071c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000708:	4b08      	ldr	r3, [pc, #32]	; (800072c <_sbrk+0x64>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800070e:	4b07      	ldr	r3, [pc, #28]	; (800072c <_sbrk+0x64>)
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4413      	add	r3, r2
 8000716:	4a05      	ldr	r2, [pc, #20]	; (800072c <_sbrk+0x64>)
 8000718:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800071a:	68fb      	ldr	r3, [r7, #12]
}
 800071c:	4618      	mov	r0, r3
 800071e:	3718      	adds	r7, #24
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20005000 	.word	0x20005000
 8000728:	00000400 	.word	0x00000400
 800072c:	2000009c 	.word	0x2000009c
 8000730:	20000740 	.word	0x20000740

08000734 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr

08000740 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000740:	f7ff fff8 	bl	8000734 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000744:	480b      	ldr	r0, [pc, #44]	; (8000774 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000746:	490c      	ldr	r1, [pc, #48]	; (8000778 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000748:	4a0c      	ldr	r2, [pc, #48]	; (800077c <LoopFillZerobss+0x16>)
  movs r3, #0
 800074a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800074c:	e002      	b.n	8000754 <LoopCopyDataInit>

0800074e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800074e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000752:	3304      	adds	r3, #4

08000754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000758:	d3f9      	bcc.n	800074e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800075a:	4a09      	ldr	r2, [pc, #36]	; (8000780 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800075c:	4c09      	ldr	r4, [pc, #36]	; (8000784 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800075e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000760:	e001      	b.n	8000766 <LoopFillZerobss>

08000762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000764:	3204      	adds	r2, #4

08000766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000768:	d3fb      	bcc.n	8000762 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800076a:	f004 fb05 	bl	8004d78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800076e:	f7ff fd33 	bl	80001d8 <main>
  bx lr
 8000772:	4770      	bx	lr
  ldr r0, =_sdata
 8000774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000778:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800077c:	08005e78 	.word	0x08005e78
  ldr r2, =_sbss
 8000780:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000784:	20000740 	.word	0x20000740

08000788 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000788:	e7fe      	b.n	8000788 <ADC1_2_IRQHandler>

0800078a <ssd1306_Reset>:

#if defined(SSD1306_USE_I2C)

extern SSD1306_ADDR ssd1306_i2c_addr_var;

void ssd1306_Reset(void) {
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr
	...

08000798 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af04      	add	r7, sp, #16
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, ssd1306_i2c_addr_var, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <ssd1306_WriteCommand+0x30>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	b299      	uxth	r1, r3
 80007a8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ac:	9302      	str	r3, [sp, #8]
 80007ae:	2301      	movs	r3, #1
 80007b0:	9301      	str	r3, [sp, #4]
 80007b2:	1dfb      	adds	r3, r7, #7
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	2301      	movs	r3, #1
 80007b8:	2200      	movs	r2, #0
 80007ba:	4804      	ldr	r0, [pc, #16]	; (80007cc <ssd1306_WriteCommand+0x34>)
 80007bc:	f000 fe3c 	bl	8001438 <HAL_I2C_Mem_Write>
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	200006a0 	.word	0x200006a0
 80007cc:	20000604 	.word	0x20000604

080007d0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af04      	add	r7, sp, #16
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, ssd1306_i2c_addr_var, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80007da:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <ssd1306_WriteData+0x34>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	b299      	uxth	r1, r3
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	f04f 32ff 	mov.w	r2, #4294967295
 80007e8:	9202      	str	r2, [sp, #8]
 80007ea:	9301      	str	r3, [sp, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	2301      	movs	r3, #1
 80007f2:	2240      	movs	r2, #64	; 0x40
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <ssd1306_WriteData+0x38>)
 80007f6:	f000 fe1f 	bl	8001438 <HAL_I2C_Mem_Write>
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200006a0 	.word	0x200006a0
 8000808:	20000604 	.word	0x20000604

0800080c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000810:	f7ff ffbb 	bl	800078a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000814:	2064      	movs	r0, #100	; 0x64
 8000816:	f000 fa43 	bl	8000ca0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800081a:	2000      	movs	r0, #0
 800081c:	f000 f9f0 	bl	8000c00 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000820:	2020      	movs	r0, #32
 8000822:	f7ff ffb9 	bl	8000798 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000826:	2000      	movs	r0, #0
 8000828:	f7ff ffb6 	bl	8000798 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800082c:	20b0      	movs	r0, #176	; 0xb0
 800082e:	f7ff ffb3 	bl	8000798 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000832:	20c8      	movs	r0, #200	; 0xc8
 8000834:	f7ff ffb0 	bl	8000798 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000838:	2000      	movs	r0, #0
 800083a:	f7ff ffad 	bl	8000798 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800083e:	2010      	movs	r0, #16
 8000840:	f7ff ffaa 	bl	8000798 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000844:	2040      	movs	r0, #64	; 0x40
 8000846:	f7ff ffa7 	bl	8000798 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800084a:	20ff      	movs	r0, #255	; 0xff
 800084c:	f000 f9c4 	bl	8000bd8 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000850:	20a1      	movs	r0, #161	; 0xa1
 8000852:	f7ff ffa1 	bl	8000798 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000856:	20a6      	movs	r0, #166	; 0xa6
 8000858:	f7ff ff9e 	bl	8000798 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800085c:	20a8      	movs	r0, #168	; 0xa8
 800085e:	f7ff ff9b 	bl	8000798 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000862:	203f      	movs	r0, #63	; 0x3f
 8000864:	f7ff ff98 	bl	8000798 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000868:	20a4      	movs	r0, #164	; 0xa4
 800086a:	f7ff ff95 	bl	8000798 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800086e:	20d3      	movs	r0, #211	; 0xd3
 8000870:	f7ff ff92 	bl	8000798 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000874:	2000      	movs	r0, #0
 8000876:	f7ff ff8f 	bl	8000798 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800087a:	20d5      	movs	r0, #213	; 0xd5
 800087c:	f7ff ff8c 	bl	8000798 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000880:	20f0      	movs	r0, #240	; 0xf0
 8000882:	f7ff ff89 	bl	8000798 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000886:	20d9      	movs	r0, #217	; 0xd9
 8000888:	f7ff ff86 	bl	8000798 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800088c:	2022      	movs	r0, #34	; 0x22
 800088e:	f7ff ff83 	bl	8000798 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000892:	20da      	movs	r0, #218	; 0xda
 8000894:	f7ff ff80 	bl	8000798 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000898:	2012      	movs	r0, #18
 800089a:	f7ff ff7d 	bl	8000798 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800089e:	20db      	movs	r0, #219	; 0xdb
 80008a0:	f7ff ff7a 	bl	8000798 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80008a4:	2020      	movs	r0, #32
 80008a6:	f7ff ff77 	bl	8000798 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80008aa:	208d      	movs	r0, #141	; 0x8d
 80008ac:	f7ff ff74 	bl	8000798 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80008b0:	2014      	movs	r0, #20
 80008b2:	f7ff ff71 	bl	8000798 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80008b6:	2001      	movs	r0, #1
 80008b8:	f000 f9a2 	bl	8000c00 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80008bc:	2000      	movs	r0, #0
 80008be:	f000 f81f 	bl	8000900 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80008c2:	f000 f83f 	bl	8000944 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80008c6:	4b05      	ldr	r3, [pc, #20]	; (80008dc <ssd1306_Init+0xd0>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80008cc:	4b03      	ldr	r3, [pc, #12]	; (80008dc <ssd1306_Init+0xd0>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80008d2:	4b02      	ldr	r3, [pc, #8]	; (80008dc <ssd1306_Init+0xd0>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	711a      	strb	r2, [r3, #4]
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	200004a0 	.word	0x200004a0

080008e0 <ssd1306_Select>:

void ssd1306_Select(SSD1306_ADDR addr){
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
	ssd1306_i2c_addr_var = addr;
 80008ea:	4a04      	ldr	r2, [pc, #16]	; (80008fc <ssd1306_Select+0x1c>)
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	7013      	strb	r3, [r2, #0]
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	200006a0 	.word	0x200006a0

08000900 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	e00d      	b.n	800092c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d101      	bne.n	800091a <ssd1306_Fill+0x1a>
 8000916:	2100      	movs	r1, #0
 8000918:	e000      	b.n	800091c <ssd1306_Fill+0x1c>
 800091a:	21ff      	movs	r1, #255	; 0xff
 800091c:	4a08      	ldr	r2, [pc, #32]	; (8000940 <ssd1306_Fill+0x40>)
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	4413      	add	r3, r2
 8000922:	460a      	mov	r2, r1
 8000924:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	3301      	adds	r3, #1
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000932:	d3ed      	bcc.n	8000910 <ssd1306_Fill+0x10>
    }
}
 8000934:	bf00      	nop
 8000936:	bf00      	nop
 8000938:	3714      	adds	r7, #20
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr
 8000940:	200000a0 	.word	0x200000a0

08000944 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800094a:	2300      	movs	r3, #0
 800094c:	71fb      	strb	r3, [r7, #7]
 800094e:	e01e      	b.n	800098e <ssd1306_UpdateScreen+0x4a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	3b50      	subs	r3, #80	; 0x50
 8000954:	b2db      	uxtb	r3, r3
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff ff1e 	bl	8000798 <ssd1306_WriteCommand>
        if(ssd1306_i2c_addr_var == SH1106_bigOLED){
 800095c:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <ssd1306_UpdateScreen+0x5c>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b78      	cmp	r3, #120	; 0x78
 8000962:	d103      	bne.n	800096c <ssd1306_UpdateScreen+0x28>
            ssd1306_WriteCommand(0x00 + SH1106_X_OFFSET_LOWER);
 8000964:	2000      	movs	r0, #0
 8000966:	f7ff ff17 	bl	8000798 <ssd1306_WriteCommand>
 800096a:	e002      	b.n	8000972 <ssd1306_UpdateScreen+0x2e>
        }else{
        	ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800096c:	2002      	movs	r0, #2
 800096e:	f7ff ff13 	bl	8000798 <ssd1306_WriteCommand>
        }
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000972:	2010      	movs	r0, #16
 8000974:	f7ff ff10 	bl	8000798 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	01db      	lsls	r3, r3, #7
 800097c:	4a09      	ldr	r2, [pc, #36]	; (80009a4 <ssd1306_UpdateScreen+0x60>)
 800097e:	4413      	add	r3, r2
 8000980:	2180      	movs	r1, #128	; 0x80
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff ff24 	bl	80007d0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	3301      	adds	r3, #1
 800098c:	71fb      	strb	r3, [r7, #7]
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	2b07      	cmp	r3, #7
 8000992:	d9dd      	bls.n	8000950 <ssd1306_UpdateScreen+0xc>
    }
}
 8000994:	bf00      	nop
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	200006a0 	.word	0x200006a0
 80009a4:	200000a0 	.word	0x200000a0

080009a8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
 80009b2:	460b      	mov	r3, r1
 80009b4:	71bb      	strb	r3, [r7, #6]
 80009b6:	4613      	mov	r3, r2
 80009b8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80009ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	db3d      	blt.n	8000a3e <ssd1306_DrawPixel+0x96>
 80009c2:	79bb      	ldrb	r3, [r7, #6]
 80009c4:	2b3f      	cmp	r3, #63	; 0x3f
 80009c6:	d83a      	bhi.n	8000a3e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80009c8:	797b      	ldrb	r3, [r7, #5]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d11a      	bne.n	8000a04 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80009ce:	79fa      	ldrb	r2, [r7, #7]
 80009d0:	79bb      	ldrb	r3, [r7, #6]
 80009d2:	08db      	lsrs	r3, r3, #3
 80009d4:	b2d8      	uxtb	r0, r3
 80009d6:	4603      	mov	r3, r0
 80009d8:	01db      	lsls	r3, r3, #7
 80009da:	4413      	add	r3, r2
 80009dc:	4a1a      	ldr	r2, [pc, #104]	; (8000a48 <ssd1306_DrawPixel+0xa0>)
 80009de:	5cd3      	ldrb	r3, [r2, r3]
 80009e0:	b25a      	sxtb	r2, r3
 80009e2:	79bb      	ldrb	r3, [r7, #6]
 80009e4:	f003 0307 	and.w	r3, r3, #7
 80009e8:	2101      	movs	r1, #1
 80009ea:	fa01 f303 	lsl.w	r3, r1, r3
 80009ee:	b25b      	sxtb	r3, r3
 80009f0:	4313      	orrs	r3, r2
 80009f2:	b259      	sxtb	r1, r3
 80009f4:	79fa      	ldrb	r2, [r7, #7]
 80009f6:	4603      	mov	r3, r0
 80009f8:	01db      	lsls	r3, r3, #7
 80009fa:	4413      	add	r3, r2
 80009fc:	b2c9      	uxtb	r1, r1
 80009fe:	4a12      	ldr	r2, [pc, #72]	; (8000a48 <ssd1306_DrawPixel+0xa0>)
 8000a00:	54d1      	strb	r1, [r2, r3]
 8000a02:	e01d      	b.n	8000a40 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000a04:	79fa      	ldrb	r2, [r7, #7]
 8000a06:	79bb      	ldrb	r3, [r7, #6]
 8000a08:	08db      	lsrs	r3, r3, #3
 8000a0a:	b2d8      	uxtb	r0, r3
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	01db      	lsls	r3, r3, #7
 8000a10:	4413      	add	r3, r2
 8000a12:	4a0d      	ldr	r2, [pc, #52]	; (8000a48 <ssd1306_DrawPixel+0xa0>)
 8000a14:	5cd3      	ldrb	r3, [r2, r3]
 8000a16:	b25a      	sxtb	r2, r3
 8000a18:	79bb      	ldrb	r3, [r7, #6]
 8000a1a:	f003 0307 	and.w	r3, r3, #7
 8000a1e:	2101      	movs	r1, #1
 8000a20:	fa01 f303 	lsl.w	r3, r1, r3
 8000a24:	b25b      	sxtb	r3, r3
 8000a26:	43db      	mvns	r3, r3
 8000a28:	b25b      	sxtb	r3, r3
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	b259      	sxtb	r1, r3
 8000a2e:	79fa      	ldrb	r2, [r7, #7]
 8000a30:	4603      	mov	r3, r0
 8000a32:	01db      	lsls	r3, r3, #7
 8000a34:	4413      	add	r3, r2
 8000a36:	b2c9      	uxtb	r1, r1
 8000a38:	4a03      	ldr	r2, [pc, #12]	; (8000a48 <ssd1306_DrawPixel+0xa0>)
 8000a3a:	54d1      	strb	r1, [r2, r3]
 8000a3c:	e000      	b.n	8000a40 <ssd1306_DrawPixel+0x98>
        return;
 8000a3e:	bf00      	nop
    }
}
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr
 8000a48:	200000a0 	.word	0x200000a0

08000a4c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000a4c:	b590      	push	{r4, r7, lr}
 8000a4e:	b089      	sub	sp, #36	; 0x24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4604      	mov	r4, r0
 8000a54:	1d38      	adds	r0, r7, #4
 8000a56:	e880 0006 	stmia.w	r0, {r1, r2}
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	4623      	mov	r3, r4
 8000a5e:	73fb      	strb	r3, [r7, #15]
 8000a60:	4613      	mov	r3, r2
 8000a62:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000a64:	7bfb      	ldrb	r3, [r7, #15]
 8000a66:	2b1f      	cmp	r3, #31
 8000a68:	d902      	bls.n	8000a70 <ssd1306_WriteChar+0x24>
 8000a6a:	7bfb      	ldrb	r3, [r7, #15]
 8000a6c:	2b7e      	cmp	r3, #126	; 0x7e
 8000a6e:	d901      	bls.n	8000a74 <ssd1306_WriteChar+0x28>
        return 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	e06d      	b.n	8000b50 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000a74:	4b38      	ldr	r3, [pc, #224]	; (8000b58 <ssd1306_WriteChar+0x10c>)
 8000a76:	881b      	ldrh	r3, [r3, #0]
 8000a78:	461a      	mov	r2, r3
 8000a7a:	793b      	ldrb	r3, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	2b80      	cmp	r3, #128	; 0x80
 8000a80:	dc06      	bgt.n	8000a90 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000a82:	4b35      	ldr	r3, [pc, #212]	; (8000b58 <ssd1306_WriteChar+0x10c>)
 8000a84:	885b      	ldrh	r3, [r3, #2]
 8000a86:	461a      	mov	r2, r3
 8000a88:	797b      	ldrb	r3, [r7, #5]
 8000a8a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000a8c:	2b40      	cmp	r3, #64	; 0x40
 8000a8e:	dd01      	ble.n	8000a94 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	e05d      	b.n	8000b50 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]
 8000a98:	e04c      	b.n	8000b34 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000a9a:	68ba      	ldr	r2, [r7, #8]
 8000a9c:	7bfb      	ldrb	r3, [r7, #15]
 8000a9e:	3b20      	subs	r3, #32
 8000aa0:	7979      	ldrb	r1, [r7, #5]
 8000aa2:	fb01 f303 	mul.w	r3, r1, r3
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	69fb      	ldr	r3, [r7, #28]
 8000aaa:	440b      	add	r3, r1
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	4413      	add	r3, r2
 8000ab0:	881b      	ldrh	r3, [r3, #0]
 8000ab2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61bb      	str	r3, [r7, #24]
 8000ab8:	e034      	b.n	8000b24 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8000aba:	697a      	ldr	r2, [r7, #20]
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d012      	beq.n	8000af0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000aca:	4b23      	ldr	r3, [pc, #140]	; (8000b58 <ssd1306_WriteChar+0x10c>)
 8000acc:	881b      	ldrh	r3, [r3, #0]
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	4413      	add	r3, r2
 8000ad6:	b2d8      	uxtb	r0, r3
 8000ad8:	4b1f      	ldr	r3, [pc, #124]	; (8000b58 <ssd1306_WriteChar+0x10c>)
 8000ada:	885b      	ldrh	r3, [r3, #2]
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	4413      	add	r3, r2
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	7bba      	ldrb	r2, [r7, #14]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	f7ff ff5d 	bl	80009a8 <ssd1306_DrawPixel>
 8000aee:	e016      	b.n	8000b1e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000af0:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <ssd1306_WriteChar+0x10c>)
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	4413      	add	r3, r2
 8000afc:	b2d8      	uxtb	r0, r3
 8000afe:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <ssd1306_WriteChar+0x10c>)
 8000b00:	885b      	ldrh	r3, [r3, #2]
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	4413      	add	r3, r2
 8000b0a:	b2d9      	uxtb	r1, r3
 8000b0c:	7bbb      	ldrb	r3, [r7, #14]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	bf0c      	ite	eq
 8000b12:	2301      	moveq	r3, #1
 8000b14:	2300      	movne	r3, #0
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	461a      	mov	r2, r3
 8000b1a:	f7ff ff45 	bl	80009a8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000b1e:	69bb      	ldr	r3, [r7, #24]
 8000b20:	3301      	adds	r3, #1
 8000b22:	61bb      	str	r3, [r7, #24]
 8000b24:	793b      	ldrb	r3, [r7, #4]
 8000b26:	461a      	mov	r2, r3
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d3c5      	bcc.n	8000aba <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	3301      	adds	r3, #1
 8000b32:	61fb      	str	r3, [r7, #28]
 8000b34:	797b      	ldrb	r3, [r7, #5]
 8000b36:	461a      	mov	r2, r3
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d3ad      	bcc.n	8000a9a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <ssd1306_WriteChar+0x10c>)
 8000b40:	881a      	ldrh	r2, [r3, #0]
 8000b42:	793b      	ldrb	r3, [r7, #4]
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	4413      	add	r3, r2
 8000b48:	b29a      	uxth	r2, r3
 8000b4a:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <ssd1306_WriteChar+0x10c>)
 8000b4c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3724      	adds	r7, #36	; 0x24
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd90      	pop	{r4, r7, pc}
 8000b58:	200004a0 	.word	0x200004a0

08000b5c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	1d38      	adds	r0, r7, #4
 8000b66:	e880 0006 	stmia.w	r0, {r1, r2}
 8000b6a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8000b6c:	e012      	b.n	8000b94 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	7818      	ldrb	r0, [r3, #0]
 8000b72:	78fb      	ldrb	r3, [r7, #3]
 8000b74:	1d3a      	adds	r2, r7, #4
 8000b76:	ca06      	ldmia	r2, {r1, r2}
 8000b78:	f7ff ff68 	bl	8000a4c <ssd1306_WriteChar>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	461a      	mov	r2, r3
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d002      	beq.n	8000b8e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	e008      	b.n	8000ba0 <ssd1306_WriteString+0x44>
        }
        str++;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	3301      	adds	r3, #1
 8000b92:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d1e8      	bne.n	8000b6e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	781b      	ldrb	r3, [r3, #0]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3710      	adds	r7, #16
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	460a      	mov	r2, r1
 8000bb2:	71fb      	strb	r3, [r7, #7]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <ssd1306_SetCursor+0x2c>)
 8000bbe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000bc0:	79bb      	ldrb	r3, [r7, #6]
 8000bc2:	b29a      	uxth	r2, r3
 8000bc4:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <ssd1306_SetCursor+0x2c>)
 8000bc6:	805a      	strh	r2, [r3, #2]
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	200004a0 	.word	0x200004a0

08000bd8 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000be2:	2381      	movs	r3, #129	; 0x81
 8000be4:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000be6:	7bfb      	ldrb	r3, [r7, #15]
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff fdd5 	bl	8000798 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff fdd1 	bl	8000798 <ssd1306_WriteCommand>
}
 8000bf6:	bf00      	nop
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d005      	beq.n	8000c1c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000c10:	23af      	movs	r3, #175	; 0xaf
 8000c12:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <ssd1306_SetDisplayOn+0x38>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	715a      	strb	r2, [r3, #5]
 8000c1a:	e004      	b.n	8000c26 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000c1c:	23ae      	movs	r3, #174	; 0xae
 8000c1e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <ssd1306_SetDisplayOn+0x38>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fdb5 	bl	8000798 <ssd1306_WriteCommand>
}
 8000c2e:	bf00      	nop
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	200004a0 	.word	0x200004a0

08000c3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <HAL_Init+0x28>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a07      	ldr	r2, [pc, #28]	; (8000c64 <HAL_Init+0x28>)
 8000c46:	f043 0310 	orr.w	r3, r3, #16
 8000c4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c4c:	2003      	movs	r0, #3
 8000c4e:	f000 f8f5 	bl	8000e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c52:	200f      	movs	r0, #15
 8000c54:	f7ff fcc2 	bl	80005dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c58:	f7ff fc10 	bl	800047c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40022000 	.word	0x40022000

08000c68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <HAL_IncTick+0x1c>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	461a      	mov	r2, r3
 8000c72:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <HAL_IncTick+0x20>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4413      	add	r3, r2
 8000c78:	4a03      	ldr	r2, [pc, #12]	; (8000c88 <HAL_IncTick+0x20>)
 8000c7a:	6013      	str	r3, [r2, #0]
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr
 8000c84:	20000010 	.word	0x20000010
 8000c88:	200006ec 	.word	0x200006ec

08000c8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c90:	4b02      	ldr	r3, [pc, #8]	; (8000c9c <HAL_GetTick+0x10>)
 8000c92:	681b      	ldr	r3, [r3, #0]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr
 8000c9c:	200006ec 	.word	0x200006ec

08000ca0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ca8:	f7ff fff0 	bl	8000c8c <HAL_GetTick>
 8000cac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cb8:	d005      	beq.n	8000cc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cba:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <HAL_Delay+0x44>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cc6:	bf00      	nop
 8000cc8:	f7ff ffe0 	bl	8000c8c <HAL_GetTick>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d8f7      	bhi.n	8000cc8 <HAL_Delay+0x28>
  {
  }
}
 8000cd8:	bf00      	nop
 8000cda:	bf00      	nop
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000010 	.word	0x20000010

08000ce8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d04:	4013      	ands	r3, r2
 8000d06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d1a:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	60d3      	str	r3, [r2, #12]
}
 8000d20:	bf00      	nop
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d34:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <__NVIC_GetPriorityGrouping+0x18>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	0a1b      	lsrs	r3, r3, #8
 8000d3a:	f003 0307 	and.w	r3, r3, #7
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	db0b      	blt.n	8000d76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	f003 021f 	and.w	r2, r3, #31
 8000d64:	4906      	ldr	r1, [pc, #24]	; (8000d80 <__NVIC_EnableIRQ+0x34>)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	095b      	lsrs	r3, r3, #5
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr
 8000d80:	e000e100 	.word	0xe000e100

08000d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	6039      	str	r1, [r7, #0]
 8000d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	db0a      	blt.n	8000dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	b2da      	uxtb	r2, r3
 8000d9c:	490c      	ldr	r1, [pc, #48]	; (8000dd0 <__NVIC_SetPriority+0x4c>)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	0112      	lsls	r2, r2, #4
 8000da4:	b2d2      	uxtb	r2, r2
 8000da6:	440b      	add	r3, r1
 8000da8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dac:	e00a      	b.n	8000dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	4908      	ldr	r1, [pc, #32]	; (8000dd4 <__NVIC_SetPriority+0x50>)
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	f003 030f 	and.w	r3, r3, #15
 8000dba:	3b04      	subs	r3, #4
 8000dbc:	0112      	lsls	r2, r2, #4
 8000dbe:	b2d2      	uxtb	r2, r2
 8000dc0:	440b      	add	r3, r1
 8000dc2:	761a      	strb	r2, [r3, #24]
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bc80      	pop	{r7}
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000e100 	.word	0xe000e100
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b089      	sub	sp, #36	; 0x24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	f1c3 0307 	rsb	r3, r3, #7
 8000df2:	2b04      	cmp	r3, #4
 8000df4:	bf28      	it	cs
 8000df6:	2304      	movcs	r3, #4
 8000df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	2b06      	cmp	r3, #6
 8000e00:	d902      	bls.n	8000e08 <NVIC_EncodePriority+0x30>
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	3b03      	subs	r3, #3
 8000e06:	e000      	b.n	8000e0a <NVIC_EncodePriority+0x32>
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43da      	mvns	r2, r3
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e20:	f04f 31ff 	mov.w	r1, #4294967295
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2a:	43d9      	mvns	r1, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	4313      	orrs	r3, r2
         );
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3724      	adds	r7, #36	; 0x24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr

08000e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f7ff ff4f 	bl	8000ce8 <__NVIC_SetPriorityGrouping>
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b086      	sub	sp, #24
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	4603      	mov	r3, r0
 8000e5a:	60b9      	str	r1, [r7, #8]
 8000e5c:	607a      	str	r2, [r7, #4]
 8000e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e64:	f7ff ff64 	bl	8000d30 <__NVIC_GetPriorityGrouping>
 8000e68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	68b9      	ldr	r1, [r7, #8]
 8000e6e:	6978      	ldr	r0, [r7, #20]
 8000e70:	f7ff ffb2 	bl	8000dd8 <NVIC_EncodePriority>
 8000e74:	4602      	mov	r2, r0
 8000e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ff81 	bl	8000d84 <__NVIC_SetPriority>
}
 8000e82:	bf00      	nop
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	4603      	mov	r3, r0
 8000e92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ff57 	bl	8000d4c <__NVIC_EnableIRQ>
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
	...

08000ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b08b      	sub	sp, #44	; 0x2c
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eba:	e169      	b.n	8001190 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	69fa      	ldr	r2, [r7, #28]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	f040 8158 	bne.w	800118a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	4a9a      	ldr	r2, [pc, #616]	; (8001148 <HAL_GPIO_Init+0x2a0>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d05e      	beq.n	8000fa2 <HAL_GPIO_Init+0xfa>
 8000ee4:	4a98      	ldr	r2, [pc, #608]	; (8001148 <HAL_GPIO_Init+0x2a0>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d875      	bhi.n	8000fd6 <HAL_GPIO_Init+0x12e>
 8000eea:	4a98      	ldr	r2, [pc, #608]	; (800114c <HAL_GPIO_Init+0x2a4>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d058      	beq.n	8000fa2 <HAL_GPIO_Init+0xfa>
 8000ef0:	4a96      	ldr	r2, [pc, #600]	; (800114c <HAL_GPIO_Init+0x2a4>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d86f      	bhi.n	8000fd6 <HAL_GPIO_Init+0x12e>
 8000ef6:	4a96      	ldr	r2, [pc, #600]	; (8001150 <HAL_GPIO_Init+0x2a8>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d052      	beq.n	8000fa2 <HAL_GPIO_Init+0xfa>
 8000efc:	4a94      	ldr	r2, [pc, #592]	; (8001150 <HAL_GPIO_Init+0x2a8>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d869      	bhi.n	8000fd6 <HAL_GPIO_Init+0x12e>
 8000f02:	4a94      	ldr	r2, [pc, #592]	; (8001154 <HAL_GPIO_Init+0x2ac>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d04c      	beq.n	8000fa2 <HAL_GPIO_Init+0xfa>
 8000f08:	4a92      	ldr	r2, [pc, #584]	; (8001154 <HAL_GPIO_Init+0x2ac>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d863      	bhi.n	8000fd6 <HAL_GPIO_Init+0x12e>
 8000f0e:	4a92      	ldr	r2, [pc, #584]	; (8001158 <HAL_GPIO_Init+0x2b0>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d046      	beq.n	8000fa2 <HAL_GPIO_Init+0xfa>
 8000f14:	4a90      	ldr	r2, [pc, #576]	; (8001158 <HAL_GPIO_Init+0x2b0>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d85d      	bhi.n	8000fd6 <HAL_GPIO_Init+0x12e>
 8000f1a:	2b12      	cmp	r3, #18
 8000f1c:	d82a      	bhi.n	8000f74 <HAL_GPIO_Init+0xcc>
 8000f1e:	2b12      	cmp	r3, #18
 8000f20:	d859      	bhi.n	8000fd6 <HAL_GPIO_Init+0x12e>
 8000f22:	a201      	add	r2, pc, #4	; (adr r2, 8000f28 <HAL_GPIO_Init+0x80>)
 8000f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f28:	08000fa3 	.word	0x08000fa3
 8000f2c:	08000f7d 	.word	0x08000f7d
 8000f30:	08000f8f 	.word	0x08000f8f
 8000f34:	08000fd1 	.word	0x08000fd1
 8000f38:	08000fd7 	.word	0x08000fd7
 8000f3c:	08000fd7 	.word	0x08000fd7
 8000f40:	08000fd7 	.word	0x08000fd7
 8000f44:	08000fd7 	.word	0x08000fd7
 8000f48:	08000fd7 	.word	0x08000fd7
 8000f4c:	08000fd7 	.word	0x08000fd7
 8000f50:	08000fd7 	.word	0x08000fd7
 8000f54:	08000fd7 	.word	0x08000fd7
 8000f58:	08000fd7 	.word	0x08000fd7
 8000f5c:	08000fd7 	.word	0x08000fd7
 8000f60:	08000fd7 	.word	0x08000fd7
 8000f64:	08000fd7 	.word	0x08000fd7
 8000f68:	08000fd7 	.word	0x08000fd7
 8000f6c:	08000f85 	.word	0x08000f85
 8000f70:	08000f99 	.word	0x08000f99
 8000f74:	4a79      	ldr	r2, [pc, #484]	; (800115c <HAL_GPIO_Init+0x2b4>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d013      	beq.n	8000fa2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f7a:	e02c      	b.n	8000fd6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	623b      	str	r3, [r7, #32]
          break;
 8000f82:	e029      	b.n	8000fd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	3304      	adds	r3, #4
 8000f8a:	623b      	str	r3, [r7, #32]
          break;
 8000f8c:	e024      	b.n	8000fd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	3308      	adds	r3, #8
 8000f94:	623b      	str	r3, [r7, #32]
          break;
 8000f96:	e01f      	b.n	8000fd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	330c      	adds	r3, #12
 8000f9e:	623b      	str	r3, [r7, #32]
          break;
 8000fa0:	e01a      	b.n	8000fd8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d102      	bne.n	8000fb0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000faa:	2304      	movs	r3, #4
 8000fac:	623b      	str	r3, [r7, #32]
          break;
 8000fae:	e013      	b.n	8000fd8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d105      	bne.n	8000fc4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fb8:	2308      	movs	r3, #8
 8000fba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	69fa      	ldr	r2, [r7, #28]
 8000fc0:	611a      	str	r2, [r3, #16]
          break;
 8000fc2:	e009      	b.n	8000fd8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fc4:	2308      	movs	r3, #8
 8000fc6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	69fa      	ldr	r2, [r7, #28]
 8000fcc:	615a      	str	r2, [r3, #20]
          break;
 8000fce:	e003      	b.n	8000fd8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	623b      	str	r3, [r7, #32]
          break;
 8000fd4:	e000      	b.n	8000fd8 <HAL_GPIO_Init+0x130>
          break;
 8000fd6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	2bff      	cmp	r3, #255	; 0xff
 8000fdc:	d801      	bhi.n	8000fe2 <HAL_GPIO_Init+0x13a>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	e001      	b.n	8000fe6 <HAL_GPIO_Init+0x13e>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3304      	adds	r3, #4
 8000fe6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	2bff      	cmp	r3, #255	; 0xff
 8000fec:	d802      	bhi.n	8000ff4 <HAL_GPIO_Init+0x14c>
 8000fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	e002      	b.n	8000ffa <HAL_GPIO_Init+0x152>
 8000ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff6:	3b08      	subs	r3, #8
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	210f      	movs	r1, #15
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	fa01 f303 	lsl.w	r3, r1, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	401a      	ands	r2, r3
 800100c:	6a39      	ldr	r1, [r7, #32]
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	fa01 f303 	lsl.w	r3, r1, r3
 8001014:	431a      	orrs	r2, r3
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001022:	2b00      	cmp	r3, #0
 8001024:	f000 80b1 	beq.w	800118a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001028:	4b4d      	ldr	r3, [pc, #308]	; (8001160 <HAL_GPIO_Init+0x2b8>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	4a4c      	ldr	r2, [pc, #304]	; (8001160 <HAL_GPIO_Init+0x2b8>)
 800102e:	f043 0301 	orr.w	r3, r3, #1
 8001032:	6193      	str	r3, [r2, #24]
 8001034:	4b4a      	ldr	r3, [pc, #296]	; (8001160 <HAL_GPIO_Init+0x2b8>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001040:	4a48      	ldr	r2, [pc, #288]	; (8001164 <HAL_GPIO_Init+0x2bc>)
 8001042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001044:	089b      	lsrs	r3, r3, #2
 8001046:	3302      	adds	r3, #2
 8001048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800104c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800104e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001050:	f003 0303 	and.w	r3, r3, #3
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	220f      	movs	r2, #15
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	4013      	ands	r3, r2
 8001062:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a40      	ldr	r2, [pc, #256]	; (8001168 <HAL_GPIO_Init+0x2c0>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d013      	beq.n	8001094 <HAL_GPIO_Init+0x1ec>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a3f      	ldr	r2, [pc, #252]	; (800116c <HAL_GPIO_Init+0x2c4>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d00d      	beq.n	8001090 <HAL_GPIO_Init+0x1e8>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a3e      	ldr	r2, [pc, #248]	; (8001170 <HAL_GPIO_Init+0x2c8>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d007      	beq.n	800108c <HAL_GPIO_Init+0x1e4>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4a3d      	ldr	r2, [pc, #244]	; (8001174 <HAL_GPIO_Init+0x2cc>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d101      	bne.n	8001088 <HAL_GPIO_Init+0x1e0>
 8001084:	2303      	movs	r3, #3
 8001086:	e006      	b.n	8001096 <HAL_GPIO_Init+0x1ee>
 8001088:	2304      	movs	r3, #4
 800108a:	e004      	b.n	8001096 <HAL_GPIO_Init+0x1ee>
 800108c:	2302      	movs	r3, #2
 800108e:	e002      	b.n	8001096 <HAL_GPIO_Init+0x1ee>
 8001090:	2301      	movs	r3, #1
 8001092:	e000      	b.n	8001096 <HAL_GPIO_Init+0x1ee>
 8001094:	2300      	movs	r3, #0
 8001096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001098:	f002 0203 	and.w	r2, r2, #3
 800109c:	0092      	lsls	r2, r2, #2
 800109e:	4093      	lsls	r3, r2
 80010a0:	68fa      	ldr	r2, [r7, #12]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010a6:	492f      	ldr	r1, [pc, #188]	; (8001164 <HAL_GPIO_Init+0x2bc>)
 80010a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010aa:	089b      	lsrs	r3, r3, #2
 80010ac:	3302      	adds	r3, #2
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d006      	beq.n	80010ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010c0:	4b2d      	ldr	r3, [pc, #180]	; (8001178 <HAL_GPIO_Init+0x2d0>)
 80010c2:	689a      	ldr	r2, [r3, #8]
 80010c4:	492c      	ldr	r1, [pc, #176]	; (8001178 <HAL_GPIO_Init+0x2d0>)
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	608b      	str	r3, [r1, #8]
 80010cc:	e006      	b.n	80010dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010ce:	4b2a      	ldr	r3, [pc, #168]	; (8001178 <HAL_GPIO_Init+0x2d0>)
 80010d0:	689a      	ldr	r2, [r3, #8]
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	43db      	mvns	r3, r3
 80010d6:	4928      	ldr	r1, [pc, #160]	; (8001178 <HAL_GPIO_Init+0x2d0>)
 80010d8:	4013      	ands	r3, r2
 80010da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d006      	beq.n	80010f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010e8:	4b23      	ldr	r3, [pc, #140]	; (8001178 <HAL_GPIO_Init+0x2d0>)
 80010ea:	68da      	ldr	r2, [r3, #12]
 80010ec:	4922      	ldr	r1, [pc, #136]	; (8001178 <HAL_GPIO_Init+0x2d0>)
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	60cb      	str	r3, [r1, #12]
 80010f4:	e006      	b.n	8001104 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010f6:	4b20      	ldr	r3, [pc, #128]	; (8001178 <HAL_GPIO_Init+0x2d0>)
 80010f8:	68da      	ldr	r2, [r3, #12]
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	43db      	mvns	r3, r3
 80010fe:	491e      	ldr	r1, [pc, #120]	; (8001178 <HAL_GPIO_Init+0x2d0>)
 8001100:	4013      	ands	r3, r2
 8001102:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d006      	beq.n	800111e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001110:	4b19      	ldr	r3, [pc, #100]	; (8001178 <HAL_GPIO_Init+0x2d0>)
 8001112:	685a      	ldr	r2, [r3, #4]
 8001114:	4918      	ldr	r1, [pc, #96]	; (8001178 <HAL_GPIO_Init+0x2d0>)
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	4313      	orrs	r3, r2
 800111a:	604b      	str	r3, [r1, #4]
 800111c:	e006      	b.n	800112c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800111e:	4b16      	ldr	r3, [pc, #88]	; (8001178 <HAL_GPIO_Init+0x2d0>)
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	43db      	mvns	r3, r3
 8001126:	4914      	ldr	r1, [pc, #80]	; (8001178 <HAL_GPIO_Init+0x2d0>)
 8001128:	4013      	ands	r3, r2
 800112a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d021      	beq.n	800117c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001138:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <HAL_GPIO_Init+0x2d0>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	490e      	ldr	r1, [pc, #56]	; (8001178 <HAL_GPIO_Init+0x2d0>)
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	4313      	orrs	r3, r2
 8001142:	600b      	str	r3, [r1, #0]
 8001144:	e021      	b.n	800118a <HAL_GPIO_Init+0x2e2>
 8001146:	bf00      	nop
 8001148:	10320000 	.word	0x10320000
 800114c:	10310000 	.word	0x10310000
 8001150:	10220000 	.word	0x10220000
 8001154:	10210000 	.word	0x10210000
 8001158:	10120000 	.word	0x10120000
 800115c:	10110000 	.word	0x10110000
 8001160:	40021000 	.word	0x40021000
 8001164:	40010000 	.word	0x40010000
 8001168:	40010800 	.word	0x40010800
 800116c:	40010c00 	.word	0x40010c00
 8001170:	40011000 	.word	0x40011000
 8001174:	40011400 	.word	0x40011400
 8001178:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800117c:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <HAL_GPIO_Init+0x304>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	43db      	mvns	r3, r3
 8001184:	4909      	ldr	r1, [pc, #36]	; (80011ac <HAL_GPIO_Init+0x304>)
 8001186:	4013      	ands	r3, r2
 8001188:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800118a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118c:	3301      	adds	r3, #1
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	fa22 f303 	lsr.w	r3, r2, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	f47f ae8e 	bne.w	8000ebc <HAL_GPIO_Init+0x14>
  }
}
 80011a0:	bf00      	nop
 80011a2:	bf00      	nop
 80011a4:	372c      	adds	r7, #44	; 0x2c
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr
 80011ac:	40010400 	.word	0x40010400

080011b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d101      	bne.n	80011c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e12b      	b.n	800141a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d106      	bne.n	80011dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff f982 	bl	80004e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2224      	movs	r2, #36	; 0x24
 80011e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f022 0201 	bic.w	r2, r2, #1
 80011f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001202:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001212:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001214:	f001 f840 	bl	8002298 <HAL_RCC_GetPCLK1Freq>
 8001218:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	4a81      	ldr	r2, [pc, #516]	; (8001424 <HAL_I2C_Init+0x274>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d807      	bhi.n	8001234 <HAL_I2C_Init+0x84>
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4a80      	ldr	r2, [pc, #512]	; (8001428 <HAL_I2C_Init+0x278>)
 8001228:	4293      	cmp	r3, r2
 800122a:	bf94      	ite	ls
 800122c:	2301      	movls	r3, #1
 800122e:	2300      	movhi	r3, #0
 8001230:	b2db      	uxtb	r3, r3
 8001232:	e006      	b.n	8001242 <HAL_I2C_Init+0x92>
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4a7d      	ldr	r2, [pc, #500]	; (800142c <HAL_I2C_Init+0x27c>)
 8001238:	4293      	cmp	r3, r2
 800123a:	bf94      	ite	ls
 800123c:	2301      	movls	r3, #1
 800123e:	2300      	movhi	r3, #0
 8001240:	b2db      	uxtb	r3, r3
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e0e7      	b.n	800141a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	4a78      	ldr	r2, [pc, #480]	; (8001430 <HAL_I2C_Init+0x280>)
 800124e:	fba2 2303 	umull	r2, r3, r2, r3
 8001252:	0c9b      	lsrs	r3, r3, #18
 8001254:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	68ba      	ldr	r2, [r7, #8]
 8001266:	430a      	orrs	r2, r1
 8001268:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	6a1b      	ldr	r3, [r3, #32]
 8001270:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	4a6a      	ldr	r2, [pc, #424]	; (8001424 <HAL_I2C_Init+0x274>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d802      	bhi.n	8001284 <HAL_I2C_Init+0xd4>
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	3301      	adds	r3, #1
 8001282:	e009      	b.n	8001298 <HAL_I2C_Init+0xe8>
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800128a:	fb02 f303 	mul.w	r3, r2, r3
 800128e:	4a69      	ldr	r2, [pc, #420]	; (8001434 <HAL_I2C_Init+0x284>)
 8001290:	fba2 2303 	umull	r2, r3, r2, r3
 8001294:	099b      	lsrs	r3, r3, #6
 8001296:	3301      	adds	r3, #1
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	6812      	ldr	r2, [r2, #0]
 800129c:	430b      	orrs	r3, r1
 800129e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80012aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	495c      	ldr	r1, [pc, #368]	; (8001424 <HAL_I2C_Init+0x274>)
 80012b4:	428b      	cmp	r3, r1
 80012b6:	d819      	bhi.n	80012ec <HAL_I2C_Init+0x13c>
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	1e59      	subs	r1, r3, #1
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80012c6:	1c59      	adds	r1, r3, #1
 80012c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80012cc:	400b      	ands	r3, r1
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d00a      	beq.n	80012e8 <HAL_I2C_Init+0x138>
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	1e59      	subs	r1, r3, #1
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80012e0:	3301      	adds	r3, #1
 80012e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012e6:	e051      	b.n	800138c <HAL_I2C_Init+0x1dc>
 80012e8:	2304      	movs	r3, #4
 80012ea:	e04f      	b.n	800138c <HAL_I2C_Init+0x1dc>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d111      	bne.n	8001318 <HAL_I2C_Init+0x168>
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	1e58      	subs	r0, r3, #1
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6859      	ldr	r1, [r3, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	440b      	add	r3, r1
 8001302:	fbb0 f3f3 	udiv	r3, r0, r3
 8001306:	3301      	adds	r3, #1
 8001308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800130c:	2b00      	cmp	r3, #0
 800130e:	bf0c      	ite	eq
 8001310:	2301      	moveq	r3, #1
 8001312:	2300      	movne	r3, #0
 8001314:	b2db      	uxtb	r3, r3
 8001316:	e012      	b.n	800133e <HAL_I2C_Init+0x18e>
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	1e58      	subs	r0, r3, #1
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6859      	ldr	r1, [r3, #4]
 8001320:	460b      	mov	r3, r1
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	440b      	add	r3, r1
 8001326:	0099      	lsls	r1, r3, #2
 8001328:	440b      	add	r3, r1
 800132a:	fbb0 f3f3 	udiv	r3, r0, r3
 800132e:	3301      	adds	r3, #1
 8001330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001334:	2b00      	cmp	r3, #0
 8001336:	bf0c      	ite	eq
 8001338:	2301      	moveq	r3, #1
 800133a:	2300      	movne	r3, #0
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_I2C_Init+0x196>
 8001342:	2301      	movs	r3, #1
 8001344:	e022      	b.n	800138c <HAL_I2C_Init+0x1dc>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10e      	bne.n	800136c <HAL_I2C_Init+0x1bc>
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	1e58      	subs	r0, r3, #1
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6859      	ldr	r1, [r3, #4]
 8001356:	460b      	mov	r3, r1
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	440b      	add	r3, r1
 800135c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001360:	3301      	adds	r3, #1
 8001362:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800136a:	e00f      	b.n	800138c <HAL_I2C_Init+0x1dc>
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	1e58      	subs	r0, r3, #1
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6859      	ldr	r1, [r3, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	440b      	add	r3, r1
 800137a:	0099      	lsls	r1, r3, #2
 800137c:	440b      	add	r3, r1
 800137e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001382:	3301      	adds	r3, #1
 8001384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001388:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	6809      	ldr	r1, [r1, #0]
 8001390:	4313      	orrs	r3, r2
 8001392:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	69da      	ldr	r2, [r3, #28]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a1b      	ldr	r3, [r3, #32]
 80013a6:	431a      	orrs	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	430a      	orrs	r2, r1
 80013ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80013ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	6911      	ldr	r1, [r2, #16]
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	68d2      	ldr	r2, [r2, #12]
 80013c6:	4311      	orrs	r1, r2
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	6812      	ldr	r2, [r2, #0]
 80013cc:	430b      	orrs	r3, r1
 80013ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	695a      	ldr	r2, [r3, #20]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	431a      	orrs	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	430a      	orrs	r2, r1
 80013ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f042 0201 	orr.w	r2, r2, #1
 80013fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2220      	movs	r2, #32
 8001406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	000186a0 	.word	0x000186a0
 8001428:	001e847f 	.word	0x001e847f
 800142c:	003d08ff 	.word	0x003d08ff
 8001430:	431bde83 	.word	0x431bde83
 8001434:	10624dd3 	.word	0x10624dd3

08001438 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b088      	sub	sp, #32
 800143c:	af02      	add	r7, sp, #8
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	4608      	mov	r0, r1
 8001442:	4611      	mov	r1, r2
 8001444:	461a      	mov	r2, r3
 8001446:	4603      	mov	r3, r0
 8001448:	817b      	strh	r3, [r7, #10]
 800144a:	460b      	mov	r3, r1
 800144c:	813b      	strh	r3, [r7, #8]
 800144e:	4613      	mov	r3, r2
 8001450:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001452:	f7ff fc1b 	bl	8000c8c <HAL_GetTick>
 8001456:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2b20      	cmp	r3, #32
 8001462:	f040 80d9 	bne.w	8001618 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	2319      	movs	r3, #25
 800146c:	2201      	movs	r2, #1
 800146e:	496d      	ldr	r1, [pc, #436]	; (8001624 <HAL_I2C_Mem_Write+0x1ec>)
 8001470:	68f8      	ldr	r0, [r7, #12]
 8001472:	f000 f971 	bl	8001758 <I2C_WaitOnFlagUntilTimeout>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800147c:	2302      	movs	r3, #2
 800147e:	e0cc      	b.n	800161a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001486:	2b01      	cmp	r3, #1
 8001488:	d101      	bne.n	800148e <HAL_I2C_Mem_Write+0x56>
 800148a:	2302      	movs	r3, #2
 800148c:	e0c5      	b.n	800161a <HAL_I2C_Mem_Write+0x1e2>
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2201      	movs	r2, #1
 8001492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d007      	beq.n	80014b4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f042 0201 	orr.w	r2, r2, #1
 80014b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2221      	movs	r2, #33	; 0x21
 80014c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2240      	movs	r2, #64	; 0x40
 80014d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2200      	movs	r2, #0
 80014d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	6a3a      	ldr	r2, [r7, #32]
 80014de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80014e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	4a4d      	ldr	r2, [pc, #308]	; (8001628 <HAL_I2C_Mem_Write+0x1f0>)
 80014f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80014f6:	88f8      	ldrh	r0, [r7, #6]
 80014f8:	893a      	ldrh	r2, [r7, #8]
 80014fa:	8979      	ldrh	r1, [r7, #10]
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	9301      	str	r3, [sp, #4]
 8001500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	4603      	mov	r3, r0
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f000 f890 	bl	800162c <I2C_RequestMemoryWrite>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d052      	beq.n	80015b8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e081      	b.n	800161a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f000 fa36 	bl	800198c <I2C_WaitOnTXEFlagUntilTimeout>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d00d      	beq.n	8001542 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	2b04      	cmp	r3, #4
 800152c:	d107      	bne.n	800153e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800153c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e06b      	b.n	800161a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001546:	781a      	ldrb	r2, [r3, #0]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001552:	1c5a      	adds	r2, r3, #1
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800155c:	3b01      	subs	r3, #1
 800155e:	b29a      	uxth	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001568:	b29b      	uxth	r3, r3
 800156a:	3b01      	subs	r3, #1
 800156c:	b29a      	uxth	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	695b      	ldr	r3, [r3, #20]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	2b04      	cmp	r3, #4
 800157e:	d11b      	bne.n	80015b8 <HAL_I2C_Mem_Write+0x180>
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001584:	2b00      	cmp	r3, #0
 8001586:	d017      	beq.n	80015b8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158c:	781a      	ldrb	r2, [r3, #0]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001598:	1c5a      	adds	r2, r3, #1
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a2:	3b01      	subs	r3, #1
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	3b01      	subs	r3, #1
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1aa      	bne.n	8001516 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015c0:	697a      	ldr	r2, [r7, #20]
 80015c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015c4:	68f8      	ldr	r0, [r7, #12]
 80015c6:	f000 fa29 	bl	8001a1c <I2C_WaitOnBTFFlagUntilTimeout>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d00d      	beq.n	80015ec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d4:	2b04      	cmp	r3, #4
 80015d6:	d107      	bne.n	80015e8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e016      	b.n	800161a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2220      	movs	r2, #32
 8001600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2200      	movs	r2, #0
 8001610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001614:	2300      	movs	r3, #0
 8001616:	e000      	b.n	800161a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001618:	2302      	movs	r3, #2
  }
}
 800161a:	4618      	mov	r0, r3
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	00100002 	.word	0x00100002
 8001628:	ffff0000 	.word	0xffff0000

0800162c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af02      	add	r7, sp, #8
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	4608      	mov	r0, r1
 8001636:	4611      	mov	r1, r2
 8001638:	461a      	mov	r2, r3
 800163a:	4603      	mov	r3, r0
 800163c:	817b      	strh	r3, [r7, #10]
 800163e:	460b      	mov	r3, r1
 8001640:	813b      	strh	r3, [r7, #8]
 8001642:	4613      	mov	r3, r2
 8001644:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001654:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	6a3b      	ldr	r3, [r7, #32]
 800165c:	2200      	movs	r2, #0
 800165e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f000 f878 	bl	8001758 <I2C_WaitOnFlagUntilTimeout>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00d      	beq.n	800168a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001678:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800167c:	d103      	bne.n	8001686 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001684:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e05f      	b.n	800174a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800168a:	897b      	ldrh	r3, [r7, #10]
 800168c:	b2db      	uxtb	r3, r3
 800168e:	461a      	mov	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001698:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	6a3a      	ldr	r2, [r7, #32]
 800169e:	492d      	ldr	r1, [pc, #180]	; (8001754 <I2C_RequestMemoryWrite+0x128>)
 80016a0:	68f8      	ldr	r0, [r7, #12]
 80016a2:	f000 f8d3 	bl	800184c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e04c      	b.n	800174a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	617b      	str	r3, [r7, #20]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	617b      	str	r3, [r7, #20]
 80016c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016c8:	6a39      	ldr	r1, [r7, #32]
 80016ca:	68f8      	ldr	r0, [r7, #12]
 80016cc:	f000 f95e 	bl	800198c <I2C_WaitOnTXEFlagUntilTimeout>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d00d      	beq.n	80016f2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	2b04      	cmp	r3, #4
 80016dc:	d107      	bne.n	80016ee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e02b      	b.n	800174a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80016f2:	88fb      	ldrh	r3, [r7, #6]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d105      	bne.n	8001704 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80016f8:	893b      	ldrh	r3, [r7, #8]
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	611a      	str	r2, [r3, #16]
 8001702:	e021      	b.n	8001748 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001704:	893b      	ldrh	r3, [r7, #8]
 8001706:	0a1b      	lsrs	r3, r3, #8
 8001708:	b29b      	uxth	r3, r3
 800170a:	b2da      	uxtb	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001714:	6a39      	ldr	r1, [r7, #32]
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f000 f938 	bl	800198c <I2C_WaitOnTXEFlagUntilTimeout>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d00d      	beq.n	800173e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	2b04      	cmp	r3, #4
 8001728:	d107      	bne.n	800173a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001738:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e005      	b.n	800174a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800173e:	893b      	ldrh	r3, [r7, #8]
 8001740:	b2da      	uxtb	r2, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	00010002 	.word	0x00010002

08001758 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	603b      	str	r3, [r7, #0]
 8001764:	4613      	mov	r3, r2
 8001766:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001768:	e048      	b.n	80017fc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001770:	d044      	beq.n	80017fc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001772:	f7ff fa8b 	bl	8000c8c <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	429a      	cmp	r2, r3
 8001780:	d302      	bcc.n	8001788 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d139      	bne.n	80017fc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	0c1b      	lsrs	r3, r3, #16
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b01      	cmp	r3, #1
 8001790:	d10d      	bne.n	80017ae <I2C_WaitOnFlagUntilTimeout+0x56>
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	695b      	ldr	r3, [r3, #20]
 8001798:	43da      	mvns	r2, r3
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	4013      	ands	r3, r2
 800179e:	b29b      	uxth	r3, r3
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	bf0c      	ite	eq
 80017a4:	2301      	moveq	r3, #1
 80017a6:	2300      	movne	r3, #0
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	461a      	mov	r2, r3
 80017ac:	e00c      	b.n	80017c8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	43da      	mvns	r2, r3
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	4013      	ands	r3, r2
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	2b00      	cmp	r3, #0
 80017be:	bf0c      	ite	eq
 80017c0:	2301      	moveq	r3, #1
 80017c2:	2300      	movne	r3, #0
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	461a      	mov	r2, r3
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d116      	bne.n	80017fc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2200      	movs	r2, #0
 80017d2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2220      	movs	r2, #32
 80017d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e8:	f043 0220 	orr.w	r2, r3, #32
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e023      	b.n	8001844 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	0c1b      	lsrs	r3, r3, #16
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b01      	cmp	r3, #1
 8001804:	d10d      	bne.n	8001822 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	43da      	mvns	r2, r3
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	4013      	ands	r3, r2
 8001812:	b29b      	uxth	r3, r3
 8001814:	2b00      	cmp	r3, #0
 8001816:	bf0c      	ite	eq
 8001818:	2301      	moveq	r3, #1
 800181a:	2300      	movne	r3, #0
 800181c:	b2db      	uxtb	r3, r3
 800181e:	461a      	mov	r2, r3
 8001820:	e00c      	b.n	800183c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	43da      	mvns	r2, r3
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	4013      	ands	r3, r2
 800182e:	b29b      	uxth	r3, r3
 8001830:	2b00      	cmp	r3, #0
 8001832:	bf0c      	ite	eq
 8001834:	2301      	moveq	r3, #1
 8001836:	2300      	movne	r3, #0
 8001838:	b2db      	uxtb	r3, r3
 800183a:	461a      	mov	r2, r3
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	429a      	cmp	r2, r3
 8001840:	d093      	beq.n	800176a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
 8001858:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800185a:	e071      	b.n	8001940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800186a:	d123      	bne.n	80018b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800187a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001884:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2200      	movs	r2, #0
 800188a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2220      	movs	r2, #32
 8001890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a0:	f043 0204 	orr.w	r2, r3, #4
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e067      	b.n	8001984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ba:	d041      	beq.n	8001940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018bc:	f7ff f9e6 	bl	8000c8c <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d302      	bcc.n	80018d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d136      	bne.n	8001940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	0c1b      	lsrs	r3, r3, #16
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d10c      	bne.n	80018f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	43da      	mvns	r2, r3
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	4013      	ands	r3, r2
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	bf14      	ite	ne
 80018ee:	2301      	movne	r3, #1
 80018f0:	2300      	moveq	r3, #0
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	e00b      	b.n	800190e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	43da      	mvns	r2, r3
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	4013      	ands	r3, r2
 8001902:	b29b      	uxth	r3, r3
 8001904:	2b00      	cmp	r3, #0
 8001906:	bf14      	ite	ne
 8001908:	2301      	movne	r3, #1
 800190a:	2300      	moveq	r3, #0
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d016      	beq.n	8001940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2200      	movs	r2, #0
 8001916:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2220      	movs	r2, #32
 800191c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	f043 0220 	orr.w	r2, r3, #32
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e021      	b.n	8001984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	0c1b      	lsrs	r3, r3, #16
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b01      	cmp	r3, #1
 8001948:	d10c      	bne.n	8001964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	695b      	ldr	r3, [r3, #20]
 8001950:	43da      	mvns	r2, r3
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	4013      	ands	r3, r2
 8001956:	b29b      	uxth	r3, r3
 8001958:	2b00      	cmp	r3, #0
 800195a:	bf14      	ite	ne
 800195c:	2301      	movne	r3, #1
 800195e:	2300      	moveq	r3, #0
 8001960:	b2db      	uxtb	r3, r3
 8001962:	e00b      	b.n	800197c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	43da      	mvns	r2, r3
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	4013      	ands	r3, r2
 8001970:	b29b      	uxth	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	bf14      	ite	ne
 8001976:	2301      	movne	r3, #1
 8001978:	2300      	moveq	r3, #0
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2b00      	cmp	r3, #0
 800197e:	f47f af6d 	bne.w	800185c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001998:	e034      	b.n	8001a04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f000 f886 	bl	8001aac <I2C_IsAcknowledgeFailed>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e034      	b.n	8001a14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b0:	d028      	beq.n	8001a04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019b2:	f7ff f96b 	bl	8000c8c <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	68ba      	ldr	r2, [r7, #8]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d302      	bcc.n	80019c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d11d      	bne.n	8001a04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d2:	2b80      	cmp	r3, #128	; 0x80
 80019d4:	d016      	beq.n	8001a04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2200      	movs	r2, #0
 80019da:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2220      	movs	r2, #32
 80019e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f0:	f043 0220 	orr.w	r2, r3, #32
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e007      	b.n	8001a14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a0e:	2b80      	cmp	r3, #128	; 0x80
 8001a10:	d1c3      	bne.n	800199a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001a28:	e034      	b.n	8001a94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f000 f83e 	bl	8001aac <I2C_IsAcknowledgeFailed>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e034      	b.n	8001aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a40:	d028      	beq.n	8001a94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a42:	f7ff f923 	bl	8000c8c <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	68ba      	ldr	r2, [r7, #8]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d302      	bcc.n	8001a58 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d11d      	bne.n	8001a94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	d016      	beq.n	8001a94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2220      	movs	r2, #32
 8001a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	f043 0220 	orr.w	r2, r3, #32
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e007      	b.n	8001aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	f003 0304 	and.w	r3, r3, #4
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	d1c3      	bne.n	8001a2a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ac2:	d11b      	bne.n	8001afc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001acc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2220      	movs	r2, #32
 8001ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	f043 0204 	orr.w	r2, r3, #4
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e000      	b.n	8001afe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr

08001b08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e26c      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f000 8087 	beq.w	8001c36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b28:	4b92      	ldr	r3, [pc, #584]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 030c 	and.w	r3, r3, #12
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d00c      	beq.n	8001b4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b34:	4b8f      	ldr	r3, [pc, #572]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 030c 	and.w	r3, r3, #12
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d112      	bne.n	8001b66 <HAL_RCC_OscConfig+0x5e>
 8001b40:	4b8c      	ldr	r3, [pc, #560]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b4c:	d10b      	bne.n	8001b66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4e:	4b89      	ldr	r3, [pc, #548]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d06c      	beq.n	8001c34 <HAL_RCC_OscConfig+0x12c>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d168      	bne.n	8001c34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e246      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b6e:	d106      	bne.n	8001b7e <HAL_RCC_OscConfig+0x76>
 8001b70:	4b80      	ldr	r3, [pc, #512]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a7f      	ldr	r2, [pc, #508]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	e02e      	b.n	8001bdc <HAL_RCC_OscConfig+0xd4>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d10c      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x98>
 8001b86:	4b7b      	ldr	r3, [pc, #492]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a7a      	ldr	r2, [pc, #488]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	4b78      	ldr	r3, [pc, #480]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a77      	ldr	r2, [pc, #476]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001b98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	e01d      	b.n	8001bdc <HAL_RCC_OscConfig+0xd4>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ba8:	d10c      	bne.n	8001bc4 <HAL_RCC_OscConfig+0xbc>
 8001baa:	4b72      	ldr	r3, [pc, #456]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a71      	ldr	r2, [pc, #452]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	4b6f      	ldr	r3, [pc, #444]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a6e      	ldr	r2, [pc, #440]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	e00b      	b.n	8001bdc <HAL_RCC_OscConfig+0xd4>
 8001bc4:	4b6b      	ldr	r3, [pc, #428]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a6a      	ldr	r2, [pc, #424]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	4b68      	ldr	r3, [pc, #416]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a67      	ldr	r2, [pc, #412]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d013      	beq.n	8001c0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be4:	f7ff f852 	bl	8000c8c <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bec:	f7ff f84e 	bl	8000c8c <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b64      	cmp	r3, #100	; 0x64
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e1fa      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfe:	4b5d      	ldr	r3, [pc, #372]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0f0      	beq.n	8001bec <HAL_RCC_OscConfig+0xe4>
 8001c0a:	e014      	b.n	8001c36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0c:	f7ff f83e 	bl	8000c8c <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c14:	f7ff f83a 	bl	8000c8c <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b64      	cmp	r3, #100	; 0x64
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e1e6      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c26:	4b53      	ldr	r3, [pc, #332]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f0      	bne.n	8001c14 <HAL_RCC_OscConfig+0x10c>
 8001c32:	e000      	b.n	8001c36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d063      	beq.n	8001d0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c42:	4b4c      	ldr	r3, [pc, #304]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f003 030c 	and.w	r3, r3, #12
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00b      	beq.n	8001c66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c4e:	4b49      	ldr	r3, [pc, #292]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f003 030c 	and.w	r3, r3, #12
 8001c56:	2b08      	cmp	r3, #8
 8001c58:	d11c      	bne.n	8001c94 <HAL_RCC_OscConfig+0x18c>
 8001c5a:	4b46      	ldr	r3, [pc, #280]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d116      	bne.n	8001c94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c66:	4b43      	ldr	r3, [pc, #268]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d005      	beq.n	8001c7e <HAL_RCC_OscConfig+0x176>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d001      	beq.n	8001c7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e1ba      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7e:	4b3d      	ldr	r3, [pc, #244]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	4939      	ldr	r1, [pc, #228]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c92:	e03a      	b.n	8001d0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d020      	beq.n	8001cde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c9c:	4b36      	ldr	r3, [pc, #216]	; (8001d78 <HAL_RCC_OscConfig+0x270>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca2:	f7fe fff3 	bl	8000c8c <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001caa:	f7fe ffef 	bl	8000c8c <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e19b      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cbc:	4b2d      	ldr	r3, [pc, #180]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0f0      	beq.n	8001caa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc8:	4b2a      	ldr	r3, [pc, #168]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	4927      	ldr	r1, [pc, #156]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	600b      	str	r3, [r1, #0]
 8001cdc:	e015      	b.n	8001d0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cde:	4b26      	ldr	r3, [pc, #152]	; (8001d78 <HAL_RCC_OscConfig+0x270>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce4:	f7fe ffd2 	bl	8000c8c <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cec:	f7fe ffce 	bl	8000c8c <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e17a      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cfe:	4b1d      	ldr	r3, [pc, #116]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f0      	bne.n	8001cec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d03a      	beq.n	8001d8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d019      	beq.n	8001d52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d1e:	4b17      	ldr	r3, [pc, #92]	; (8001d7c <HAL_RCC_OscConfig+0x274>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d24:	f7fe ffb2 	bl	8000c8c <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d2c:	f7fe ffae 	bl	8000c8c <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e15a      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d3e:	4b0d      	ldr	r3, [pc, #52]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0f0      	beq.n	8001d2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d4a:	2001      	movs	r0, #1
 8001d4c:	f000 fafc 	bl	8002348 <RCC_Delay>
 8001d50:	e01c      	b.n	8001d8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d52:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <HAL_RCC_OscConfig+0x274>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d58:	f7fe ff98 	bl	8000c8c <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d5e:	e00f      	b.n	8001d80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d60:	f7fe ff94 	bl	8000c8c <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d908      	bls.n	8001d80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e140      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
 8001d72:	bf00      	nop
 8001d74:	40021000 	.word	0x40021000
 8001d78:	42420000 	.word	0x42420000
 8001d7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d80:	4b9e      	ldr	r3, [pc, #632]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1e9      	bne.n	8001d60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 80a6 	beq.w	8001ee6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d9e:	4b97      	ldr	r3, [pc, #604]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10d      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001daa:	4b94      	ldr	r3, [pc, #592]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	4a93      	ldr	r2, [pc, #588]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db4:	61d3      	str	r3, [r2, #28]
 8001db6:	4b91      	ldr	r3, [pc, #580]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc6:	4b8e      	ldr	r3, [pc, #568]	; (8002000 <HAL_RCC_OscConfig+0x4f8>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d118      	bne.n	8001e04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dd2:	4b8b      	ldr	r3, [pc, #556]	; (8002000 <HAL_RCC_OscConfig+0x4f8>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a8a      	ldr	r2, [pc, #552]	; (8002000 <HAL_RCC_OscConfig+0x4f8>)
 8001dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ddc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dde:	f7fe ff55 	bl	8000c8c <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de6:	f7fe ff51 	bl	8000c8c <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b64      	cmp	r3, #100	; 0x64
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e0fd      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df8:	4b81      	ldr	r3, [pc, #516]	; (8002000 <HAL_RCC_OscConfig+0x4f8>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0f0      	beq.n	8001de6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d106      	bne.n	8001e1a <HAL_RCC_OscConfig+0x312>
 8001e0c:	4b7b      	ldr	r3, [pc, #492]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	4a7a      	ldr	r2, [pc, #488]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e12:	f043 0301 	orr.w	r3, r3, #1
 8001e16:	6213      	str	r3, [r2, #32]
 8001e18:	e02d      	b.n	8001e76 <HAL_RCC_OscConfig+0x36e>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10c      	bne.n	8001e3c <HAL_RCC_OscConfig+0x334>
 8001e22:	4b76      	ldr	r3, [pc, #472]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e24:	6a1b      	ldr	r3, [r3, #32]
 8001e26:	4a75      	ldr	r2, [pc, #468]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e28:	f023 0301 	bic.w	r3, r3, #1
 8001e2c:	6213      	str	r3, [r2, #32]
 8001e2e:	4b73      	ldr	r3, [pc, #460]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	4a72      	ldr	r2, [pc, #456]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e34:	f023 0304 	bic.w	r3, r3, #4
 8001e38:	6213      	str	r3, [r2, #32]
 8001e3a:	e01c      	b.n	8001e76 <HAL_RCC_OscConfig+0x36e>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	2b05      	cmp	r3, #5
 8001e42:	d10c      	bne.n	8001e5e <HAL_RCC_OscConfig+0x356>
 8001e44:	4b6d      	ldr	r3, [pc, #436]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	4a6c      	ldr	r2, [pc, #432]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e4a:	f043 0304 	orr.w	r3, r3, #4
 8001e4e:	6213      	str	r3, [r2, #32]
 8001e50:	4b6a      	ldr	r3, [pc, #424]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	4a69      	ldr	r2, [pc, #420]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e56:	f043 0301 	orr.w	r3, r3, #1
 8001e5a:	6213      	str	r3, [r2, #32]
 8001e5c:	e00b      	b.n	8001e76 <HAL_RCC_OscConfig+0x36e>
 8001e5e:	4b67      	ldr	r3, [pc, #412]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	4a66      	ldr	r2, [pc, #408]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e64:	f023 0301 	bic.w	r3, r3, #1
 8001e68:	6213      	str	r3, [r2, #32]
 8001e6a:	4b64      	ldr	r3, [pc, #400]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
 8001e6e:	4a63      	ldr	r2, [pc, #396]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e70:	f023 0304 	bic.w	r3, r3, #4
 8001e74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d015      	beq.n	8001eaa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7e:	f7fe ff05 	bl	8000c8c <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e84:	e00a      	b.n	8001e9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e86:	f7fe ff01 	bl	8000c8c <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e0ab      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e9c:	4b57      	ldr	r3, [pc, #348]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0ee      	beq.n	8001e86 <HAL_RCC_OscConfig+0x37e>
 8001ea8:	e014      	b.n	8001ed4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eaa:	f7fe feef 	bl	8000c8c <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb0:	e00a      	b.n	8001ec8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb2:	f7fe feeb 	bl	8000c8c <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e095      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec8:	4b4c      	ldr	r3, [pc, #304]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1ee      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ed4:	7dfb      	ldrb	r3, [r7, #23]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d105      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eda:	4b48      	ldr	r3, [pc, #288]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	4a47      	ldr	r2, [pc, #284]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001ee0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ee4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 8081 	beq.w	8001ff2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ef0:	4b42      	ldr	r3, [pc, #264]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 030c 	and.w	r3, r3, #12
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	d061      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69db      	ldr	r3, [r3, #28]
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d146      	bne.n	8001f92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f04:	4b3f      	ldr	r3, [pc, #252]	; (8002004 <HAL_RCC_OscConfig+0x4fc>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0a:	f7fe febf 	bl	8000c8c <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f12:	f7fe febb 	bl	8000c8c <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e067      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f24:	4b35      	ldr	r3, [pc, #212]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1f0      	bne.n	8001f12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f38:	d108      	bne.n	8001f4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f3a:	4b30      	ldr	r3, [pc, #192]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	492d      	ldr	r1, [pc, #180]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f4c:	4b2b      	ldr	r3, [pc, #172]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a19      	ldr	r1, [r3, #32]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	430b      	orrs	r3, r1
 8001f5e:	4927      	ldr	r1, [pc, #156]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f64:	4b27      	ldr	r3, [pc, #156]	; (8002004 <HAL_RCC_OscConfig+0x4fc>)
 8001f66:	2201      	movs	r2, #1
 8001f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6a:	f7fe fe8f 	bl	8000c8c <HAL_GetTick>
 8001f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f72:	f7fe fe8b 	bl	8000c8c <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e037      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f84:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0f0      	beq.n	8001f72 <HAL_RCC_OscConfig+0x46a>
 8001f90:	e02f      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f92:	4b1c      	ldr	r3, [pc, #112]	; (8002004 <HAL_RCC_OscConfig+0x4fc>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f98:	f7fe fe78 	bl	8000c8c <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa0:	f7fe fe74 	bl	8000c8c <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e020      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb2:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f0      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x498>
 8001fbe:	e018      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d101      	bne.n	8001fcc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e013      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d106      	bne.n	8001fee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d001      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e000      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40007000 	.word	0x40007000
 8002004:	42420060 	.word	0x42420060

08002008 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e0d0      	b.n	80021be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800201c:	4b6a      	ldr	r3, [pc, #424]	; (80021c8 <HAL_RCC_ClockConfig+0x1c0>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	429a      	cmp	r2, r3
 8002028:	d910      	bls.n	800204c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202a:	4b67      	ldr	r3, [pc, #412]	; (80021c8 <HAL_RCC_ClockConfig+0x1c0>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f023 0207 	bic.w	r2, r3, #7
 8002032:	4965      	ldr	r1, [pc, #404]	; (80021c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	4313      	orrs	r3, r2
 8002038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800203a:	4b63      	ldr	r3, [pc, #396]	; (80021c8 <HAL_RCC_ClockConfig+0x1c0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	429a      	cmp	r2, r3
 8002046:	d001      	beq.n	800204c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e0b8      	b.n	80021be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d020      	beq.n	800209a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002064:	4b59      	ldr	r3, [pc, #356]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	4a58      	ldr	r2, [pc, #352]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 800206a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800206e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0308 	and.w	r3, r3, #8
 8002078:	2b00      	cmp	r3, #0
 800207a:	d005      	beq.n	8002088 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800207c:	4b53      	ldr	r3, [pc, #332]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	4a52      	ldr	r2, [pc, #328]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 8002082:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002086:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002088:	4b50      	ldr	r3, [pc, #320]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	494d      	ldr	r1, [pc, #308]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 8002096:	4313      	orrs	r3, r2
 8002098:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d040      	beq.n	8002128 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d107      	bne.n	80020be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ae:	4b47      	ldr	r3, [pc, #284]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d115      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e07f      	b.n	80021be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d107      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c6:	4b41      	ldr	r3, [pc, #260]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d109      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e073      	b.n	80021be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d6:	4b3d      	ldr	r3, [pc, #244]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e06b      	b.n	80021be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020e6:	4b39      	ldr	r3, [pc, #228]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f023 0203 	bic.w	r2, r3, #3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	4936      	ldr	r1, [pc, #216]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020f8:	f7fe fdc8 	bl	8000c8c <HAL_GetTick>
 80020fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fe:	e00a      	b.n	8002116 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002100:	f7fe fdc4 	bl	8000c8c <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	f241 3288 	movw	r2, #5000	; 0x1388
 800210e:	4293      	cmp	r3, r2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e053      	b.n	80021be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002116:	4b2d      	ldr	r3, [pc, #180]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f003 020c 	and.w	r2, r3, #12
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	429a      	cmp	r2, r3
 8002126:	d1eb      	bne.n	8002100 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002128:	4b27      	ldr	r3, [pc, #156]	; (80021c8 <HAL_RCC_ClockConfig+0x1c0>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d210      	bcs.n	8002158 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002136:	4b24      	ldr	r3, [pc, #144]	; (80021c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f023 0207 	bic.w	r2, r3, #7
 800213e:	4922      	ldr	r1, [pc, #136]	; (80021c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	4313      	orrs	r3, r2
 8002144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002146:	4b20      	ldr	r3, [pc, #128]	; (80021c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	429a      	cmp	r2, r3
 8002152:	d001      	beq.n	8002158 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e032      	b.n	80021be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	d008      	beq.n	8002176 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002164:	4b19      	ldr	r3, [pc, #100]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	4916      	ldr	r1, [pc, #88]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 8002172:	4313      	orrs	r3, r2
 8002174:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	2b00      	cmp	r3, #0
 8002180:	d009      	beq.n	8002196 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002182:	4b12      	ldr	r3, [pc, #72]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	490e      	ldr	r1, [pc, #56]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 8002192:	4313      	orrs	r3, r2
 8002194:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002196:	f000 f821 	bl	80021dc <HAL_RCC_GetSysClockFreq>
 800219a:	4602      	mov	r2, r0
 800219c:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	091b      	lsrs	r3, r3, #4
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	490a      	ldr	r1, [pc, #40]	; (80021d0 <HAL_RCC_ClockConfig+0x1c8>)
 80021a8:	5ccb      	ldrb	r3, [r1, r3]
 80021aa:	fa22 f303 	lsr.w	r3, r2, r3
 80021ae:	4a09      	ldr	r2, [pc, #36]	; (80021d4 <HAL_RCC_ClockConfig+0x1cc>)
 80021b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021b2:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <HAL_RCC_ClockConfig+0x1d0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe fa10 	bl	80005dc <HAL_InitTick>

  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40022000 	.word	0x40022000
 80021cc:	40021000 	.word	0x40021000
 80021d0:	080056a4 	.word	0x080056a4
 80021d4:	20000000 	.word	0x20000000
 80021d8:	2000000c 	.word	0x2000000c

080021dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	b087      	sub	sp, #28
 80021e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	2300      	movs	r3, #0
 80021e8:	60bb      	str	r3, [r7, #8]
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	2300      	movs	r3, #0
 80021f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021f6:	4b1e      	ldr	r3, [pc, #120]	; (8002270 <HAL_RCC_GetSysClockFreq+0x94>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b04      	cmp	r3, #4
 8002204:	d002      	beq.n	800220c <HAL_RCC_GetSysClockFreq+0x30>
 8002206:	2b08      	cmp	r3, #8
 8002208:	d003      	beq.n	8002212 <HAL_RCC_GetSysClockFreq+0x36>
 800220a:	e027      	b.n	800225c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800220c:	4b19      	ldr	r3, [pc, #100]	; (8002274 <HAL_RCC_GetSysClockFreq+0x98>)
 800220e:	613b      	str	r3, [r7, #16]
      break;
 8002210:	e027      	b.n	8002262 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	0c9b      	lsrs	r3, r3, #18
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	4a17      	ldr	r2, [pc, #92]	; (8002278 <HAL_RCC_GetSysClockFreq+0x9c>)
 800221c:	5cd3      	ldrb	r3, [r2, r3]
 800221e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d010      	beq.n	800224c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800222a:	4b11      	ldr	r3, [pc, #68]	; (8002270 <HAL_RCC_GetSysClockFreq+0x94>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	0c5b      	lsrs	r3, r3, #17
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	4a11      	ldr	r2, [pc, #68]	; (800227c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002236:	5cd3      	ldrb	r3, [r2, r3]
 8002238:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a0d      	ldr	r2, [pc, #52]	; (8002274 <HAL_RCC_GetSysClockFreq+0x98>)
 800223e:	fb02 f203 	mul.w	r2, r2, r3
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	fbb2 f3f3 	udiv	r3, r2, r3
 8002248:	617b      	str	r3, [r7, #20]
 800224a:	e004      	b.n	8002256 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a0c      	ldr	r2, [pc, #48]	; (8002280 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002250:	fb02 f303 	mul.w	r3, r2, r3
 8002254:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	613b      	str	r3, [r7, #16]
      break;
 800225a:	e002      	b.n	8002262 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800225c:	4b05      	ldr	r3, [pc, #20]	; (8002274 <HAL_RCC_GetSysClockFreq+0x98>)
 800225e:	613b      	str	r3, [r7, #16]
      break;
 8002260:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002262:	693b      	ldr	r3, [r7, #16]
}
 8002264:	4618      	mov	r0, r3
 8002266:	371c      	adds	r7, #28
 8002268:	46bd      	mov	sp, r7
 800226a:	bc80      	pop	{r7}
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	40021000 	.word	0x40021000
 8002274:	007a1200 	.word	0x007a1200
 8002278:	08005e28 	.word	0x08005e28
 800227c:	08005e38 	.word	0x08005e38
 8002280:	003d0900 	.word	0x003d0900

08002284 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002288:	4b02      	ldr	r3, [pc, #8]	; (8002294 <HAL_RCC_GetHCLKFreq+0x10>)
 800228a:	681b      	ldr	r3, [r3, #0]
}
 800228c:	4618      	mov	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr
 8002294:	20000000 	.word	0x20000000

08002298 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800229c:	f7ff fff2 	bl	8002284 <HAL_RCC_GetHCLKFreq>
 80022a0:	4602      	mov	r2, r0
 80022a2:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	0a1b      	lsrs	r3, r3, #8
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	4903      	ldr	r1, [pc, #12]	; (80022bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80022ae:	5ccb      	ldrb	r3, [r1, r3]
 80022b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40021000 	.word	0x40021000
 80022bc:	080056b4 	.word	0x080056b4

080022c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022c4:	f7ff ffde 	bl	8002284 <HAL_RCC_GetHCLKFreq>
 80022c8:	4602      	mov	r2, r0
 80022ca:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	0adb      	lsrs	r3, r3, #11
 80022d0:	f003 0307 	and.w	r3, r3, #7
 80022d4:	4903      	ldr	r1, [pc, #12]	; (80022e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022d6:	5ccb      	ldrb	r3, [r1, r3]
 80022d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022dc:	4618      	mov	r0, r3
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40021000 	.word	0x40021000
 80022e4:	080056b4 	.word	0x080056b4

080022e8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	220f      	movs	r2, #15
 80022f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80022f8:	4b11      	ldr	r3, [pc, #68]	; (8002340 <HAL_RCC_GetClockConfig+0x58>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 0203 	and.w	r2, r3, #3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002304:	4b0e      	ldr	r3, [pc, #56]	; (8002340 <HAL_RCC_GetClockConfig+0x58>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002310:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <HAL_RCC_GetClockConfig+0x58>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800231c:	4b08      	ldr	r3, [pc, #32]	; (8002340 <HAL_RCC_GetClockConfig+0x58>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	08db      	lsrs	r3, r3, #3
 8002322:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800232a:	4b06      	ldr	r3, [pc, #24]	; (8002344 <HAL_RCC_GetClockConfig+0x5c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0207 	and.w	r2, r3, #7
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr
 8002340:	40021000 	.word	0x40021000
 8002344:	40022000 	.word	0x40022000

08002348 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002350:	4b0a      	ldr	r3, [pc, #40]	; (800237c <RCC_Delay+0x34>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a0a      	ldr	r2, [pc, #40]	; (8002380 <RCC_Delay+0x38>)
 8002356:	fba2 2303 	umull	r2, r3, r2, r3
 800235a:	0a5b      	lsrs	r3, r3, #9
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	fb02 f303 	mul.w	r3, r2, r3
 8002362:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002364:	bf00      	nop
  }
  while (Delay --);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	1e5a      	subs	r2, r3, #1
 800236a:	60fa      	str	r2, [r7, #12]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1f9      	bne.n	8002364 <RCC_Delay+0x1c>
}
 8002370:	bf00      	nop
 8002372:	bf00      	nop
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr
 800237c:	20000000 	.word	0x20000000
 8002380:	10624dd3 	.word	0x10624dd3

08002384 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e041      	b.n	800241a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d106      	bne.n	80023b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 f839 	bl	8002422 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2202      	movs	r2, #2
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3304      	adds	r3, #4
 80023c0:	4619      	mov	r1, r3
 80023c2:	4610      	mov	r0, r2
 80023c4:	f000 fae4 	bl	8002990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr

08002434 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b01      	cmp	r3, #1
 8002446:	d001      	beq.n	800244c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e03a      	b.n	80024c2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68da      	ldr	r2, [r3, #12]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0201 	orr.w	r2, r2, #1
 8002462:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a18      	ldr	r2, [pc, #96]	; (80024cc <HAL_TIM_Base_Start_IT+0x98>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d00e      	beq.n	800248c <HAL_TIM_Base_Start_IT+0x58>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002476:	d009      	beq.n	800248c <HAL_TIM_Base_Start_IT+0x58>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a14      	ldr	r2, [pc, #80]	; (80024d0 <HAL_TIM_Base_Start_IT+0x9c>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d004      	beq.n	800248c <HAL_TIM_Base_Start_IT+0x58>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a13      	ldr	r2, [pc, #76]	; (80024d4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d111      	bne.n	80024b0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2b06      	cmp	r3, #6
 800249c:	d010      	beq.n	80024c0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f042 0201 	orr.w	r2, r2, #1
 80024ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ae:	e007      	b.n	80024c0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0201 	orr.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr
 80024cc:	40012c00 	.word	0x40012c00
 80024d0:	40000400 	.word	0x40000400
 80024d4:	40000800 	.word	0x40000800

080024d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e093      	b.n	8002614 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d106      	bne.n	8002506 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f7fe f82d 	bl	8000560 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2202      	movs	r2, #2
 800250a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	6812      	ldr	r2, [r2, #0]
 8002518:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800251c:	f023 0307 	bic.w	r3, r3, #7
 8002520:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	3304      	adds	r3, #4
 800252a:	4619      	mov	r1, r3
 800252c:	4610      	mov	r0, r2
 800252e:	f000 fa2f 	bl	8002990 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	4313      	orrs	r3, r2
 8002552:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800255a:	f023 0303 	bic.w	r3, r3, #3
 800255e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	021b      	lsls	r3, r3, #8
 800256a:	4313      	orrs	r3, r2
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	4313      	orrs	r3, r2
 8002570:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002578:	f023 030c 	bic.w	r3, r3, #12
 800257c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002584:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002588:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	021b      	lsls	r3, r3, #8
 8002594:	4313      	orrs	r3, r2
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	4313      	orrs	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	011a      	lsls	r2, r3, #4
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	031b      	lsls	r3, r3, #12
 80025a8:	4313      	orrs	r3, r2
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80025b6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	011b      	lsls	r3, r3, #4
 80025c2:	4313      	orrs	r3, r2
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3718      	adds	r7, #24
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800262c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002634:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800263c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002644:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d110      	bne.n	800266e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800264c:	7bfb      	ldrb	r3, [r7, #15]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d102      	bne.n	8002658 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002652:	7b7b      	ldrb	r3, [r7, #13]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d001      	beq.n	800265c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e069      	b.n	8002730 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2202      	movs	r2, #2
 8002660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2202      	movs	r2, #2
 8002668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800266c:	e031      	b.n	80026d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	2b04      	cmp	r3, #4
 8002672:	d110      	bne.n	8002696 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002674:	7bbb      	ldrb	r3, [r7, #14]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d102      	bne.n	8002680 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800267a:	7b3b      	ldrb	r3, [r7, #12]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d001      	beq.n	8002684 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e055      	b.n	8002730 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2202      	movs	r2, #2
 8002688:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2202      	movs	r2, #2
 8002690:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002694:	e01d      	b.n	80026d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002696:	7bfb      	ldrb	r3, [r7, #15]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d108      	bne.n	80026ae <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800269c:	7bbb      	ldrb	r3, [r7, #14]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d105      	bne.n	80026ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80026a2:	7b7b      	ldrb	r3, [r7, #13]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d102      	bne.n	80026ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80026a8:	7b3b      	ldrb	r3, [r7, #12]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d001      	beq.n	80026b2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e03e      	b.n	8002730 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2202      	movs	r2, #2
 80026b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2202      	movs	r2, #2
 80026be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2202      	movs	r2, #2
 80026c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2202      	movs	r2, #2
 80026ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <HAL_TIM_Encoder_Start+0xc4>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d008      	beq.n	80026f0 <HAL_TIM_Encoder_Start+0xd4>
 80026de:	e00f      	b.n	8002700 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2201      	movs	r2, #1
 80026e6:	2100      	movs	r1, #0
 80026e8:	4618      	mov	r0, r3
 80026ea:	f000 f9b3 	bl	8002a54 <TIM_CCxChannelCmd>
      break;
 80026ee:	e016      	b.n	800271e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2201      	movs	r2, #1
 80026f6:	2104      	movs	r1, #4
 80026f8:	4618      	mov	r0, r3
 80026fa:	f000 f9ab 	bl	8002a54 <TIM_CCxChannelCmd>
      break;
 80026fe:	e00e      	b.n	800271e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2201      	movs	r2, #1
 8002706:	2100      	movs	r1, #0
 8002708:	4618      	mov	r0, r3
 800270a:	f000 f9a3 	bl	8002a54 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2201      	movs	r2, #1
 8002714:	2104      	movs	r1, #4
 8002716:	4618      	mov	r0, r3
 8002718:	f000 f99c 	bl	8002a54 <TIM_CCxChannelCmd>
      break;
 800271c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f042 0201 	orr.w	r2, r2, #1
 800272c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b02      	cmp	r3, #2
 800274c:	d122      	bne.n	8002794 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b02      	cmp	r3, #2
 800275a:	d11b      	bne.n	8002794 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f06f 0202 	mvn.w	r2, #2
 8002764:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f8ed 	bl	800295a <HAL_TIM_IC_CaptureCallback>
 8002780:	e005      	b.n	800278e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f8e0 	bl	8002948 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 f8ef 	bl	800296c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d122      	bne.n	80027e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d11b      	bne.n	80027e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f06f 0204 	mvn.w	r2, #4
 80027b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2202      	movs	r2, #2
 80027be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f8c3 	bl	800295a <HAL_TIM_IC_CaptureCallback>
 80027d4:	e005      	b.n	80027e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f8b6 	bl	8002948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 f8c5 	bl	800296c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b08      	cmp	r3, #8
 80027f4:	d122      	bne.n	800283c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	f003 0308 	and.w	r3, r3, #8
 8002800:	2b08      	cmp	r3, #8
 8002802:	d11b      	bne.n	800283c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f06f 0208 	mvn.w	r2, #8
 800280c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2204      	movs	r2, #4
 8002812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	f003 0303 	and.w	r3, r3, #3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 f899 	bl	800295a <HAL_TIM_IC_CaptureCallback>
 8002828:	e005      	b.n	8002836 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f88c 	bl	8002948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 f89b 	bl	800296c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	f003 0310 	and.w	r3, r3, #16
 8002846:	2b10      	cmp	r3, #16
 8002848:	d122      	bne.n	8002890 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	f003 0310 	and.w	r3, r3, #16
 8002854:	2b10      	cmp	r3, #16
 8002856:	d11b      	bne.n	8002890 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f06f 0210 	mvn.w	r2, #16
 8002860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2208      	movs	r2, #8
 8002866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 f86f 	bl	800295a <HAL_TIM_IC_CaptureCallback>
 800287c:	e005      	b.n	800288a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f862 	bl	8002948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 f871 	bl	800296c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b01      	cmp	r3, #1
 800289c:	d10e      	bne.n	80028bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d107      	bne.n	80028bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f06f 0201 	mvn.w	r2, #1
 80028b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7fd fdc8 	bl	800044c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c6:	2b80      	cmp	r3, #128	; 0x80
 80028c8:	d10e      	bne.n	80028e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d4:	2b80      	cmp	r3, #128	; 0x80
 80028d6:	d107      	bne.n	80028e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f941 	bl	8002b6a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f2:	2b40      	cmp	r3, #64	; 0x40
 80028f4:	d10e      	bne.n	8002914 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002900:	2b40      	cmp	r3, #64	; 0x40
 8002902:	d107      	bne.n	8002914 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800290c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f835 	bl	800297e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	f003 0320 	and.w	r3, r3, #32
 800291e:	2b20      	cmp	r3, #32
 8002920:	d10e      	bne.n	8002940 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	2b20      	cmp	r3, #32
 800292e:	d107      	bne.n	8002940 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f06f 0220 	mvn.w	r2, #32
 8002938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f90c 	bl	8002b58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002940:	bf00      	nop
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	bc80      	pop	{r7}
 8002958:	4770      	bx	lr

0800295a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr

0800296c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr

0800297e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a29      	ldr	r2, [pc, #164]	; (8002a48 <TIM_Base_SetConfig+0xb8>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d00b      	beq.n	80029c0 <TIM_Base_SetConfig+0x30>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ae:	d007      	beq.n	80029c0 <TIM_Base_SetConfig+0x30>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a26      	ldr	r2, [pc, #152]	; (8002a4c <TIM_Base_SetConfig+0xbc>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d003      	beq.n	80029c0 <TIM_Base_SetConfig+0x30>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a25      	ldr	r2, [pc, #148]	; (8002a50 <TIM_Base_SetConfig+0xc0>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d108      	bne.n	80029d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a1c      	ldr	r2, [pc, #112]	; (8002a48 <TIM_Base_SetConfig+0xb8>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d00b      	beq.n	80029f2 <TIM_Base_SetConfig+0x62>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e0:	d007      	beq.n	80029f2 <TIM_Base_SetConfig+0x62>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a19      	ldr	r2, [pc, #100]	; (8002a4c <TIM_Base_SetConfig+0xbc>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d003      	beq.n	80029f2 <TIM_Base_SetConfig+0x62>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a18      	ldr	r2, [pc, #96]	; (8002a50 <TIM_Base_SetConfig+0xc0>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d108      	bne.n	8002a04 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a07      	ldr	r2, [pc, #28]	; (8002a48 <TIM_Base_SetConfig+0xb8>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d103      	bne.n	8002a38 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	691a      	ldr	r2, [r3, #16]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	615a      	str	r2, [r3, #20]
}
 8002a3e:	bf00      	nop
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr
 8002a48:	40012c00 	.word	0x40012c00
 8002a4c:	40000400 	.word	0x40000400
 8002a50:	40000800 	.word	0x40000800

08002a54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b087      	sub	sp, #28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	f003 031f 	and.w	r3, r3, #31
 8002a66:	2201      	movs	r2, #1
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6a1a      	ldr	r2, [r3, #32]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	43db      	mvns	r3, r3
 8002a76:	401a      	ands	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6a1a      	ldr	r2, [r3, #32]
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	f003 031f 	and.w	r3, r3, #31
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	621a      	str	r2, [r3, #32]
}
 8002a92:	bf00      	nop
 8002a94:	371c      	adds	r7, #28
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr

08002a9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d101      	bne.n	8002ab4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	e046      	b.n	8002b42 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ada:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a16      	ldr	r2, [pc, #88]	; (8002b4c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d00e      	beq.n	8002b16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b00:	d009      	beq.n	8002b16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a12      	ldr	r2, [pc, #72]	; (8002b50 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d004      	beq.n	8002b16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a10      	ldr	r2, [pc, #64]	; (8002b54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d10c      	bne.n	8002b30 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr
 8002b4c:	40012c00 	.word	0x40012c00
 8002b50:	40000400 	.word	0x40000400
 8002b54:	40000800 	.word	0x40000800

08002b58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr

08002b6a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b083      	sub	sp, #12
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr

08002b7c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08c      	sub	sp, #48	; 0x30
 8002b80:	af04      	add	r7, sp, #16
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
 8002b88:	603b      	str	r3, [r7, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f001 fab4 	bl	80040fc <pvPortMalloc>
 8002b94:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d013      	beq.n	8002bc4 <xTaskCreate+0x48>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002b9c:	207c      	movs	r0, #124	; 0x7c
 8002b9e:	f001 faad 	bl	80040fc <pvPortMalloc>
 8002ba2:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d008      	beq.n	8002bbc <xTaskCreate+0x40>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002baa:	227c      	movs	r2, #124	; 0x7c
 8002bac:	2100      	movs	r1, #0
 8002bae:	69f8      	ldr	r0, [r7, #28]
 8002bb0:	f002 f924 	bl	8004dfc <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	631a      	str	r2, [r3, #48]	; 0x30
 8002bba:	e005      	b.n	8002bc8 <xTaskCreate+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002bbc:	6978      	ldr	r0, [r7, #20]
 8002bbe:	f001 faaf 	bl	8004120 <vPortFree>
 8002bc2:	e001      	b.n	8002bc8 <xTaskCreate+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d013      	beq.n	8002bf6 <xTaskCreate+0x7a>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002bce:	2300      	movs	r3, #0
 8002bd0:	9303      	str	r3, [sp, #12]
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	9302      	str	r3, [sp, #8]
 8002bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd8:	9301      	str	r3, [sp, #4]
 8002bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bdc:	9300      	str	r3, [sp, #0]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	68b9      	ldr	r1, [r7, #8]
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f000 f80e 	bl	8002c06 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002bea:	69f8      	ldr	r0, [r7, #28]
 8002bec:	f000 f89a 	bl	8002d24 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	61bb      	str	r3, [r7, #24]
 8002bf4:	e002      	b.n	8002bfc <xTaskCreate+0x80>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bfa:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002bfc:	69bb      	ldr	r3, [r7, #24]
    }
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3720      	adds	r7, #32
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b088      	sub	sp, #32
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	60f8      	str	r0, [r7, #12]
 8002c0e:	60b9      	str	r1, [r7, #8]
 8002c10:	607a      	str	r2, [r7, #4]
 8002c12:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c16:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	21a5      	movs	r1, #165	; 0xa5
 8002c20:	f002 f8ec 	bl	8004dfc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	f023 0307 	bic.w	r3, r3, #7
 8002c3c:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00a      	beq.n	8002c5e <prvInitialiseNewTask+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c4c:	f383 8811 	msr	BASEPRI, r3
 8002c50:	f3bf 8f6f 	isb	sy
 8002c54:	f3bf 8f4f 	dsb	sy
 8002c58:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002c5a:	bf00      	nop
 8002c5c:	e7fe      	b.n	8002c5c <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d01e      	beq.n	8002ca2 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c64:	2300      	movs	r3, #0
 8002c66:	61fb      	str	r3, [r7, #28]
 8002c68:	e012      	b.n	8002c90 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	4413      	add	r3, r2
 8002c70:	7819      	ldrb	r1, [r3, #0]
 8002c72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	4413      	add	r3, r2
 8002c78:	3334      	adds	r3, #52	; 0x34
 8002c7a:	460a      	mov	r2, r1
 8002c7c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	4413      	add	r3, r2
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d006      	beq.n	8002c98 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	61fb      	str	r3, [r7, #28]
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	2b13      	cmp	r3, #19
 8002c94:	d9e9      	bls.n	8002c6a <prvInitialiseNewTask+0x64>
 8002c96:	e000      	b.n	8002c9a <prvInitialiseNewTask+0x94>
            {
                break;
 8002c98:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d90a      	bls.n	8002cbe <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cac:	f383 8811 	msr	BASEPRI, r3
 8002cb0:	f3bf 8f6f 	isb	sy
 8002cb4:	f3bf 8f4f 	dsb	sy
 8002cb8:	613b      	str	r3, [r7, #16]
    }
 8002cba:	bf00      	nop
 8002cbc:	e7fe      	b.n	8002cbc <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	d901      	bls.n	8002cc8 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002cc4:	2304      	movs	r3, #4
 8002cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ccc:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cd2:	651a      	str	r2, [r3, #80]	; 0x50
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd6:	3304      	adds	r3, #4
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f001 fa52 	bl	8004182 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce0:	3318      	adds	r3, #24
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f001 fa4d 	bl	8004182 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cec:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf0:	f1c3 0205 	rsb	r2, r3, #5
 8002cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cfc:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	68f9      	ldr	r1, [r7, #12]
 8002d02:	69b8      	ldr	r0, [r7, #24]
 8002d04:	f001 faaa 	bl	800425c <pxPortInitialiseStack>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0c:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d002      	beq.n	8002d1a <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d18:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002d1a:	bf00      	nop
 8002d1c:	3720      	adds	r7, #32
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
	...

08002d24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002d2c:	f001 fb88 	bl	8004440 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002d30:	4b41      	ldr	r3, [pc, #260]	; (8002e38 <prvAddNewTaskToReadyList+0x114>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	3301      	adds	r3, #1
 8002d36:	4a40      	ldr	r2, [pc, #256]	; (8002e38 <prvAddNewTaskToReadyList+0x114>)
 8002d38:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002d3a:	4b40      	ldr	r3, [pc, #256]	; (8002e3c <prvAddNewTaskToReadyList+0x118>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d109      	bne.n	8002d56 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002d42:	4a3e      	ldr	r2, [pc, #248]	; (8002e3c <prvAddNewTaskToReadyList+0x118>)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002d48:	4b3b      	ldr	r3, [pc, #236]	; (8002e38 <prvAddNewTaskToReadyList+0x114>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d110      	bne.n	8002d72 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002d50:	f000 fe2e 	bl	80039b0 <prvInitialiseTaskLists>
 8002d54:	e00d      	b.n	8002d72 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002d56:	4b3a      	ldr	r3, [pc, #232]	; (8002e40 <prvAddNewTaskToReadyList+0x11c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d109      	bne.n	8002d72 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002d5e:	4b37      	ldr	r3, [pc, #220]	; (8002e3c <prvAddNewTaskToReadyList+0x118>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d802      	bhi.n	8002d72 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002d6c:	4a33      	ldr	r2, [pc, #204]	; (8002e3c <prvAddNewTaskToReadyList+0x118>)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002d72:	4b34      	ldr	r3, [pc, #208]	; (8002e44 <prvAddNewTaskToReadyList+0x120>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	3301      	adds	r3, #1
 8002d78:	4a32      	ldr	r2, [pc, #200]	; (8002e44 <prvAddNewTaskToReadyList+0x120>)
 8002d7a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002d7c:	4b31      	ldr	r3, [pc, #196]	; (8002e44 <prvAddNewTaskToReadyList+0x120>)
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	649a      	str	r2, [r3, #72]	; 0x48
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d88:	4b2f      	ldr	r3, [pc, #188]	; (8002e48 <prvAddNewTaskToReadyList+0x124>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d903      	bls.n	8002d98 <prvAddNewTaskToReadyList+0x74>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d94:	4a2c      	ldr	r2, [pc, #176]	; (8002e48 <prvAddNewTaskToReadyList+0x124>)
 8002d96:	6013      	str	r3, [r2, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d9c:	492b      	ldr	r1, [pc, #172]	; (8002e4c <prvAddNewTaskToReadyList+0x128>)
 8002d9e:	4613      	mov	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	440b      	add	r3, r1
 8002da8:	3304      	adds	r3, #4
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	609a      	str	r2, [r3, #8]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	60da      	str	r2, [r3, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	3204      	adds	r2, #4
 8002dc4:	605a      	str	r2, [r3, #4]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	1d1a      	adds	r2, r3, #4
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	609a      	str	r2, [r3, #8]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	4a1c      	ldr	r2, [pc, #112]	; (8002e4c <prvAddNewTaskToReadyList+0x128>)
 8002ddc:	441a      	add	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	615a      	str	r2, [r3, #20]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de6:	4919      	ldr	r1, [pc, #100]	; (8002e4c <prvAddNewTaskToReadyList+0x128>)
 8002de8:	4613      	mov	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	1c59      	adds	r1, r3, #1
 8002df6:	4815      	ldr	r0, [pc, #84]	; (8002e4c <prvAddNewTaskToReadyList+0x128>)
 8002df8:	4613      	mov	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4413      	add	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4403      	add	r3, r0
 8002e02:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002e04:	f001 fb4c 	bl	80044a0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002e08:	4b0d      	ldr	r3, [pc, #52]	; (8002e40 <prvAddNewTaskToReadyList+0x11c>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00e      	beq.n	8002e2e <prvAddNewTaskToReadyList+0x10a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e10:	4b0a      	ldr	r3, [pc, #40]	; (8002e3c <prvAddNewTaskToReadyList+0x118>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d207      	bcs.n	8002e2e <prvAddNewTaskToReadyList+0x10a>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002e1e:	4b0c      	ldr	r3, [pc, #48]	; (8002e50 <prvAddNewTaskToReadyList+0x12c>)
 8002e20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	f3bf 8f4f 	dsb	sy
 8002e2a:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002e2e:	bf00      	nop
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	20000580 	.word	0x20000580
 8002e3c:	200004a8 	.word	0x200004a8
 8002e40:	2000058c 	.word	0x2000058c
 8002e44:	2000059c 	.word	0x2000059c
 8002e48:	20000588 	.word	0x20000588
 8002e4c:	200004ac 	.word	0x200004ac
 8002e50:	e000ed04 	.word	0xe000ed04

08002e54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002e5a:	4b20      	ldr	r3, [pc, #128]	; (8002edc <vTaskStartScheduler+0x88>)
 8002e5c:	9301      	str	r3, [sp, #4]
 8002e5e:	2300      	movs	r3, #0
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	2300      	movs	r3, #0
 8002e64:	2280      	movs	r2, #128	; 0x80
 8002e66:	491e      	ldr	r1, [pc, #120]	; (8002ee0 <vTaskStartScheduler+0x8c>)
 8002e68:	481e      	ldr	r0, [pc, #120]	; (8002ee4 <vTaskStartScheduler+0x90>)
 8002e6a:	f7ff fe87 	bl	8002b7c <xTaskCreate>
 8002e6e:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d102      	bne.n	8002e7c <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002e76:	f000 febf 	bl	8003bf8 <xTimerCreateTimerTask>
 8002e7a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d116      	bne.n	8002eb0 <vTaskStartScheduler+0x5c>
        __asm volatile
 8002e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e86:	f383 8811 	msr	BASEPRI, r3
 8002e8a:	f3bf 8f6f 	isb	sy
 8002e8e:	f3bf 8f4f 	dsb	sy
 8002e92:	60bb      	str	r3, [r7, #8]
    }
 8002e94:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002e96:	4b14      	ldr	r3, [pc, #80]	; (8002ee8 <vTaskStartScheduler+0x94>)
 8002e98:	f04f 32ff 	mov.w	r2, #4294967295
 8002e9c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002e9e:	4b13      	ldr	r3, [pc, #76]	; (8002eec <vTaskStartScheduler+0x98>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002ea4:	4b12      	ldr	r3, [pc, #72]	; (8002ef0 <vTaskStartScheduler+0x9c>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002eaa:	f001 fa57 	bl	800435c <xPortStartScheduler>
 8002eae:	e00e      	b.n	8002ece <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb6:	d10a      	bne.n	8002ece <vTaskStartScheduler+0x7a>
        __asm volatile
 8002eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ebc:	f383 8811 	msr	BASEPRI, r3
 8002ec0:	f3bf 8f6f 	isb	sy
 8002ec4:	f3bf 8f4f 	dsb	sy
 8002ec8:	607b      	str	r3, [r7, #4]
    }
 8002eca:	bf00      	nop
 8002ecc:	e7fe      	b.n	8002ecc <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002ece:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <vTaskStartScheduler+0xa0>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
}
 8002ed2:	bf00      	nop
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	200005a4 	.word	0x200005a4
 8002ee0:	0800568c 	.word	0x0800568c
 8002ee4:	080038c5 	.word	0x080038c5
 8002ee8:	200005a0 	.word	0x200005a0
 8002eec:	2000058c 	.word	0x2000058c
 8002ef0:	20000584 	.word	0x20000584
 8002ef4:	20000014 	.word	0x20000014

08002ef8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002efc:	4b04      	ldr	r3, [pc, #16]	; (8002f10 <vTaskSuspendAll+0x18>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	3301      	adds	r3, #1
 8002f02:	4a03      	ldr	r2, [pc, #12]	; (8002f10 <vTaskSuspendAll+0x18>)
 8002f04:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002f06:	bf00      	nop
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bc80      	pop	{r7}
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	200005a8 	.word	0x200005a8

08002f14 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

    static TickType_t prvGetExpectedIdleTime( void )
    {
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
        TickType_t xReturn;
        UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	603b      	str	r3, [r7, #0]
         * configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
         * task that are in the Ready state, even though the idle task is
         * running. */
        #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
        {
            if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8002f1e:	4b13      	ldr	r3, [pc, #76]	; (8002f6c <prvGetExpectedIdleTime+0x58>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <prvGetExpectedIdleTime+0x16>
            {
                uxHigherPriorityReadyTasks = pdTRUE;
 8002f26:	2301      	movs	r3, #1
 8002f28:	603b      	str	r3, [r7, #0]
                uxHigherPriorityReadyTasks = pdTRUE;
            }
        }
        #endif /* if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 ) */

        if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8002f2a:	4b11      	ldr	r3, [pc, #68]	; (8002f70 <prvGetExpectedIdleTime+0x5c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <prvGetExpectedIdleTime+0x26>
        {
            xReturn = 0;
 8002f34:	2300      	movs	r3, #0
 8002f36:	607b      	str	r3, [r7, #4]
 8002f38:	e012      	b.n	8002f60 <prvGetExpectedIdleTime+0x4c>
        }
        else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8002f3a:	4b0e      	ldr	r3, [pc, #56]	; (8002f74 <prvGetExpectedIdleTime+0x60>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d902      	bls.n	8002f48 <prvGetExpectedIdleTime+0x34>
        {
            /* There are other idle priority tasks in the ready state.  If
             * time slicing is used then the very next tick interrupt must be
             * processed. */
            xReturn = 0;
 8002f42:	2300      	movs	r3, #0
 8002f44:	607b      	str	r3, [r7, #4]
 8002f46:	e00b      	b.n	8002f60 <prvGetExpectedIdleTime+0x4c>
        }
        else if( uxHigherPriorityReadyTasks != pdFALSE )
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d002      	beq.n	8002f54 <prvGetExpectedIdleTime+0x40>
        {
            /* There are tasks in the Ready state that have a priority above the
             * idle priority.  This path can only be reached if
             * configUSE_PREEMPTION is 0. */
            xReturn = 0;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	607b      	str	r3, [r7, #4]
 8002f52:	e005      	b.n	8002f60 <prvGetExpectedIdleTime+0x4c>
        }
        else
        {
            xReturn = xNextTaskUnblockTime - xTickCount;
 8002f54:	4b08      	ldr	r3, [pc, #32]	; (8002f78 <prvGetExpectedIdleTime+0x64>)
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	4b08      	ldr	r3, [pc, #32]	; (8002f7c <prvGetExpectedIdleTime+0x68>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	607b      	str	r3, [r7, #4]
        }

        return xReturn;
 8002f60:	687b      	ldr	r3, [r7, #4]
    }
 8002f62:	4618      	mov	r0, r3
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bc80      	pop	{r7}
 8002f6a:	4770      	bx	lr
 8002f6c:	20000588 	.word	0x20000588
 8002f70:	200004a8 	.word	0x200004a8
 8002f74:	200004ac 	.word	0x200004ac
 8002f78:	200005a0 	.word	0x200005a0
 8002f7c:	20000584 	.word	0x20000584

08002f80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b088      	sub	sp, #32
 8002f84:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002f8e:	4b71      	ldr	r3, [pc, #452]	; (8003154 <xTaskResumeAll+0x1d4>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10a      	bne.n	8002fac <xTaskResumeAll+0x2c>
        __asm volatile
 8002f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9a:	f383 8811 	msr	BASEPRI, r3
 8002f9e:	f3bf 8f6f 	isb	sy
 8002fa2:	f3bf 8f4f 	dsb	sy
 8002fa6:	607b      	str	r3, [r7, #4]
    }
 8002fa8:	bf00      	nop
 8002faa:	e7fe      	b.n	8002faa <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002fac:	f001 fa48 	bl	8004440 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002fb0:	4b68      	ldr	r3, [pc, #416]	; (8003154 <xTaskResumeAll+0x1d4>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	4a67      	ldr	r2, [pc, #412]	; (8003154 <xTaskResumeAll+0x1d4>)
 8002fb8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fba:	4b66      	ldr	r3, [pc, #408]	; (8003154 <xTaskResumeAll+0x1d4>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f040 80c1 	bne.w	8003146 <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002fc4:	4b64      	ldr	r3, [pc, #400]	; (8003158 <xTaskResumeAll+0x1d8>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 80bc 	beq.w	8003146 <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fce:	e08b      	b.n	80030e8 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fd0:	4b62      	ldr	r3, [pc, #392]	; (800315c <xTaskResumeAll+0x1dc>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fdc:	613b      	str	r3, [r7, #16]
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	69fa      	ldr	r2, [r7, #28]
 8002fe4:	6a12      	ldr	r2, [r2, #32]
 8002fe6:	609a      	str	r2, [r3, #8]
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	69fa      	ldr	r2, [r7, #28]
 8002fee:	69d2      	ldr	r2, [r2, #28]
 8002ff0:	605a      	str	r2, [r3, #4]
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	3318      	adds	r3, #24
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d103      	bne.n	8003006 <xTaskResumeAll+0x86>
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	6a1a      	ldr	r2, [r3, #32]
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	605a      	str	r2, [r3, #4]
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	2200      	movs	r2, #0
 800300a:	629a      	str	r2, [r3, #40]	; 0x28
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	1e5a      	subs	r2, r3, #1
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	60fb      	str	r3, [r7, #12]
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	69fa      	ldr	r2, [r7, #28]
 8003022:	68d2      	ldr	r2, [r2, #12]
 8003024:	609a      	str	r2, [r3, #8]
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	69fa      	ldr	r2, [r7, #28]
 800302c:	6892      	ldr	r2, [r2, #8]
 800302e:	605a      	str	r2, [r3, #4]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	3304      	adds	r3, #4
 8003038:	429a      	cmp	r2, r3
 800303a:	d103      	bne.n	8003044 <xTaskResumeAll+0xc4>
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	605a      	str	r2, [r3, #4]
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	2200      	movs	r2, #0
 8003048:	615a      	str	r2, [r3, #20]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	1e5a      	subs	r2, r3, #1
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003058:	4b41      	ldr	r3, [pc, #260]	; (8003160 <xTaskResumeAll+0x1e0>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	429a      	cmp	r2, r3
 800305e:	d903      	bls.n	8003068 <xTaskResumeAll+0xe8>
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003064:	4a3e      	ldr	r2, [pc, #248]	; (8003160 <xTaskResumeAll+0x1e0>)
 8003066:	6013      	str	r3, [r2, #0]
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800306c:	493d      	ldr	r1, [pc, #244]	; (8003164 <xTaskResumeAll+0x1e4>)
 800306e:	4613      	mov	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	440b      	add	r3, r1
 8003078:	3304      	adds	r3, #4
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	60bb      	str	r3, [r7, #8]
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	609a      	str	r2, [r3, #8]
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	60da      	str	r2, [r3, #12]
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	69fa      	ldr	r2, [r7, #28]
 8003092:	3204      	adds	r2, #4
 8003094:	605a      	str	r2, [r3, #4]
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	1d1a      	adds	r2, r3, #4
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	609a      	str	r2, [r3, #8]
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a2:	4613      	mov	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4413      	add	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4a2e      	ldr	r2, [pc, #184]	; (8003164 <xTaskResumeAll+0x1e4>)
 80030ac:	441a      	add	r2, r3
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	615a      	str	r2, [r3, #20]
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b6:	492b      	ldr	r1, [pc, #172]	; (8003164 <xTaskResumeAll+0x1e4>)
 80030b8:	4613      	mov	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	1c59      	adds	r1, r3, #1
 80030c6:	4827      	ldr	r0, [pc, #156]	; (8003164 <xTaskResumeAll+0x1e4>)
 80030c8:	4613      	mov	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4413      	add	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4403      	add	r3, r0
 80030d2:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d8:	4b23      	ldr	r3, [pc, #140]	; (8003168 <xTaskResumeAll+0x1e8>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030de:	429a      	cmp	r2, r3
 80030e0:	d302      	bcc.n	80030e8 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 80030e2:	4b22      	ldr	r3, [pc, #136]	; (800316c <xTaskResumeAll+0x1ec>)
 80030e4:	2201      	movs	r2, #1
 80030e6:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030e8:	4b1c      	ldr	r3, [pc, #112]	; (800315c <xTaskResumeAll+0x1dc>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f47f af6f 	bne.w	8002fd0 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80030f8:	f000 fcd8 	bl	8003aac <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80030fc:	4b1c      	ldr	r3, [pc, #112]	; (8003170 <xTaskResumeAll+0x1f0>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d010      	beq.n	800312a <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003108:	f000 f89e 	bl	8003248 <xTaskIncrementTick>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d002      	beq.n	8003118 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 8003112:	4b16      	ldr	r3, [pc, #88]	; (800316c <xTaskResumeAll+0x1ec>)
 8003114:	2201      	movs	r2, #1
 8003116:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	3b01      	subs	r3, #1
 800311c:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1f1      	bne.n	8003108 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8003124:	4b12      	ldr	r3, [pc, #72]	; (8003170 <xTaskResumeAll+0x1f0>)
 8003126:	2200      	movs	r2, #0
 8003128:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800312a:	4b10      	ldr	r3, [pc, #64]	; (800316c <xTaskResumeAll+0x1ec>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d009      	beq.n	8003146 <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8003132:	2301      	movs	r3, #1
 8003134:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003136:	4b0f      	ldr	r3, [pc, #60]	; (8003174 <xTaskResumeAll+0x1f4>)
 8003138:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	f3bf 8f4f 	dsb	sy
 8003142:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003146:	f001 f9ab 	bl	80044a0 <vPortExitCritical>

    return xAlreadyYielded;
 800314a:	69bb      	ldr	r3, [r7, #24]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3720      	adds	r7, #32
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	200005a8 	.word	0x200005a8
 8003158:	20000580 	.word	0x20000580
 800315c:	20000540 	.word	0x20000540
 8003160:	20000588 	.word	0x20000588
 8003164:	200004ac 	.word	0x200004ac
 8003168:	200004a8 	.word	0x200004a8
 800316c:	20000594 	.word	0x20000594
 8003170:	20000590 	.word	0x20000590
 8003174:	e000ed04 	.word	0xe000ed04

08003178 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800317e:	4b04      	ldr	r3, [pc, #16]	; (8003190 <xTaskGetTickCount+0x18>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003184:	687b      	ldr	r3, [r7, #4]
}
 8003186:	4618      	mov	r0, r3
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	bc80      	pop	{r7}
 800318e:	4770      	bx	lr
 8003190:	20000584 	.word	0x20000584

08003194 <vTaskStepTick>:
 * implementations require configUSE_TICKLESS_IDLE to be set to a value other than
 * 1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

    void vTaskStepTick( TickType_t xTicksToJump )
    {
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
        /* Correct the tick count value after a period during which the tick
         * was suppressed.  Note this does *not* call the tick hook function for
         * each stepped tick. */
        configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800319c:	4b26      	ldr	r3, [pc, #152]	; (8003238 <vTaskStepTick+0xa4>)
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	441a      	add	r2, r3
 80031a4:	4b25      	ldr	r3, [pc, #148]	; (800323c <vTaskStepTick+0xa8>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d90a      	bls.n	80031c2 <vTaskStepTick+0x2e>
        __asm volatile
 80031ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b0:	f383 8811 	msr	BASEPRI, r3
 80031b4:	f3bf 8f6f 	isb	sy
 80031b8:	f3bf 8f4f 	dsb	sy
 80031bc:	617b      	str	r3, [r7, #20]
    }
 80031be:	bf00      	nop
 80031c0:	e7fe      	b.n	80031c0 <vTaskStepTick+0x2c>

        if( ( xTickCount + xTicksToJump ) == xNextTaskUnblockTime )
 80031c2:	4b1d      	ldr	r3, [pc, #116]	; (8003238 <vTaskStepTick+0xa4>)
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	441a      	add	r2, r3
 80031ca:	4b1c      	ldr	r3, [pc, #112]	; (800323c <vTaskStepTick+0xa8>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d128      	bne.n	8003224 <vTaskStepTick+0x90>
        {
            /* Arrange for xTickCount to reach xNextTaskUnblockTime in
             * xTaskIncrementTick() when the scheduler resumes.  This ensures
             * that any delayed tasks are resumed at the correct time. */
            configASSERT( uxSchedulerSuspended );
 80031d2:	4b1b      	ldr	r3, [pc, #108]	; (8003240 <vTaskStepTick+0xac>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10a      	bne.n	80031f0 <vTaskStepTick+0x5c>
        __asm volatile
 80031da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031de:	f383 8811 	msr	BASEPRI, r3
 80031e2:	f3bf 8f6f 	isb	sy
 80031e6:	f3bf 8f4f 	dsb	sy
 80031ea:	613b      	str	r3, [r7, #16]
    }
 80031ec:	bf00      	nop
 80031ee:	e7fe      	b.n	80031ee <vTaskStepTick+0x5a>
            configASSERT( xTicksToJump != ( TickType_t ) 0 );
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10a      	bne.n	800320c <vTaskStepTick+0x78>
        __asm volatile
 80031f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fa:	f383 8811 	msr	BASEPRI, r3
 80031fe:	f3bf 8f6f 	isb	sy
 8003202:	f3bf 8f4f 	dsb	sy
 8003206:	60fb      	str	r3, [r7, #12]
    }
 8003208:	bf00      	nop
 800320a:	e7fe      	b.n	800320a <vTaskStepTick+0x76>

            /* Prevent the tick interrupt modifying xPendedTicks simultaneously. */
            taskENTER_CRITICAL();
 800320c:	f001 f918 	bl	8004440 <vPortEnterCritical>
            {
                xPendedTicks++;
 8003210:	4b0c      	ldr	r3, [pc, #48]	; (8003244 <vTaskStepTick+0xb0>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	3301      	adds	r3, #1
 8003216:	4a0b      	ldr	r2, [pc, #44]	; (8003244 <vTaskStepTick+0xb0>)
 8003218:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800321a:	f001 f941 	bl	80044a0 <vPortExitCritical>
            xTicksToJump--;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	3b01      	subs	r3, #1
 8003222:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        xTickCount += xTicksToJump;
 8003224:	4b04      	ldr	r3, [pc, #16]	; (8003238 <vTaskStepTick+0xa4>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4413      	add	r3, r2
 800322c:	4a02      	ldr	r2, [pc, #8]	; (8003238 <vTaskStepTick+0xa4>)
 800322e:	6013      	str	r3, [r2, #0]
        traceINCREASE_TICK_COUNT( xTicksToJump );
    }
 8003230:	bf00      	nop
 8003232:	3718      	adds	r7, #24
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	20000584 	.word	0x20000584
 800323c:	200005a0 	.word	0x200005a0
 8003240:	200005a8 	.word	0x200005a8
 8003244:	20000590 	.word	0x20000590

08003248 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b08a      	sub	sp, #40	; 0x28
 800324c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800324e:	2300      	movs	r3, #0
 8003250:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003252:	4b7e      	ldr	r3, [pc, #504]	; (800344c <xTaskIncrementTick+0x204>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	f040 80ed 	bne.w	8003436 <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800325c:	4b7c      	ldr	r3, [pc, #496]	; (8003450 <xTaskIncrementTick+0x208>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	3301      	adds	r3, #1
 8003262:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003264:	4a7a      	ldr	r2, [pc, #488]	; (8003450 <xTaskIncrementTick+0x208>)
 8003266:	6a3b      	ldr	r3, [r7, #32]
 8003268:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800326a:	6a3b      	ldr	r3, [r7, #32]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d120      	bne.n	80032b2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003270:	4b78      	ldr	r3, [pc, #480]	; (8003454 <xTaskIncrementTick+0x20c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00a      	beq.n	8003290 <xTaskIncrementTick+0x48>
        __asm volatile
 800327a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327e:	f383 8811 	msr	BASEPRI, r3
 8003282:	f3bf 8f6f 	isb	sy
 8003286:	f3bf 8f4f 	dsb	sy
 800328a:	607b      	str	r3, [r7, #4]
    }
 800328c:	bf00      	nop
 800328e:	e7fe      	b.n	800328e <xTaskIncrementTick+0x46>
 8003290:	4b70      	ldr	r3, [pc, #448]	; (8003454 <xTaskIncrementTick+0x20c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	61fb      	str	r3, [r7, #28]
 8003296:	4b70      	ldr	r3, [pc, #448]	; (8003458 <xTaskIncrementTick+0x210>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a6e      	ldr	r2, [pc, #440]	; (8003454 <xTaskIncrementTick+0x20c>)
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	4a6e      	ldr	r2, [pc, #440]	; (8003458 <xTaskIncrementTick+0x210>)
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	6013      	str	r3, [r2, #0]
 80032a4:	4b6d      	ldr	r3, [pc, #436]	; (800345c <xTaskIncrementTick+0x214>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	3301      	adds	r3, #1
 80032aa:	4a6c      	ldr	r2, [pc, #432]	; (800345c <xTaskIncrementTick+0x214>)
 80032ac:	6013      	str	r3, [r2, #0]
 80032ae:	f000 fbfd 	bl	8003aac <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80032b2:	4b6b      	ldr	r3, [pc, #428]	; (8003460 <xTaskIncrementTick+0x218>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6a3a      	ldr	r2, [r7, #32]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	f0c0 80a7 	bcc.w	800340c <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032be:	4b65      	ldr	r3, [pc, #404]	; (8003454 <xTaskIncrementTick+0x20c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d104      	bne.n	80032d2 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032c8:	4b65      	ldr	r3, [pc, #404]	; (8003460 <xTaskIncrementTick+0x218>)
 80032ca:	f04f 32ff 	mov.w	r2, #4294967295
 80032ce:	601a      	str	r2, [r3, #0]
                    break;
 80032d0:	e09c      	b.n	800340c <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032d2:	4b60      	ldr	r3, [pc, #384]	; (8003454 <xTaskIncrementTick+0x20c>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80032e2:	6a3a      	ldr	r2, [r7, #32]
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d203      	bcs.n	80032f2 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80032ea:	4a5d      	ldr	r2, [pc, #372]	; (8003460 <xTaskIncrementTick+0x218>)
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80032f0:	e08c      	b.n	800340c <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	613b      	str	r3, [r7, #16]
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	68d2      	ldr	r2, [r2, #12]
 8003300:	609a      	str	r2, [r3, #8]
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	6892      	ldr	r2, [r2, #8]
 800330a:	605a      	str	r2, [r3, #4]
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	3304      	adds	r3, #4
 8003314:	429a      	cmp	r2, r3
 8003316:	d103      	bne.n	8003320 <xTaskIncrementTick+0xd8>
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	68da      	ldr	r2, [r3, #12]
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	605a      	str	r2, [r3, #4]
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	2200      	movs	r2, #0
 8003324:	615a      	str	r2, [r3, #20]
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	1e5a      	subs	r2, r3, #1
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	2b00      	cmp	r3, #0
 8003336:	d01e      	beq.n	8003376 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	6a12      	ldr	r2, [r2, #32]
 8003346:	609a      	str	r2, [r3, #8]
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	69d2      	ldr	r2, [r2, #28]
 8003350:	605a      	str	r2, [r3, #4]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	3318      	adds	r3, #24
 800335a:	429a      	cmp	r2, r3
 800335c:	d103      	bne.n	8003366 <xTaskIncrementTick+0x11e>
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	6a1a      	ldr	r2, [r3, #32]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	605a      	str	r2, [r3, #4]
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	2200      	movs	r2, #0
 800336a:	629a      	str	r2, [r3, #40]	; 0x28
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	1e5a      	subs	r2, r3, #1
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800337a:	4b3a      	ldr	r3, [pc, #232]	; (8003464 <xTaskIncrementTick+0x21c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d903      	bls.n	800338a <xTaskIncrementTick+0x142>
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003386:	4a37      	ldr	r2, [pc, #220]	; (8003464 <xTaskIncrementTick+0x21c>)
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800338e:	4936      	ldr	r1, [pc, #216]	; (8003468 <xTaskIncrementTick+0x220>)
 8003390:	4613      	mov	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4413      	add	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	3304      	adds	r3, #4
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	60bb      	str	r3, [r7, #8]
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	609a      	str	r2, [r3, #8]
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	689a      	ldr	r2, [r3, #8]
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	60da      	str	r2, [r3, #12]
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	3204      	adds	r2, #4
 80033b6:	605a      	str	r2, [r3, #4]
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	1d1a      	adds	r2, r3, #4
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	609a      	str	r2, [r3, #8]
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c4:	4613      	mov	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4a26      	ldr	r2, [pc, #152]	; (8003468 <xTaskIncrementTick+0x220>)
 80033ce:	441a      	add	r2, r3
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	615a      	str	r2, [r3, #20]
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d8:	4923      	ldr	r1, [pc, #140]	; (8003468 <xTaskIncrementTick+0x220>)
 80033da:	4613      	mov	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4413      	add	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	440b      	add	r3, r1
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	1c59      	adds	r1, r3, #1
 80033e8:	481f      	ldr	r0, [pc, #124]	; (8003468 <xTaskIncrementTick+0x220>)
 80033ea:	4613      	mov	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4403      	add	r3, r0
 80033f4:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033fa:	4b1c      	ldr	r3, [pc, #112]	; (800346c <xTaskIncrementTick+0x224>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003400:	429a      	cmp	r2, r3
 8003402:	f67f af5c 	bls.w	80032be <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8003406:	2301      	movs	r3, #1
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800340a:	e758      	b.n	80032be <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800340c:	4b17      	ldr	r3, [pc, #92]	; (800346c <xTaskIncrementTick+0x224>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003412:	4915      	ldr	r1, [pc, #84]	; (8003468 <xTaskIncrementTick+0x220>)
 8003414:	4613      	mov	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d901      	bls.n	8003428 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8003424:	2301      	movs	r3, #1
 8003426:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8003428:	4b11      	ldr	r3, [pc, #68]	; (8003470 <xTaskIncrementTick+0x228>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d007      	beq.n	8003440 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8003430:	2301      	movs	r3, #1
 8003432:	627b      	str	r3, [r7, #36]	; 0x24
 8003434:	e004      	b.n	8003440 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003436:	4b0f      	ldr	r3, [pc, #60]	; (8003474 <xTaskIncrementTick+0x22c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	3301      	adds	r3, #1
 800343c:	4a0d      	ldr	r2, [pc, #52]	; (8003474 <xTaskIncrementTick+0x22c>)
 800343e:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003442:	4618      	mov	r0, r3
 8003444:	3728      	adds	r7, #40	; 0x28
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	200005a8 	.word	0x200005a8
 8003450:	20000584 	.word	0x20000584
 8003454:	20000538 	.word	0x20000538
 8003458:	2000053c 	.word	0x2000053c
 800345c:	20000598 	.word	0x20000598
 8003460:	200005a0 	.word	0x200005a0
 8003464:	20000588 	.word	0x20000588
 8003468:	200004ac 	.word	0x200004ac
 800346c:	200004a8 	.word	0x200004a8
 8003470:	20000594 	.word	0x20000594
 8003474:	20000590 	.word	0x20000590

08003478 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800347e:	4b27      	ldr	r3, [pc, #156]	; (800351c <vTaskSwitchContext+0xa4>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003486:	4b26      	ldr	r3, [pc, #152]	; (8003520 <vTaskSwitchContext+0xa8>)
 8003488:	2201      	movs	r2, #1
 800348a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800348c:	e041      	b.n	8003512 <vTaskSwitchContext+0x9a>
        xYieldPending = pdFALSE;
 800348e:	4b24      	ldr	r3, [pc, #144]	; (8003520 <vTaskSwitchContext+0xa8>)
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003494:	4b23      	ldr	r3, [pc, #140]	; (8003524 <vTaskSwitchContext+0xac>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	e010      	b.n	80034be <vTaskSwitchContext+0x46>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10a      	bne.n	80034b8 <vTaskSwitchContext+0x40>
        __asm volatile
 80034a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a6:	f383 8811 	msr	BASEPRI, r3
 80034aa:	f3bf 8f6f 	isb	sy
 80034ae:	f3bf 8f4f 	dsb	sy
 80034b2:	607b      	str	r3, [r7, #4]
    }
 80034b4:	bf00      	nop
 80034b6:	e7fe      	b.n	80034b6 <vTaskSwitchContext+0x3e>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	60fb      	str	r3, [r7, #12]
 80034be:	491a      	ldr	r1, [pc, #104]	; (8003528 <vTaskSwitchContext+0xb0>)
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	4613      	mov	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0e4      	beq.n	800349c <vTaskSwitchContext+0x24>
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	4613      	mov	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4413      	add	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4a12      	ldr	r2, [pc, #72]	; (8003528 <vTaskSwitchContext+0xb0>)
 80034de:	4413      	add	r3, r2
 80034e0:	60bb      	str	r3, [r7, #8]
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	605a      	str	r2, [r3, #4]
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	3308      	adds	r3, #8
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d104      	bne.n	8003502 <vTaskSwitchContext+0x8a>
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	605a      	str	r2, [r3, #4]
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	4a08      	ldr	r2, [pc, #32]	; (800352c <vTaskSwitchContext+0xb4>)
 800350a:	6013      	str	r3, [r2, #0]
 800350c:	4a05      	ldr	r2, [pc, #20]	; (8003524 <vTaskSwitchContext+0xac>)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6013      	str	r3, [r2, #0]
}
 8003512:	bf00      	nop
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	bc80      	pop	{r7}
 800351a:	4770      	bx	lr
 800351c:	200005a8 	.word	0x200005a8
 8003520:	20000594 	.word	0x20000594
 8003524:	20000588 	.word	0x20000588
 8003528:	200004ac 	.word	0x200004ac
 800352c:	200004a8 	.word	0x200004a8

08003530 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10a      	bne.n	8003556 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003544:	f383 8811 	msr	BASEPRI, r3
 8003548:	f3bf 8f6f 	isb	sy
 800354c:	f3bf 8f4f 	dsb	sy
 8003550:	60fb      	str	r3, [r7, #12]
    }
 8003552:	bf00      	nop
 8003554:	e7fe      	b.n	8003554 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003556:	4b07      	ldr	r3, [pc, #28]	; (8003574 <vTaskPlaceOnEventList+0x44>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	3318      	adds	r3, #24
 800355c:	4619      	mov	r1, r3
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 fe1b 	bl	800419a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003564:	2101      	movs	r1, #1
 8003566:	6838      	ldr	r0, [r7, #0]
 8003568:	f000 fad8 	bl	8003b1c <prvAddCurrentTaskToDelayedList>
}
 800356c:	bf00      	nop
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	200004a8 	.word	0x200004a8

08003578 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10a      	bne.n	80035a0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800358a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800358e:	f383 8811 	msr	BASEPRI, r3
 8003592:	f3bf 8f6f 	isb	sy
 8003596:	f3bf 8f4f 	dsb	sy
 800359a:	613b      	str	r3, [r7, #16]
    }
 800359c:	bf00      	nop
 800359e:	e7fe      	b.n	800359e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	617b      	str	r3, [r7, #20]
 80035a6:	4b16      	ldr	r3, [pc, #88]	; (8003600 <vTaskPlaceOnEventListRestricted+0x88>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	61da      	str	r2, [r3, #28]
 80035ae:	4b14      	ldr	r3, [pc, #80]	; (8003600 <vTaskPlaceOnEventListRestricted+0x88>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	6892      	ldr	r2, [r2, #8]
 80035b6:	621a      	str	r2, [r3, #32]
 80035b8:	4b11      	ldr	r3, [pc, #68]	; (8003600 <vTaskPlaceOnEventListRestricted+0x88>)
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	3218      	adds	r2, #24
 80035c2:	605a      	str	r2, [r3, #4]
 80035c4:	4b0e      	ldr	r3, [pc, #56]	; (8003600 <vTaskPlaceOnEventListRestricted+0x88>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f103 0218 	add.w	r2, r3, #24
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	609a      	str	r2, [r3, #8]
 80035d0:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <vTaskPlaceOnEventListRestricted+0x88>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	629a      	str	r2, [r3, #40]	; 0x28
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	1c5a      	adds	r2, r3, #1
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d002      	beq.n	80035ee <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80035e8:	f04f 33ff 	mov.w	r3, #4294967295
 80035ec:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	68b8      	ldr	r0, [r7, #8]
 80035f2:	f000 fa93 	bl	8003b1c <prvAddCurrentTaskToDelayedList>
    }
 80035f6:	bf00      	nop
 80035f8:	3718      	adds	r7, #24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	200004a8 	.word	0x200004a8

08003604 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b08a      	sub	sp, #40	; 0x28
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003614:	6a3b      	ldr	r3, [r7, #32]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10a      	bne.n	8003630 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800361a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361e:	f383 8811 	msr	BASEPRI, r3
 8003622:	f3bf 8f6f 	isb	sy
 8003626:	f3bf 8f4f 	dsb	sy
 800362a:	60fb      	str	r3, [r7, #12]
    }
 800362c:	bf00      	nop
 800362e:	e7fe      	b.n	800362e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003634:	61fb      	str	r3, [r7, #28]
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	6a3a      	ldr	r2, [r7, #32]
 800363c:	6a12      	ldr	r2, [r2, #32]
 800363e:	609a      	str	r2, [r3, #8]
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	6a3a      	ldr	r2, [r7, #32]
 8003646:	69d2      	ldr	r2, [r2, #28]
 8003648:	605a      	str	r2, [r3, #4]
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	3318      	adds	r3, #24
 8003652:	429a      	cmp	r2, r3
 8003654:	d103      	bne.n	800365e <xTaskRemoveFromEventList+0x5a>
 8003656:	6a3b      	ldr	r3, [r7, #32]
 8003658:	6a1a      	ldr	r2, [r3, #32]
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	605a      	str	r2, [r3, #4]
 800365e:	6a3b      	ldr	r3, [r7, #32]
 8003660:	2200      	movs	r2, #0
 8003662:	629a      	str	r2, [r3, #40]	; 0x28
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	1e5a      	subs	r2, r3, #1
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800366e:	4b4b      	ldr	r3, [pc, #300]	; (800379c <xTaskRemoveFromEventList+0x198>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d161      	bne.n	800373a <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	6a3a      	ldr	r2, [r7, #32]
 8003682:	68d2      	ldr	r2, [r2, #12]
 8003684:	609a      	str	r2, [r3, #8]
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	6a3a      	ldr	r2, [r7, #32]
 800368c:	6892      	ldr	r2, [r2, #8]
 800368e:	605a      	str	r2, [r3, #4]
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	6a3b      	ldr	r3, [r7, #32]
 8003696:	3304      	adds	r3, #4
 8003698:	429a      	cmp	r2, r3
 800369a:	d103      	bne.n	80036a4 <xTaskRemoveFromEventList+0xa0>
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	605a      	str	r2, [r3, #4]
 80036a4:	6a3b      	ldr	r3, [r7, #32]
 80036a6:	2200      	movs	r2, #0
 80036a8:	615a      	str	r2, [r3, #20]
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	1e5a      	subs	r2, r3, #1
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b8:	4b39      	ldr	r3, [pc, #228]	; (80037a0 <xTaskRemoveFromEventList+0x19c>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d903      	bls.n	80036c8 <xTaskRemoveFromEventList+0xc4>
 80036c0:	6a3b      	ldr	r3, [r7, #32]
 80036c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c4:	4a36      	ldr	r2, [pc, #216]	; (80037a0 <xTaskRemoveFromEventList+0x19c>)
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036cc:	4935      	ldr	r1, [pc, #212]	; (80037a4 <xTaskRemoveFromEventList+0x1a0>)
 80036ce:	4613      	mov	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4413      	add	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	440b      	add	r3, r1
 80036d8:	3304      	adds	r3, #4
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	613b      	str	r3, [r7, #16]
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	609a      	str	r2, [r3, #8]
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	6a3b      	ldr	r3, [r7, #32]
 80036ea:	60da      	str	r2, [r3, #12]
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	6a3a      	ldr	r2, [r7, #32]
 80036f2:	3204      	adds	r2, #4
 80036f4:	605a      	str	r2, [r3, #4]
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	1d1a      	adds	r2, r3, #4
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	609a      	str	r2, [r3, #8]
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003702:	4613      	mov	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4413      	add	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4a26      	ldr	r2, [pc, #152]	; (80037a4 <xTaskRemoveFromEventList+0x1a0>)
 800370c:	441a      	add	r2, r3
 800370e:	6a3b      	ldr	r3, [r7, #32]
 8003710:	615a      	str	r2, [r3, #20]
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003716:	4923      	ldr	r1, [pc, #140]	; (80037a4 <xTaskRemoveFromEventList+0x1a0>)
 8003718:	4613      	mov	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4413      	add	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	1c59      	adds	r1, r3, #1
 8003726:	481f      	ldr	r0, [pc, #124]	; (80037a4 <xTaskRemoveFromEventList+0x1a0>)
 8003728:	4613      	mov	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4403      	add	r3, r0
 8003732:	6019      	str	r1, [r3, #0]
             * normally left unchanged, because it is automatically reset to a new
             * value when the tick count equals xNextTaskUnblockTime.  However if
             * tickless idling is used it might be more important to enter sleep mode
             * at the earliest possible time - so reset xNextTaskUnblockTime here to
             * ensure it is updated at the earliest possible time. */
            prvResetNextTaskUnblockTime();
 8003734:	f000 f9ba 	bl	8003aac <prvResetNextTaskUnblockTime>
 8003738:	e01b      	b.n	8003772 <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800373a:	4b1b      	ldr	r3, [pc, #108]	; (80037a8 <xTaskRemoveFromEventList+0x1a4>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	61bb      	str	r3, [r7, #24]
 8003740:	6a3b      	ldr	r3, [r7, #32]
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	61da      	str	r2, [r3, #28]
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	6a3b      	ldr	r3, [r7, #32]
 800374c:	621a      	str	r2, [r3, #32]
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	6a3a      	ldr	r2, [r7, #32]
 8003754:	3218      	adds	r2, #24
 8003756:	605a      	str	r2, [r3, #4]
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	f103 0218 	add.w	r2, r3, #24
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	609a      	str	r2, [r3, #8]
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	4a10      	ldr	r2, [pc, #64]	; (80037a8 <xTaskRemoveFromEventList+0x1a4>)
 8003766:	629a      	str	r2, [r3, #40]	; 0x28
 8003768:	4b0f      	ldr	r3, [pc, #60]	; (80037a8 <xTaskRemoveFromEventList+0x1a4>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	3301      	adds	r3, #1
 800376e:	4a0e      	ldr	r2, [pc, #56]	; (80037a8 <xTaskRemoveFromEventList+0x1a4>)
 8003770:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003776:	4b0d      	ldr	r3, [pc, #52]	; (80037ac <xTaskRemoveFromEventList+0x1a8>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377c:	429a      	cmp	r2, r3
 800377e:	d905      	bls.n	800378c <xTaskRemoveFromEventList+0x188>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003780:	2301      	movs	r3, #1
 8003782:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003784:	4b0a      	ldr	r3, [pc, #40]	; (80037b0 <xTaskRemoveFromEventList+0x1ac>)
 8003786:	2201      	movs	r2, #1
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	e001      	b.n	8003790 <xTaskRemoveFromEventList+0x18c>
    }
    else
    {
        xReturn = pdFALSE;
 800378c:	2300      	movs	r3, #0
 800378e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003792:	4618      	mov	r0, r3
 8003794:	3728      	adds	r7, #40	; 0x28
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	200005a8 	.word	0x200005a8
 80037a0:	20000588 	.word	0x20000588
 80037a4:	200004ac 	.word	0x200004ac
 80037a8:	20000540 	.word	0x20000540
 80037ac:	200004a8 	.word	0x200004a8
 80037b0:	20000594 	.word	0x20000594

080037b4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80037bc:	4b06      	ldr	r3, [pc, #24]	; (80037d8 <vTaskInternalSetTimeOutState+0x24>)
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80037c4:	4b05      	ldr	r3, [pc, #20]	; (80037dc <vTaskInternalSetTimeOutState+0x28>)
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	605a      	str	r2, [r3, #4]
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bc80      	pop	{r7}
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	20000598 	.word	0x20000598
 80037dc:	20000584 	.word	0x20000584

080037e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b088      	sub	sp, #32
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10a      	bne.n	8003806 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80037f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f4:	f383 8811 	msr	BASEPRI, r3
 80037f8:	f3bf 8f6f 	isb	sy
 80037fc:	f3bf 8f4f 	dsb	sy
 8003800:	613b      	str	r3, [r7, #16]
    }
 8003802:	bf00      	nop
 8003804:	e7fe      	b.n	8003804 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10a      	bne.n	8003822 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800380c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003810:	f383 8811 	msr	BASEPRI, r3
 8003814:	f3bf 8f6f 	isb	sy
 8003818:	f3bf 8f4f 	dsb	sy
 800381c:	60fb      	str	r3, [r7, #12]
    }
 800381e:	bf00      	nop
 8003820:	e7fe      	b.n	8003820 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003822:	f000 fe0d 	bl	8004440 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003826:	4b1f      	ldr	r3, [pc, #124]	; (80038a4 <xTaskCheckForTimeOut+0xc4>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383e:	d102      	bne.n	8003846 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003840:	2300      	movs	r3, #0
 8003842:	61fb      	str	r3, [r7, #28]
 8003844:	e026      	b.n	8003894 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	4b17      	ldr	r3, [pc, #92]	; (80038a8 <xTaskCheckForTimeOut+0xc8>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	429a      	cmp	r2, r3
 8003850:	d00a      	beq.n	8003868 <xTaskCheckForTimeOut+0x88>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	429a      	cmp	r2, r3
 800385a:	d305      	bcc.n	8003868 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800385c:	2301      	movs	r3, #1
 800385e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	2200      	movs	r2, #0
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	e015      	b.n	8003894 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	429a      	cmp	r2, r3
 8003870:	d20b      	bcs.n	800388a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	1ad2      	subs	r2, r2, r3
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7ff ff98 	bl	80037b4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003884:	2300      	movs	r3, #0
 8003886:	61fb      	str	r3, [r7, #28]
 8003888:	e004      	b.n	8003894 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2200      	movs	r2, #0
 800388e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003890:	2301      	movs	r3, #1
 8003892:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003894:	f000 fe04 	bl	80044a0 <vPortExitCritical>

    return xReturn;
 8003898:	69fb      	ldr	r3, [r7, #28]
}
 800389a:	4618      	mov	r0, r3
 800389c:	3720      	adds	r7, #32
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	20000584 	.word	0x20000584
 80038a8:	20000598 	.word	0x20000598

080038ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80038b0:	4b03      	ldr	r3, [pc, #12]	; (80038c0 <vTaskMissedYield+0x14>)
 80038b2:	2201      	movs	r2, #1
 80038b4:	601a      	str	r2, [r3, #0]
}
 80038b6:	bf00      	nop
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bc80      	pop	{r7}
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	20000594 	.word	0x20000594

080038c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80038cc:	f000 f8b0 	bl	8003a30 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80038d0:	4b18      	ldr	r3, [pc, #96]	; (8003934 <prvIdleTask+0x70>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d907      	bls.n	80038e8 <prvIdleTask+0x24>
            {
                taskYIELD();
 80038d8:	4b17      	ldr	r3, [pc, #92]	; (8003938 <prvIdleTask+0x74>)
 80038da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	f3bf 8f4f 	dsb	sy
 80038e4:	f3bf 8f6f 	isb	sy
            /* It is not desirable to suspend then resume the scheduler on
             * each iteration of the idle task.  Therefore, a preliminary
             * test of the expected idle time is performed without the
             * scheduler suspended.  The result here is not necessarily
             * valid. */
            xExpectedIdleTime = prvGetExpectedIdleTime();
 80038e8:	f7ff fb14 	bl	8002f14 <prvGetExpectedIdleTime>
 80038ec:	60f8      	str	r0, [r7, #12]

            if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d9eb      	bls.n	80038cc <prvIdleTask+0x8>
            {
                vTaskSuspendAll();
 80038f4:	f7ff fb00 	bl	8002ef8 <vTaskSuspendAll>
                {
                    /* Now the scheduler is suspended, the expected idle
                     * time can be sampled again, and this time its value can
                     * be used. */
                    configASSERT( xNextTaskUnblockTime >= xTickCount );
 80038f8:	4b10      	ldr	r3, [pc, #64]	; (800393c <prvIdleTask+0x78>)
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	4b10      	ldr	r3, [pc, #64]	; (8003940 <prvIdleTask+0x7c>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	429a      	cmp	r2, r3
 8003902:	d20a      	bcs.n	800391a <prvIdleTask+0x56>
        __asm volatile
 8003904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003908:	f383 8811 	msr	BASEPRI, r3
 800390c:	f3bf 8f6f 	isb	sy
 8003910:	f3bf 8f4f 	dsb	sy
 8003914:	60bb      	str	r3, [r7, #8]
    }
 8003916:	bf00      	nop
 8003918:	e7fe      	b.n	8003918 <prvIdleTask+0x54>
                    xExpectedIdleTime = prvGetExpectedIdleTime();
 800391a:	f7ff fafb 	bl	8002f14 <prvGetExpectedIdleTime>
 800391e:	60f8      	str	r0, [r7, #12]
                    /* Define the following macro to set xExpectedIdleTime to 0
                     * if the application does not want
                     * portSUPPRESS_TICKS_AND_SLEEP() to be called. */
                    configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

                    if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d902      	bls.n	800392c <prvIdleTask+0x68>
                    {
                        traceLOW_POWER_IDLE_BEGIN();
                        portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f000 fe28 	bl	800457c <vPortSuppressTicksAndSleep>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                ( void ) xTaskResumeAll();
 800392c:	f7ff fb28 	bl	8002f80 <xTaskResumeAll>
        prvCheckTasksWaitingTermination();
 8003930:	e7cc      	b.n	80038cc <prvIdleTask+0x8>
 8003932:	bf00      	nop
 8003934:	200004ac 	.word	0x200004ac
 8003938:	e000ed04 	.word	0xe000ed04
 800393c:	200005a0 	.word	0x200005a0
 8003940:	20000584 	.word	0x20000584

08003944 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

    eSleepModeStatus eTaskConfirmSleepModeStatus( void )
    {
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
        #if ( INCLUDE_vTaskSuspend == 1 )
            /* The idle task exists in addition to the application tasks. */
            const UBaseType_t uxNonApplicationTasks = 1;
 800394a:	2301      	movs	r3, #1
 800394c:	603b      	str	r3, [r7, #0]
        #endif /* INCLUDE_vTaskSuspend */

        eSleepModeStatus eReturn = eStandardSleep;
 800394e:	2301      	movs	r3, #1
 8003950:	71fb      	strb	r3, [r7, #7]

        /* This function must be called from a critical section. */

        if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 8003952:	4b12      	ldr	r3, [pc, #72]	; (800399c <eTaskConfirmSleepModeStatus+0x58>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d002      	beq.n	8003960 <eTaskConfirmSleepModeStatus+0x1c>
        {
            /* A task was made ready while the scheduler was suspended. */
            eReturn = eAbortSleep;
 800395a:	2300      	movs	r3, #0
 800395c:	71fb      	strb	r3, [r7, #7]
 800395e:	e017      	b.n	8003990 <eTaskConfirmSleepModeStatus+0x4c>
        }
        else if( xYieldPending != pdFALSE )
 8003960:	4b0f      	ldr	r3, [pc, #60]	; (80039a0 <eTaskConfirmSleepModeStatus+0x5c>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d002      	beq.n	800396e <eTaskConfirmSleepModeStatus+0x2a>
        {
            /* A yield was pended while the scheduler was suspended. */
            eReturn = eAbortSleep;
 8003968:	2300      	movs	r3, #0
 800396a:	71fb      	strb	r3, [r7, #7]
 800396c:	e010      	b.n	8003990 <eTaskConfirmSleepModeStatus+0x4c>
        }
        else if( xPendedTicks != 0 )
 800396e:	4b0d      	ldr	r3, [pc, #52]	; (80039a4 <eTaskConfirmSleepModeStatus+0x60>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d002      	beq.n	800397c <eTaskConfirmSleepModeStatus+0x38>
        {
            /* A tick interrupt has already occurred but was held pending
             * because the scheduler is suspended. */
            eReturn = eAbortSleep;
 8003976:	2300      	movs	r3, #0
 8003978:	71fb      	strb	r3, [r7, #7]
 800397a:	e009      	b.n	8003990 <eTaskConfirmSleepModeStatus+0x4c>
        }

        #if ( INCLUDE_vTaskSuspend == 1 )
            else if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800397c:	4b0a      	ldr	r3, [pc, #40]	; (80039a8 <eTaskConfirmSleepModeStatus+0x64>)
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	4b0a      	ldr	r3, [pc, #40]	; (80039ac <eTaskConfirmSleepModeStatus+0x68>)
 8003982:	6819      	ldr	r1, [r3, #0]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	1acb      	subs	r3, r1, r3
 8003988:	429a      	cmp	r2, r3
 800398a:	d101      	bne.n	8003990 <eTaskConfirmSleepModeStatus+0x4c>
            {
                /* If all the tasks are in the suspended list (which might mean they
                 * have an infinite block time rather than actually being suspended)
                 * then it is safe to turn all clocks off and just wait for external
                 * interrupts. */
                eReturn = eNoTasksWaitingTimeout;
 800398c:	2302      	movs	r3, #2
 800398e:	71fb      	strb	r3, [r7, #7]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return eReturn;
 8003990:	79fb      	ldrb	r3, [r7, #7]
    }
 8003992:	4618      	mov	r0, r3
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	bc80      	pop	{r7}
 800399a:	4770      	bx	lr
 800399c:	20000540 	.word	0x20000540
 80039a0:	20000594 	.word	0x20000594
 80039a4:	20000590 	.word	0x20000590
 80039a8:	2000056c 	.word	0x2000056c
 80039ac:	20000580 	.word	0x20000580

080039b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039b6:	2300      	movs	r3, #0
 80039b8:	607b      	str	r3, [r7, #4]
 80039ba:	e00c      	b.n	80039d6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	4613      	mov	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	4413      	add	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4a12      	ldr	r2, [pc, #72]	; (8003a10 <prvInitialiseTaskLists+0x60>)
 80039c8:	4413      	add	r3, r2
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 fbba 	bl	8004144 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3301      	adds	r3, #1
 80039d4:	607b      	str	r3, [r7, #4]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b04      	cmp	r3, #4
 80039da:	d9ef      	bls.n	80039bc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80039dc:	480d      	ldr	r0, [pc, #52]	; (8003a14 <prvInitialiseTaskLists+0x64>)
 80039de:	f000 fbb1 	bl	8004144 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80039e2:	480d      	ldr	r0, [pc, #52]	; (8003a18 <prvInitialiseTaskLists+0x68>)
 80039e4:	f000 fbae 	bl	8004144 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80039e8:	480c      	ldr	r0, [pc, #48]	; (8003a1c <prvInitialiseTaskLists+0x6c>)
 80039ea:	f000 fbab 	bl	8004144 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80039ee:	480c      	ldr	r0, [pc, #48]	; (8003a20 <prvInitialiseTaskLists+0x70>)
 80039f0:	f000 fba8 	bl	8004144 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80039f4:	480b      	ldr	r0, [pc, #44]	; (8003a24 <prvInitialiseTaskLists+0x74>)
 80039f6:	f000 fba5 	bl	8004144 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80039fa:	4b0b      	ldr	r3, [pc, #44]	; (8003a28 <prvInitialiseTaskLists+0x78>)
 80039fc:	4a05      	ldr	r2, [pc, #20]	; (8003a14 <prvInitialiseTaskLists+0x64>)
 80039fe:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a00:	4b0a      	ldr	r3, [pc, #40]	; (8003a2c <prvInitialiseTaskLists+0x7c>)
 8003a02:	4a05      	ldr	r2, [pc, #20]	; (8003a18 <prvInitialiseTaskLists+0x68>)
 8003a04:	601a      	str	r2, [r3, #0]
}
 8003a06:	bf00      	nop
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	200004ac 	.word	0x200004ac
 8003a14:	20000510 	.word	0x20000510
 8003a18:	20000524 	.word	0x20000524
 8003a1c:	20000540 	.word	0x20000540
 8003a20:	20000554 	.word	0x20000554
 8003a24:	2000056c 	.word	0x2000056c
 8003a28:	20000538 	.word	0x20000538
 8003a2c:	2000053c 	.word	0x2000053c

08003a30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a36:	e019      	b.n	8003a6c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003a38:	f000 fd02 	bl	8004440 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a3c:	4b10      	ldr	r3, [pc, #64]	; (8003a80 <prvCheckTasksWaitingTermination+0x50>)
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3304      	adds	r3, #4
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f000 fbde 	bl	800420a <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003a4e:	4b0d      	ldr	r3, [pc, #52]	; (8003a84 <prvCheckTasksWaitingTermination+0x54>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	3b01      	subs	r3, #1
 8003a54:	4a0b      	ldr	r2, [pc, #44]	; (8003a84 <prvCheckTasksWaitingTermination+0x54>)
 8003a56:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003a58:	4b0b      	ldr	r3, [pc, #44]	; (8003a88 <prvCheckTasksWaitingTermination+0x58>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	4a0a      	ldr	r2, [pc, #40]	; (8003a88 <prvCheckTasksWaitingTermination+0x58>)
 8003a60:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003a62:	f000 fd1d 	bl	80044a0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f810 	bl	8003a8c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a6c:	4b06      	ldr	r3, [pc, #24]	; (8003a88 <prvCheckTasksWaitingTermination+0x58>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1e1      	bne.n	8003a38 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003a74:	bf00      	nop
 8003a76:	bf00      	nop
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	20000554 	.word	0x20000554
 8003a84:	20000580 	.word	0x20000580
 8003a88:	20000568 	.word	0x20000568

08003a8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 fb41 	bl	8004120 <vPortFree>
            vPortFree( pxTCB );
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 fb3e 	bl	8004120 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003aa4:	bf00      	nop
 8003aa6:	3708      	adds	r7, #8
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ab0:	4b09      	ldr	r3, [pc, #36]	; (8003ad8 <prvResetNextTaskUnblockTime+0x2c>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d104      	bne.n	8003ac4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003aba:	4b08      	ldr	r3, [pc, #32]	; (8003adc <prvResetNextTaskUnblockTime+0x30>)
 8003abc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ac0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003ac2:	e005      	b.n	8003ad0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003ac4:	4b04      	ldr	r3, [pc, #16]	; (8003ad8 <prvResetNextTaskUnblockTime+0x2c>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a03      	ldr	r2, [pc, #12]	; (8003adc <prvResetNextTaskUnblockTime+0x30>)
 8003ace:	6013      	str	r3, [r2, #0]
}
 8003ad0:	bf00      	nop
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bc80      	pop	{r7}
 8003ad6:	4770      	bx	lr
 8003ad8:	20000538 	.word	0x20000538
 8003adc:	200005a0 	.word	0x200005a0

08003ae0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003ae6:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <xTaskGetSchedulerState+0x34>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d102      	bne.n	8003af4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003aee:	2301      	movs	r3, #1
 8003af0:	607b      	str	r3, [r7, #4]
 8003af2:	e008      	b.n	8003b06 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003af4:	4b08      	ldr	r3, [pc, #32]	; (8003b18 <xTaskGetSchedulerState+0x38>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d102      	bne.n	8003b02 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003afc:	2302      	movs	r3, #2
 8003afe:	607b      	str	r3, [r7, #4]
 8003b00:	e001      	b.n	8003b06 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003b02:	2300      	movs	r3, #0
 8003b04:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003b06:	687b      	ldr	r3, [r7, #4]
    }
 8003b08:	4618      	mov	r0, r3
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bc80      	pop	{r7}
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	2000058c 	.word	0x2000058c
 8003b18:	200005a8 	.word	0x200005a8

08003b1c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003b26:	4b2e      	ldr	r3, [pc, #184]	; (8003be0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b2c:	4b2d      	ldr	r3, [pc, #180]	; (8003be4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	3304      	adds	r3, #4
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 fb69 	bl	800420a <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3e:	d124      	bne.n	8003b8a <prvAddCurrentTaskToDelayedList+0x6e>
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d021      	beq.n	8003b8a <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b46:	4b28      	ldr	r3, [pc, #160]	; (8003be8 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	613b      	str	r3, [r7, #16]
 8003b4c:	4b25      	ldr	r3, [pc, #148]	; (8003be4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	609a      	str	r2, [r3, #8]
 8003b54:	4b23      	ldr	r3, [pc, #140]	; (8003be4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	6892      	ldr	r2, [r2, #8]
 8003b5c:	60da      	str	r2, [r3, #12]
 8003b5e:	4b21      	ldr	r3, [pc, #132]	; (8003be4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	3204      	adds	r2, #4
 8003b68:	605a      	str	r2, [r3, #4]
 8003b6a:	4b1e      	ldr	r3, [pc, #120]	; (8003be4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	1d1a      	adds	r2, r3, #4
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	609a      	str	r2, [r3, #8]
 8003b74:	4b1b      	ldr	r3, [pc, #108]	; (8003be4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a1b      	ldr	r2, [pc, #108]	; (8003be8 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003b7a:	615a      	str	r2, [r3, #20]
 8003b7c:	4b1a      	ldr	r3, [pc, #104]	; (8003be8 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	3301      	adds	r3, #1
 8003b82:	4a19      	ldr	r2, [pc, #100]	; (8003be8 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003b88:	e026      	b.n	8003bd8 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4413      	add	r3, r2
 8003b90:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b92:	4b14      	ldr	r3, [pc, #80]	; (8003be4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d209      	bcs.n	8003bb6 <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ba2:	4b12      	ldr	r3, [pc, #72]	; (8003bec <prvAddCurrentTaskToDelayedList+0xd0>)
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	4b0f      	ldr	r3, [pc, #60]	; (8003be4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	3304      	adds	r3, #4
 8003bac:	4619      	mov	r1, r3
 8003bae:	4610      	mov	r0, r2
 8003bb0:	f000 faf3 	bl	800419a <vListInsert>
}
 8003bb4:	e010      	b.n	8003bd8 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bb6:	4b0e      	ldr	r3, [pc, #56]	; (8003bf0 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	4b0a      	ldr	r3, [pc, #40]	; (8003be4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	3304      	adds	r3, #4
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4610      	mov	r0, r2
 8003bc4:	f000 fae9 	bl	800419a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003bc8:	4b0a      	ldr	r3, [pc, #40]	; (8003bf4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d202      	bcs.n	8003bd8 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 8003bd2:	4a08      	ldr	r2, [pc, #32]	; (8003bf4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6013      	str	r3, [r2, #0]
}
 8003bd8:	bf00      	nop
 8003bda:	3718      	adds	r7, #24
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	20000584 	.word	0x20000584
 8003be4:	200004a8 	.word	0x200004a8
 8003be8:	2000056c 	.word	0x2000056c
 8003bec:	2000053c 	.word	0x2000053c
 8003bf0:	20000538 	.word	0x20000538
 8003bf4:	200005a0 	.word	0x200005a0

08003bf8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003c02:	f000 fa45 	bl	8004090 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003c06:	4b11      	ldr	r3, [pc, #68]	; (8003c4c <xTimerCreateTimerTask+0x54>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00a      	beq.n	8003c24 <xTimerCreateTimerTask+0x2c>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003c0e:	4b10      	ldr	r3, [pc, #64]	; (8003c50 <xTimerCreateTimerTask+0x58>)
 8003c10:	9301      	str	r3, [sp, #4]
 8003c12:	2303      	movs	r3, #3
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	2300      	movs	r3, #0
 8003c18:	2280      	movs	r2, #128	; 0x80
 8003c1a:	490e      	ldr	r1, [pc, #56]	; (8003c54 <xTimerCreateTimerTask+0x5c>)
 8003c1c:	480e      	ldr	r0, [pc, #56]	; (8003c58 <xTimerCreateTimerTask+0x60>)
 8003c1e:	f7fe ffad 	bl	8002b7c <xTaskCreate>
 8003c22:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10a      	bne.n	8003c40 <xTimerCreateTimerTask+0x48>
        __asm volatile
 8003c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2e:	f383 8811 	msr	BASEPRI, r3
 8003c32:	f3bf 8f6f 	isb	sy
 8003c36:	f3bf 8f4f 	dsb	sy
 8003c3a:	603b      	str	r3, [r7, #0]
    }
 8003c3c:	bf00      	nop
 8003c3e:	e7fe      	b.n	8003c3e <xTimerCreateTimerTask+0x46>
        return xReturn;
 8003c40:	687b      	ldr	r3, [r7, #4]
    }
 8003c42:	4618      	mov	r0, r3
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	200005dc 	.word	0x200005dc
 8003c50:	200005e0 	.word	0x200005e0
 8003c54:	08005694 	.word	0x08005694
 8003c58:	08003d01 	.word	0x08003d01

08003c5c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003c68:	e008      	b.n	8003c7c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	4413      	add	r3, r2
 8003c72:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	699a      	ldr	r2, [r3, #24]
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	18d1      	adds	r1, r2, r3
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f000 f8db 	bl	8003e44 <prvInsertTimerInActiveList>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1ea      	bne.n	8003c6a <prvReloadTimer+0xe>
        }
    }
 8003c94:	bf00      	nop
 8003c96:	bf00      	nop
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
	...

08003ca0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003caa:	4b14      	ldr	r3, [pc, #80]	; (8003cfc <prvProcessExpiredTimer+0x5c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 faa6 	bl	800420a <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cc4:	f003 0304 	and.w	r3, r3, #4
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d005      	beq.n	8003cd8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f7ff ffc3 	bl	8003c5c <prvReloadTimer>
 8003cd6:	e008      	b.n	8003cea <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cde:	f023 0301 	bic.w	r3, r3, #1
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	4798      	blx	r3
    }
 8003cf2:	bf00      	nop
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	200005d4 	.word	0x200005d4

08003d00 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d08:	f107 0308 	add.w	r3, r7, #8
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f000 f857 	bl	8003dc0 <prvGetNextExpireTime>
 8003d12:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	4619      	mov	r1, r3
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f000 f803 	bl	8003d24 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003d1e:	f000 f8d3 	bl	8003ec8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d22:	e7f1      	b.n	8003d08 <prvTimerTask+0x8>

08003d24 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003d2e:	f7ff f8e3 	bl	8002ef8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d32:	f107 0308 	add.w	r3, r7, #8
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 f864 	bl	8003e04 <prvSampleTimeNow>
 8003d3c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d130      	bne.n	8003da6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10a      	bne.n	8003d60 <prvProcessTimerOrBlockTask+0x3c>
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d806      	bhi.n	8003d60 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003d52:	f7ff f915 	bl	8002f80 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003d56:	68f9      	ldr	r1, [r7, #12]
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f7ff ffa1 	bl	8003ca0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003d5e:	e024      	b.n	8003daa <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d008      	beq.n	8003d78 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003d66:	4b13      	ldr	r3, [pc, #76]	; (8003db4 <prvProcessTimerOrBlockTask+0x90>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <prvProcessTimerOrBlockTask+0x50>
 8003d70:	2301      	movs	r3, #1
 8003d72:	e000      	b.n	8003d76 <prvProcessTimerOrBlockTask+0x52>
 8003d74:	2300      	movs	r3, #0
 8003d76:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003d78:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <prvProcessTimerOrBlockTask+0x94>)
 8003d7a:	6818      	ldr	r0, [r3, #0]
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	4619      	mov	r1, r3
 8003d86:	f000 ffbd 	bl	8004d04 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003d8a:	f7ff f8f9 	bl	8002f80 <xTaskResumeAll>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10a      	bne.n	8003daa <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003d94:	4b09      	ldr	r3, [pc, #36]	; (8003dbc <prvProcessTimerOrBlockTask+0x98>)
 8003d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	f3bf 8f4f 	dsb	sy
 8003da0:	f3bf 8f6f 	isb	sy
    }
 8003da4:	e001      	b.n	8003daa <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003da6:	f7ff f8eb 	bl	8002f80 <xTaskResumeAll>
    }
 8003daa:	bf00      	nop
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	200005d8 	.word	0x200005d8
 8003db8:	200005dc 	.word	0x200005dc
 8003dbc:	e000ed04 	.word	0xe000ed04

08003dc0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003dc8:	4b0d      	ldr	r3, [pc, #52]	; (8003e00 <prvGetNextExpireTime+0x40>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <prvGetNextExpireTime+0x16>
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	e000      	b.n	8003dd8 <prvGetNextExpireTime+0x18>
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d105      	bne.n	8003df0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003de4:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <prvGetNextExpireTime+0x40>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	60fb      	str	r3, [r7, #12]
 8003dee:	e001      	b.n	8003df4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003df4:	68fb      	ldr	r3, [r7, #12]
    }
 8003df6:	4618      	mov	r0, r3
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr
 8003e00:	200005d4 	.word	0x200005d4

08003e04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003e0c:	f7ff f9b4 	bl	8003178 <xTaskGetTickCount>
 8003e10:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003e12:	4b0b      	ldr	r3, [pc, #44]	; (8003e40 <prvSampleTimeNow+0x3c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d205      	bcs.n	8003e28 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003e1c:	f000 f912 	bl	8004044 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	e002      	b.n	8003e2e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003e2e:	4a04      	ldr	r2, [pc, #16]	; (8003e40 <prvSampleTimeNow+0x3c>)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003e34:	68fb      	ldr	r3, [r7, #12]
    }
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	200005e4 	.word	0x200005e4

08003e44 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
 8003e50:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003e52:	2300      	movs	r3, #0
 8003e54:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d812      	bhi.n	8003e90 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	1ad2      	subs	r2, r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d302      	bcc.n	8003e7e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	617b      	str	r3, [r7, #20]
 8003e7c:	e01b      	b.n	8003eb6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003e7e:	4b10      	ldr	r3, [pc, #64]	; (8003ec0 <prvInsertTimerInActiveList+0x7c>)
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	3304      	adds	r3, #4
 8003e86:	4619      	mov	r1, r3
 8003e88:	4610      	mov	r0, r2
 8003e8a:	f000 f986 	bl	800419a <vListInsert>
 8003e8e:	e012      	b.n	8003eb6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d206      	bcs.n	8003ea6 <prvInsertTimerInActiveList+0x62>
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d302      	bcc.n	8003ea6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	617b      	str	r3, [r7, #20]
 8003ea4:	e007      	b.n	8003eb6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ea6:	4b07      	ldr	r3, [pc, #28]	; (8003ec4 <prvInsertTimerInActiveList+0x80>)
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	3304      	adds	r3, #4
 8003eae:	4619      	mov	r1, r3
 8003eb0:	4610      	mov	r0, r2
 8003eb2:	f000 f972 	bl	800419a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003eb6:	697b      	ldr	r3, [r7, #20]
    }
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3718      	adds	r7, #24
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	200005d8 	.word	0x200005d8
 8003ec4:	200005d4 	.word	0x200005d4

08003ec8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b088      	sub	sp, #32
 8003ecc:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ece:	e0a6      	b.n	800401e <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f2c0 80a2 	blt.w	800401c <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d004      	beq.n	8003eee <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	3304      	adds	r3, #4
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 f98e 	bl	800420a <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003eee:	1d3b      	adds	r3, r7, #4
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7ff ff87 	bl	8003e04 <prvSampleTimeNow>
 8003ef6:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	3b01      	subs	r3, #1
 8003efc:	2b08      	cmp	r3, #8
 8003efe:	f200 808e 	bhi.w	800401e <prvProcessReceivedCommands+0x156>
 8003f02:	a201      	add	r2, pc, #4	; (adr r2, 8003f08 <prvProcessReceivedCommands+0x40>)
 8003f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f08:	08003f2d 	.word	0x08003f2d
 8003f0c:	08003f2d 	.word	0x08003f2d
 8003f10:	08003f95 	.word	0x08003f95
 8003f14:	08003fa9 	.word	0x08003fa9
 8003f18:	08003ff3 	.word	0x08003ff3
 8003f1c:	08003f2d 	.word	0x08003f2d
 8003f20:	08003f2d 	.word	0x08003f2d
 8003f24:	08003f95 	.word	0x08003f95
 8003f28:	08003fa9 	.word	0x08003fa9
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f32:	f043 0301 	orr.w	r3, r3, #1
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	18d1      	adds	r1, r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	69f8      	ldr	r0, [r7, #28]
 8003f4c:	f7ff ff7a 	bl	8003e44 <prvInsertTimerInActiveList>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d063      	beq.n	800401e <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d009      	beq.n	8003f78 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	4619      	mov	r1, r3
 8003f70:	69f8      	ldr	r0, [r7, #28]
 8003f72:	f7ff fe73 	bl	8003c5c <prvReloadTimer>
 8003f76:	e008      	b.n	8003f8a <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f7e:	f023 0301 	bic.w	r3, r3, #1
 8003f82:	b2da      	uxtb	r2, r3
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	69f8      	ldr	r0, [r7, #28]
 8003f90:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003f92:	e044      	b.n	800401e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f9a:	f023 0301 	bic.w	r3, r3, #1
 8003f9e:	b2da      	uxtb	r2, r3
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003fa6:	e03a      	b.n	800401e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fae:	f043 0301 	orr.w	r3, r3, #1
 8003fb2:	b2da      	uxtb	r2, r3
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10a      	bne.n	8003fde <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fcc:	f383 8811 	msr	BASEPRI, r3
 8003fd0:	f3bf 8f6f 	isb	sy
 8003fd4:	f3bf 8f4f 	dsb	sy
 8003fd8:	617b      	str	r3, [r7, #20]
    }
 8003fda:	bf00      	nop
 8003fdc:	e7fe      	b.n	8003fdc <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	699a      	ldr	r2, [r3, #24]
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	18d1      	adds	r1, r2, r3
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	69f8      	ldr	r0, [r7, #28]
 8003fec:	f7ff ff2a 	bl	8003e44 <prvInsertTimerInActiveList>
                        break;
 8003ff0:	e015      	b.n	800401e <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d103      	bne.n	8004008 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8004000:	69f8      	ldr	r0, [r7, #28]
 8004002:	f000 f88d 	bl	8004120 <vPortFree>
 8004006:	e00a      	b.n	800401e <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800400e:	f023 0301 	bic.w	r3, r3, #1
 8004012:	b2da      	uxtb	r2, r3
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800401a:	e000      	b.n	800401e <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800401c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800401e:	4b08      	ldr	r3, [pc, #32]	; (8004040 <prvProcessReceivedCommands+0x178>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f107 0108 	add.w	r1, r7, #8
 8004026:	2200      	movs	r2, #0
 8004028:	4618      	mov	r0, r3
 800402a:	f000 fcaf 	bl	800498c <xQueueReceive>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	f47f af4d 	bne.w	8003ed0 <prvProcessReceivedCommands+0x8>
        }
    }
 8004036:	bf00      	nop
 8004038:	bf00      	nop
 800403a:	3720      	adds	r7, #32
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	200005dc 	.word	0x200005dc

08004044 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800404a:	e009      	b.n	8004060 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800404c:	4b0e      	ldr	r3, [pc, #56]	; (8004088 <prvSwitchTimerLists+0x44>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004056:	f04f 31ff 	mov.w	r1, #4294967295
 800405a:	6838      	ldr	r0, [r7, #0]
 800405c:	f7ff fe20 	bl	8003ca0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004060:	4b09      	ldr	r3, [pc, #36]	; (8004088 <prvSwitchTimerLists+0x44>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1f0      	bne.n	800404c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800406a:	4b07      	ldr	r3, [pc, #28]	; (8004088 <prvSwitchTimerLists+0x44>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004070:	4b06      	ldr	r3, [pc, #24]	; (800408c <prvSwitchTimerLists+0x48>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a04      	ldr	r2, [pc, #16]	; (8004088 <prvSwitchTimerLists+0x44>)
 8004076:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004078:	4a04      	ldr	r2, [pc, #16]	; (800408c <prvSwitchTimerLists+0x48>)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6013      	str	r3, [r2, #0]
    }
 800407e:	bf00      	nop
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	200005d4 	.word	0x200005d4
 800408c:	200005d8 	.word	0x200005d8

08004090 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004094:	f000 f9d4 	bl	8004440 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004098:	4b12      	ldr	r3, [pc, #72]	; (80040e4 <prvCheckForValidListAndQueue+0x54>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d11d      	bne.n	80040dc <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80040a0:	4811      	ldr	r0, [pc, #68]	; (80040e8 <prvCheckForValidListAndQueue+0x58>)
 80040a2:	f000 f84f 	bl	8004144 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80040a6:	4811      	ldr	r0, [pc, #68]	; (80040ec <prvCheckForValidListAndQueue+0x5c>)
 80040a8:	f000 f84c 	bl	8004144 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80040ac:	4b10      	ldr	r3, [pc, #64]	; (80040f0 <prvCheckForValidListAndQueue+0x60>)
 80040ae:	4a0e      	ldr	r2, [pc, #56]	; (80040e8 <prvCheckForValidListAndQueue+0x58>)
 80040b0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80040b2:	4b10      	ldr	r3, [pc, #64]	; (80040f4 <prvCheckForValidListAndQueue+0x64>)
 80040b4:	4a0d      	ldr	r2, [pc, #52]	; (80040ec <prvCheckForValidListAndQueue+0x5c>)
 80040b6:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80040b8:	2200      	movs	r2, #0
 80040ba:	210c      	movs	r1, #12
 80040bc:	200a      	movs	r0, #10
 80040be:	f000 fbf3 	bl	80048a8 <xQueueGenericCreate>
 80040c2:	4603      	mov	r3, r0
 80040c4:	4a07      	ldr	r2, [pc, #28]	; (80040e4 <prvCheckForValidListAndQueue+0x54>)
 80040c6:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80040c8:	4b06      	ldr	r3, [pc, #24]	; (80040e4 <prvCheckForValidListAndQueue+0x54>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d005      	beq.n	80040dc <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80040d0:	4b04      	ldr	r3, [pc, #16]	; (80040e4 <prvCheckForValidListAndQueue+0x54>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4908      	ldr	r1, [pc, #32]	; (80040f8 <prvCheckForValidListAndQueue+0x68>)
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 fdc6 	bl	8004c68 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80040dc:	f000 f9e0 	bl	80044a0 <vPortExitCritical>
    }
 80040e0:	bf00      	nop
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	200005dc 	.word	0x200005dc
 80040e8:	200005ac 	.word	0x200005ac
 80040ec:	200005c0 	.word	0x200005c0
 80040f0:	200005d4 	.word	0x200005d4
 80040f4:	200005d8 	.word	0x200005d8
 80040f8:	0800569c 	.word	0x0800569c

080040fc <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
    void * pvReturn;

    vTaskSuspendAll();
 8004104:	f7fe fef8 	bl	8002ef8 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 fe59 	bl	8004dc0 <malloc>
 800410e:	4603      	mov	r3, r0
 8004110:	60fb      	str	r3, [r7, #12]
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004112:	f7fe ff35 	bl	8002f80 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 8004116:	68fb      	ldr	r3, [r7, #12]
}
 8004118:	4618      	mov	r0, r3
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
    if( pv != NULL )
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d006      	beq.n	800413c <vPortFree+0x1c>
    {
        vTaskSuspendAll();
 800412e:	f7fe fee3 	bl	8002ef8 <vTaskSuspendAll>
        {
            free( pv );
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 fe4c 	bl	8004dd0 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
 8004138:	f7fe ff22 	bl	8002f80 <xTaskResumeAll>
    }
}
 800413c:	bf00      	nop
 800413e:	3708      	adds	r7, #8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f103 0208 	add.w	r2, r3, #8
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f04f 32ff 	mov.w	r2, #4294967295
 800415c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f103 0208 	add.w	r2, r3, #8
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f103 0208 	add.w	r2, r3, #8
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	bc80      	pop	{r7}
 8004180:	4770      	bx	lr

08004182 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	bc80      	pop	{r7}
 8004198:	4770      	bx	lr

0800419a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800419a:	b480      	push	{r7}
 800419c:	b085      	sub	sp, #20
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
 80041a2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b0:	d103      	bne.n	80041ba <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	60fb      	str	r3, [r7, #12]
 80041b8:	e00c      	b.n	80041d4 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	3308      	adds	r3, #8
 80041be:	60fb      	str	r3, [r7, #12]
 80041c0:	e002      	b.n	80041c8 <vListInsert+0x2e>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d2f6      	bcs.n	80041c2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	601a      	str	r2, [r3, #0]
}
 8004200:	bf00      	nop
 8004202:	3714      	adds	r7, #20
 8004204:	46bd      	mov	sp, r7
 8004206:	bc80      	pop	{r7}
 8004208:	4770      	bx	lr

0800420a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800420a:	b480      	push	{r7}
 800420c:	b085      	sub	sp, #20
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	6892      	ldr	r2, [r2, #8]
 8004220:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	6852      	ldr	r2, [r2, #4]
 800422a:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	429a      	cmp	r2, r3
 8004234:	d103      	bne.n	800423e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689a      	ldr	r2, [r3, #8]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	1e5a      	subs	r2, r3, #1
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	bc80      	pop	{r7}
 800425a:	4770      	bx	lr

0800425c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	3b04      	subs	r3, #4
 800426c:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004274:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	3b04      	subs	r3, #4
 800427a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	f023 0201 	bic.w	r2, r3, #1
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	3b04      	subs	r3, #4
 800428a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800428c:	4a08      	ldr	r2, [pc, #32]	; (80042b0 <pxPortInitialiseStack+0x54>)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	3b14      	subs	r3, #20
 8004296:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	3b20      	subs	r3, #32
 80042a2:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80042a4:	68fb      	ldr	r3, [r7, #12]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bc80      	pop	{r7}
 80042ae:	4770      	bx	lr
 80042b0:	080042b5 	.word	0x080042b5

080042b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 80042ba:	2300      	movs	r3, #0
 80042bc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80042be:	4b12      	ldr	r3, [pc, #72]	; (8004308 <prvTaskExitError+0x54>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c6:	d00a      	beq.n	80042de <prvTaskExitError+0x2a>
        __asm volatile
 80042c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042cc:	f383 8811 	msr	BASEPRI, r3
 80042d0:	f3bf 8f6f 	isb	sy
 80042d4:	f3bf 8f4f 	dsb	sy
 80042d8:	60fb      	str	r3, [r7, #12]
    }
 80042da:	bf00      	nop
 80042dc:	e7fe      	b.n	80042dc <prvTaskExitError+0x28>
        __asm volatile
 80042de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e2:	f383 8811 	msr	BASEPRI, r3
 80042e6:	f3bf 8f6f 	isb	sy
 80042ea:	f3bf 8f4f 	dsb	sy
 80042ee:	60bb      	str	r3, [r7, #8]
    }
 80042f0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80042f2:	bf00      	nop
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d0fc      	beq.n	80042f4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80042fa:	bf00      	nop
 80042fc:	bf00      	nop
 80042fe:	3714      	adds	r7, #20
 8004300:	46bd      	mov	sp, r7
 8004302:	bc80      	pop	{r7}
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	20000018 	.word	0x20000018
 800430c:	00000000 	.word	0x00000000

08004310 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004310:	4b07      	ldr	r3, [pc, #28]	; (8004330 <pxCurrentTCBConst2>)
 8004312:	6819      	ldr	r1, [r3, #0]
 8004314:	6808      	ldr	r0, [r1, #0]
 8004316:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800431a:	f380 8809 	msr	PSP, r0
 800431e:	f3bf 8f6f 	isb	sy
 8004322:	f04f 0000 	mov.w	r0, #0
 8004326:	f380 8811 	msr	BASEPRI, r0
 800432a:	f04e 0e0d 	orr.w	lr, lr, #13
 800432e:	4770      	bx	lr

08004330 <pxCurrentTCBConst2>:
 8004330:	200004a8 	.word	0x200004a8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004334:	bf00      	nop
 8004336:	bf00      	nop

08004338 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8004338:	4806      	ldr	r0, [pc, #24]	; (8004354 <prvPortStartFirstTask+0x1c>)
 800433a:	6800      	ldr	r0, [r0, #0]
 800433c:	6800      	ldr	r0, [r0, #0]
 800433e:	f380 8808 	msr	MSP, r0
 8004342:	b662      	cpsie	i
 8004344:	b661      	cpsie	f
 8004346:	f3bf 8f4f 	dsb	sy
 800434a:	f3bf 8f6f 	isb	sy
 800434e:	df00      	svc	0
 8004350:	bf00      	nop
 8004352:	0000      	.short	0x0000
 8004354:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004358:	bf00      	nop
 800435a:	bf00      	nop

0800435c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004362:	4b32      	ldr	r3, [pc, #200]	; (800442c <xPortStartScheduler+0xd0>)
 8004364:	60fb      	str	r3, [r7, #12]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	b2db      	uxtb	r3, r3
 800436c:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	22ff      	movs	r2, #255	; 0xff
 8004372:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	b2db      	uxtb	r3, r3
 800437a:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800437c:	78fb      	ldrb	r3, [r7, #3]
 800437e:	b2db      	uxtb	r3, r3
 8004380:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004384:	b2da      	uxtb	r2, r3
 8004386:	4b2a      	ldr	r3, [pc, #168]	; (8004430 <xPortStartScheduler+0xd4>)
 8004388:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800438a:	4b2a      	ldr	r3, [pc, #168]	; (8004434 <xPortStartScheduler+0xd8>)
 800438c:	2207      	movs	r2, #7
 800438e:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004390:	e009      	b.n	80043a6 <xPortStartScheduler+0x4a>
        {
            ulMaxPRIGROUPValue--;
 8004392:	4b28      	ldr	r3, [pc, #160]	; (8004434 <xPortStartScheduler+0xd8>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	3b01      	subs	r3, #1
 8004398:	4a26      	ldr	r2, [pc, #152]	; (8004434 <xPortStartScheduler+0xd8>)
 800439a:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800439c:	78fb      	ldrb	r3, [r7, #3]
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043a6:	78fb      	ldrb	r3, [r7, #3]
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ae:	2b80      	cmp	r3, #128	; 0x80
 80043b0:	d0ef      	beq.n	8004392 <xPortStartScheduler+0x36>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80043b2:	4b20      	ldr	r3, [pc, #128]	; (8004434 <xPortStartScheduler+0xd8>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f1c3 0307 	rsb	r3, r3, #7
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	d00a      	beq.n	80043d4 <xPortStartScheduler+0x78>
        __asm volatile
 80043be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c2:	f383 8811 	msr	BASEPRI, r3
 80043c6:	f3bf 8f6f 	isb	sy
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	60bb      	str	r3, [r7, #8]
    }
 80043d0:	bf00      	nop
 80043d2:	e7fe      	b.n	80043d2 <xPortStartScheduler+0x76>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80043d4:	4b17      	ldr	r3, [pc, #92]	; (8004434 <xPortStartScheduler+0xd8>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	021b      	lsls	r3, r3, #8
 80043da:	4a16      	ldr	r2, [pc, #88]	; (8004434 <xPortStartScheduler+0xd8>)
 80043dc:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043de:	4b15      	ldr	r3, [pc, #84]	; (8004434 <xPortStartScheduler+0xd8>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043e6:	4a13      	ldr	r2, [pc, #76]	; (8004434 <xPortStartScheduler+0xd8>)
 80043e8:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80043f2:	4b11      	ldr	r3, [pc, #68]	; (8004438 <xPortStartScheduler+0xdc>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a10      	ldr	r2, [pc, #64]	; (8004438 <xPortStartScheduler+0xdc>)
 80043f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043fc:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80043fe:	4b0e      	ldr	r3, [pc, #56]	; (8004438 <xPortStartScheduler+0xdc>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a0d      	ldr	r2, [pc, #52]	; (8004438 <xPortStartScheduler+0xdc>)
 8004404:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004408:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800440a:	f000 f981 	bl	8004710 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800440e:	4b0b      	ldr	r3, [pc, #44]	; (800443c <xPortStartScheduler+0xe0>)
 8004410:	2200      	movs	r2, #0
 8004412:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004414:	f7ff ff90 	bl	8004338 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004418:	f7ff f82e 	bl	8003478 <vTaskSwitchContext>
    prvTaskExitError();
 800441c:	f7ff ff4a 	bl	80042b4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	e000e400 	.word	0xe000e400
 8004430:	200005f4 	.word	0x200005f4
 8004434:	200005f8 	.word	0x200005f8
 8004438:	e000ed20 	.word	0xe000ed20
 800443c:	20000018 	.word	0x20000018

08004440 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
        __asm volatile
 8004446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444a:	f383 8811 	msr	BASEPRI, r3
 800444e:	f3bf 8f6f 	isb	sy
 8004452:	f3bf 8f4f 	dsb	sy
 8004456:	607b      	str	r3, [r7, #4]
    }
 8004458:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800445a:	4b0f      	ldr	r3, [pc, #60]	; (8004498 <vPortEnterCritical+0x58>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	3301      	adds	r3, #1
 8004460:	4a0d      	ldr	r2, [pc, #52]	; (8004498 <vPortEnterCritical+0x58>)
 8004462:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004464:	4b0c      	ldr	r3, [pc, #48]	; (8004498 <vPortEnterCritical+0x58>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d10f      	bne.n	800448c <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800446c:	4b0b      	ldr	r3, [pc, #44]	; (800449c <vPortEnterCritical+0x5c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00a      	beq.n	800448c <vPortEnterCritical+0x4c>
        __asm volatile
 8004476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447a:	f383 8811 	msr	BASEPRI, r3
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	603b      	str	r3, [r7, #0]
    }
 8004488:	bf00      	nop
 800448a:	e7fe      	b.n	800448a <vPortEnterCritical+0x4a>
    }
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	bc80      	pop	{r7}
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	20000018 	.word	0x20000018
 800449c:	e000ed04 	.word	0xe000ed04

080044a0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80044a6:	4b11      	ldr	r3, [pc, #68]	; (80044ec <vPortExitCritical+0x4c>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10a      	bne.n	80044c4 <vPortExitCritical+0x24>
        __asm volatile
 80044ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b2:	f383 8811 	msr	BASEPRI, r3
 80044b6:	f3bf 8f6f 	isb	sy
 80044ba:	f3bf 8f4f 	dsb	sy
 80044be:	607b      	str	r3, [r7, #4]
    }
 80044c0:	bf00      	nop
 80044c2:	e7fe      	b.n	80044c2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80044c4:	4b09      	ldr	r3, [pc, #36]	; (80044ec <vPortExitCritical+0x4c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	3b01      	subs	r3, #1
 80044ca:	4a08      	ldr	r2, [pc, #32]	; (80044ec <vPortExitCritical+0x4c>)
 80044cc:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80044ce:	4b07      	ldr	r3, [pc, #28]	; (80044ec <vPortExitCritical+0x4c>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d105      	bne.n	80044e2 <vPortExitCritical+0x42>
 80044d6:	2300      	movs	r3, #0
 80044d8:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80044e0:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80044e2:	bf00      	nop
 80044e4:	370c      	adds	r7, #12
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bc80      	pop	{r7}
 80044ea:	4770      	bx	lr
 80044ec:	20000018 	.word	0x20000018

080044f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80044f0:	f3ef 8009 	mrs	r0, PSP
 80044f4:	f3bf 8f6f 	isb	sy
 80044f8:	4b0d      	ldr	r3, [pc, #52]	; (8004530 <pxCurrentTCBConst>)
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004500:	6010      	str	r0, [r2, #0]
 8004502:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004506:	f04f 0050 	mov.w	r0, #80	; 0x50
 800450a:	f380 8811 	msr	BASEPRI, r0
 800450e:	f7fe ffb3 	bl	8003478 <vTaskSwitchContext>
 8004512:	f04f 0000 	mov.w	r0, #0
 8004516:	f380 8811 	msr	BASEPRI, r0
 800451a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800451e:	6819      	ldr	r1, [r3, #0]
 8004520:	6808      	ldr	r0, [r1, #0]
 8004522:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004526:	f380 8809 	msr	PSP, r0
 800452a:	f3bf 8f6f 	isb	sy
 800452e:	4770      	bx	lr

08004530 <pxCurrentTCBConst>:
 8004530:	200004a8 	.word	0x200004a8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004534:	bf00      	nop
 8004536:	bf00      	nop

08004538 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
        __asm volatile
 800453e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004542:	f383 8811 	msr	BASEPRI, r3
 8004546:	f3bf 8f6f 	isb	sy
 800454a:	f3bf 8f4f 	dsb	sy
 800454e:	607b      	str	r3, [r7, #4]
    }
 8004550:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004552:	f7fe fe79 	bl	8003248 <xTaskIncrementTick>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d003      	beq.n	8004564 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800455c:	4b06      	ldr	r3, [pc, #24]	; (8004578 <SysTick_Handler+0x40>)
 800455e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004562:	601a      	str	r2, [r3, #0]
 8004564:	2300      	movs	r3, #0
 8004566:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	f383 8811 	msr	BASEPRI, r3
    }
 800456e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004570:	bf00      	nop
 8004572:	3708      	adds	r7, #8
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	e000ed04 	.word	0xe000ed04

0800457c <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE == 1 )

    __attribute__( ( weak ) ) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
    {
 800457c:	b580      	push	{r7, lr}
 800457e:	b088      	sub	sp, #32
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
        uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements, ulSysTickDecrementsLeft;
        TickType_t xModifiableIdleTime;

        /* Make sure the SysTick reload value does not overflow the counter. */
        if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 8004584:	4b5b      	ldr	r3, [pc, #364]	; (80046f4 <vPortSuppressTicksAndSleep+0x178>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	429a      	cmp	r2, r3
 800458c:	d902      	bls.n	8004594 <vPortSuppressTicksAndSleep+0x18>
        {
            xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800458e:	4b59      	ldr	r3, [pc, #356]	; (80046f4 <vPortSuppressTicksAndSleep+0x178>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	607b      	str	r3, [r7, #4]
        }

        /* Enter a critical section but don't use the taskENTER_CRITICAL()
         * method as that will mask interrupts that should exit sleep mode. */
        __asm volatile ( "cpsid i" ::: "memory" );
 8004594:	b672      	cpsid	i
        __asm volatile ( "dsb" );
 8004596:	f3bf 8f4f 	dsb	sy
        __asm volatile ( "isb" );
 800459a:	f3bf 8f6f 	isb	sy

        /* If a context switch is pending or a task is waiting for the scheduler
         * to be unsuspended then abandon the low power entry. */
        if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800459e:	f7ff f9d1 	bl	8003944 <eTaskConfirmSleepModeStatus>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <vPortSuppressTicksAndSleep+0x30>
        {
            /* Re-enable interrupts - see comments above the cpsid instruction
             * above. */
            __asm volatile ( "cpsie i" ::: "memory" );
 80045a8:	b662      	cpsie	i
            vTaskStepTick( ulCompleteTickPeriods );

            /* Exit with interrupts enabled. */
            __asm volatile ( "cpsie i" ::: "memory" );
        }
    }
 80045aa:	e09e      	b.n	80046ea <vPortSuppressTicksAndSleep+0x16e>
            portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT );
 80045ac:	4b52      	ldr	r3, [pc, #328]	; (80046f8 <vPortSuppressTicksAndSleep+0x17c>)
 80045ae:	2206      	movs	r2, #6
 80045b0:	601a      	str	r2, [r3, #0]
            ulSysTickDecrementsLeft = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 80045b2:	4b52      	ldr	r3, [pc, #328]	; (80046fc <vPortSuppressTicksAndSleep+0x180>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	617b      	str	r3, [r7, #20]
            if( ulSysTickDecrementsLeft == 0 )
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d102      	bne.n	80045c4 <vPortSuppressTicksAndSleep+0x48>
                ulSysTickDecrementsLeft = ulTimerCountsForOneTick;
 80045be:	4b50      	ldr	r3, [pc, #320]	; (8004700 <vPortSuppressTicksAndSleep+0x184>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	617b      	str	r3, [r7, #20]
            ulReloadValue = ulSysTickDecrementsLeft + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	3b01      	subs	r3, #1
 80045c8:	4a4d      	ldr	r2, [pc, #308]	; (8004700 <vPortSuppressTicksAndSleep+0x184>)
 80045ca:	6812      	ldr	r2, [r2, #0]
 80045cc:	fb02 f303 	mul.w	r3, r2, r3
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	4413      	add	r3, r2
 80045d4:	61fb      	str	r3, [r7, #28]
            if( ( portNVIC_INT_CTRL_REG & portNVIC_PEND_SYSTICK_SET_BIT ) != 0 )
 80045d6:	4b4b      	ldr	r3, [pc, #300]	; (8004704 <vPortSuppressTicksAndSleep+0x188>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d008      	beq.n	80045f4 <vPortSuppressTicksAndSleep+0x78>
                portNVIC_INT_CTRL_REG = portNVIC_PEND_SYSTICK_CLEAR_BIT;
 80045e2:	4b48      	ldr	r3, [pc, #288]	; (8004704 <vPortSuppressTicksAndSleep+0x188>)
 80045e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045e8:	601a      	str	r2, [r3, #0]
                ulReloadValue -= ulTimerCountsForOneTick;
 80045ea:	4b45      	ldr	r3, [pc, #276]	; (8004700 <vPortSuppressTicksAndSleep+0x184>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	69fa      	ldr	r2, [r7, #28]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	61fb      	str	r3, [r7, #28]
            if( ulReloadValue > ulStoppedTimerCompensation )
 80045f4:	4b44      	ldr	r3, [pc, #272]	; (8004708 <vPortSuppressTicksAndSleep+0x18c>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	69fa      	ldr	r2, [r7, #28]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d904      	bls.n	8004608 <vPortSuppressTicksAndSleep+0x8c>
                ulReloadValue -= ulStoppedTimerCompensation;
 80045fe:	4b42      	ldr	r3, [pc, #264]	; (8004708 <vPortSuppressTicksAndSleep+0x18c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	69fa      	ldr	r2, [r7, #28]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	61fb      	str	r3, [r7, #28]
            portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 8004608:	4a40      	ldr	r2, [pc, #256]	; (800470c <vPortSuppressTicksAndSleep+0x190>)
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	6013      	str	r3, [r2, #0]
            portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800460e:	4b3b      	ldr	r3, [pc, #236]	; (80046fc <vPortSuppressTicksAndSleep+0x180>)
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]
            portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8004614:	4b38      	ldr	r3, [pc, #224]	; (80046f8 <vPortSuppressTicksAndSleep+0x17c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a37      	ldr	r2, [pc, #220]	; (80046f8 <vPortSuppressTicksAndSleep+0x17c>)
 800461a:	f043 0301 	orr.w	r3, r3, #1
 800461e:	6013      	str	r3, [r2, #0]
            xModifiableIdleTime = xExpectedIdleTime;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	60fb      	str	r3, [r7, #12]
            if( xModifiableIdleTime > 0 )
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d004      	beq.n	8004634 <vPortSuppressTicksAndSleep+0xb8>
                __asm volatile ( "dsb" ::: "memory" );
 800462a:	f3bf 8f4f 	dsb	sy
                __asm volatile ( "wfi" );
 800462e:	bf30      	wfi
                __asm volatile ( "isb" );
 8004630:	f3bf 8f6f 	isb	sy
            __asm volatile ( "cpsie i" ::: "memory" );
 8004634:	b662      	cpsie	i
            __asm volatile ( "dsb" );
 8004636:	f3bf 8f4f 	dsb	sy
            __asm volatile ( "isb" );
 800463a:	f3bf 8f6f 	isb	sy
            __asm volatile ( "cpsid i" ::: "memory" );
 800463e:	b672      	cpsid	i
            __asm volatile ( "dsb" );
 8004640:	f3bf 8f4f 	dsb	sy
            __asm volatile ( "isb" );
 8004644:	f3bf 8f6f 	isb	sy
            portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT );
 8004648:	4b2b      	ldr	r3, [pc, #172]	; (80046f8 <vPortSuppressTicksAndSleep+0x17c>)
 800464a:	2206      	movs	r2, #6
 800464c:	601a      	str	r2, [r3, #0]
            if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800464e:	4b2a      	ldr	r3, [pc, #168]	; (80046f8 <vPortSuppressTicksAndSleep+0x17c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d01d      	beq.n	8004696 <vPortSuppressTicksAndSleep+0x11a>
                ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800465a:	4b29      	ldr	r3, [pc, #164]	; (8004700 <vPortSuppressTicksAndSleep+0x184>)
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	4b27      	ldr	r3, [pc, #156]	; (80046fc <vPortSuppressTicksAndSleep+0x180>)
 8004660:	6819      	ldr	r1, [r3, #0]
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	1acb      	subs	r3, r1, r3
 8004666:	4413      	add	r3, r2
 8004668:	3b01      	subs	r3, #1
 800466a:	613b      	str	r3, [r7, #16]
                if( ( ulCalculatedLoadValue <= ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800466c:	4b26      	ldr	r3, [pc, #152]	; (8004708 <vPortSuppressTicksAndSleep+0x18c>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	429a      	cmp	r2, r3
 8004674:	d904      	bls.n	8004680 <vPortSuppressTicksAndSleep+0x104>
 8004676:	4b22      	ldr	r3, [pc, #136]	; (8004700 <vPortSuppressTicksAndSleep+0x184>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	429a      	cmp	r2, r3
 800467e:	d903      	bls.n	8004688 <vPortSuppressTicksAndSleep+0x10c>
                    ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 8004680:	4b1f      	ldr	r3, [pc, #124]	; (8004700 <vPortSuppressTicksAndSleep+0x184>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	3b01      	subs	r3, #1
 8004686:	613b      	str	r3, [r7, #16]
                portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 8004688:	4a20      	ldr	r2, [pc, #128]	; (800470c <vPortSuppressTicksAndSleep+0x190>)
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	6013      	str	r3, [r2, #0]
                ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	3b01      	subs	r3, #1
 8004692:	61bb      	str	r3, [r7, #24]
 8004694:	e01a      	b.n	80046cc <vPortSuppressTicksAndSleep+0x150>
                ulSysTickDecrementsLeft = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8004696:	4b19      	ldr	r3, [pc, #100]	; (80046fc <vPortSuppressTicksAndSleep+0x180>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	617b      	str	r3, [r7, #20]
                ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - ulSysTickDecrementsLeft;
 800469c:	4b18      	ldr	r3, [pc, #96]	; (8004700 <vPortSuppressTicksAndSleep+0x184>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	fb02 f203 	mul.w	r2, r2, r3
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	60bb      	str	r3, [r7, #8]
                ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 80046ac:	4b14      	ldr	r3, [pc, #80]	; (8004700 <vPortSuppressTicksAndSleep+0x184>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b6:	61bb      	str	r3, [r7, #24]
                portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	3301      	adds	r3, #1
 80046bc:	4a10      	ldr	r2, [pc, #64]	; (8004700 <vPortSuppressTicksAndSleep+0x184>)
 80046be:	6812      	ldr	r2, [r2, #0]
 80046c0:	fb02 f203 	mul.w	r2, r2, r3
 80046c4:	4911      	ldr	r1, [pc, #68]	; (800470c <vPortSuppressTicksAndSleep+0x190>)
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	600b      	str	r3, [r1, #0]
            portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80046cc:	4b0b      	ldr	r3, [pc, #44]	; (80046fc <vPortSuppressTicksAndSleep+0x180>)
 80046ce:	2200      	movs	r2, #0
 80046d0:	601a      	str	r2, [r3, #0]
            portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 80046d2:	4b09      	ldr	r3, [pc, #36]	; (80046f8 <vPortSuppressTicksAndSleep+0x17c>)
 80046d4:	2207      	movs	r2, #7
 80046d6:	601a      	str	r2, [r3, #0]
                portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 80046d8:	4b09      	ldr	r3, [pc, #36]	; (8004700 <vPortSuppressTicksAndSleep+0x184>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a0b      	ldr	r2, [pc, #44]	; (800470c <vPortSuppressTicksAndSleep+0x190>)
 80046de:	3b01      	subs	r3, #1
 80046e0:	6013      	str	r3, [r2, #0]
            vTaskStepTick( ulCompleteTickPeriods );
 80046e2:	69b8      	ldr	r0, [r7, #24]
 80046e4:	f7fe fd56 	bl	8003194 <vTaskStepTick>
            __asm volatile ( "cpsie i" ::: "memory" );
 80046e8:	b662      	cpsie	i
    }
 80046ea:	bf00      	nop
 80046ec:	3720      	adds	r7, #32
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	200005ec 	.word	0x200005ec
 80046f8:	e000e010 	.word	0xe000e010
 80046fc:	e000e018 	.word	0xe000e018
 8004700:	200005e8 	.word	0x200005e8
 8004704:	e000ed04 	.word	0xe000ed04
 8004708:	200005f0 	.word	0x200005f0
 800470c:	e000e014 	.word	0xe000e014

08004710 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004710:	b480      	push	{r7}
 8004712:	af00      	add	r7, sp, #0
    /* Calculate the constants required to configure the tick interrupt. */
    #if ( configUSE_TICKLESS_IDLE == 1 )
    {
        ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8004714:	4b14      	ldr	r3, [pc, #80]	; (8004768 <vPortSetupTimerInterrupt+0x58>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a14      	ldr	r2, [pc, #80]	; (800476c <vPortSetupTimerInterrupt+0x5c>)
 800471a:	fba2 2303 	umull	r2, r3, r2, r3
 800471e:	099b      	lsrs	r3, r3, #6
 8004720:	4a13      	ldr	r2, [pc, #76]	; (8004770 <vPortSetupTimerInterrupt+0x60>)
 8004722:	6013      	str	r3, [r2, #0]
        xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 8004724:	4b12      	ldr	r3, [pc, #72]	; (8004770 <vPortSetupTimerInterrupt+0x60>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800472c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004730:	4a10      	ldr	r2, [pc, #64]	; (8004774 <vPortSetupTimerInterrupt+0x64>)
 8004732:	6013      	str	r3, [r2, #0]
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 8004734:	4b10      	ldr	r3, [pc, #64]	; (8004778 <vPortSetupTimerInterrupt+0x68>)
 8004736:	225e      	movs	r2, #94	; 0x5e
 8004738:	601a      	str	r2, [r3, #0]
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800473a:	4b10      	ldr	r3, [pc, #64]	; (800477c <vPortSetupTimerInterrupt+0x6c>)
 800473c:	2200      	movs	r2, #0
 800473e:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004740:	4b0f      	ldr	r3, [pc, #60]	; (8004780 <vPortSetupTimerInterrupt+0x70>)
 8004742:	2200      	movs	r2, #0
 8004744:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004746:	4b08      	ldr	r3, [pc, #32]	; (8004768 <vPortSetupTimerInterrupt+0x58>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a08      	ldr	r2, [pc, #32]	; (800476c <vPortSetupTimerInterrupt+0x5c>)
 800474c:	fba2 2303 	umull	r2, r3, r2, r3
 8004750:	099b      	lsrs	r3, r3, #6
 8004752:	4a0c      	ldr	r2, [pc, #48]	; (8004784 <vPortSetupTimerInterrupt+0x74>)
 8004754:	3b01      	subs	r3, #1
 8004756:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004758:	4b08      	ldr	r3, [pc, #32]	; (800477c <vPortSetupTimerInterrupt+0x6c>)
 800475a:	2207      	movs	r2, #7
 800475c:	601a      	str	r2, [r3, #0]
}
 800475e:	bf00      	nop
 8004760:	46bd      	mov	sp, r7
 8004762:	bc80      	pop	{r7}
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	20000000 	.word	0x20000000
 800476c:	10624dd3 	.word	0x10624dd3
 8004770:	200005e8 	.word	0x200005e8
 8004774:	200005ec 	.word	0x200005ec
 8004778:	200005f0 	.word	0x200005f0
 800477c:	e000e010 	.word	0xe000e010
 8004780:	e000e018 	.word	0xe000e018
 8004784:	e000e014 	.word	0xe000e014

08004788 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8004792:	2301      	movs	r3, #1
 8004794:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10a      	bne.n	80047b6 <xQueueGenericReset+0x2e>
        __asm volatile
 80047a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a4:	f383 8811 	msr	BASEPRI, r3
 80047a8:	f3bf 8f6f 	isb	sy
 80047ac:	f3bf 8f4f 	dsb	sy
 80047b0:	60fb      	str	r3, [r7, #12]
    }
 80047b2:	bf00      	nop
 80047b4:	e7fe      	b.n	80047b4 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d05d      	beq.n	8004878 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d059      	beq.n	8004878 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047cc:	2100      	movs	r1, #0
 80047ce:	fba3 2302 	umull	r2, r3, r3, r2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d000      	beq.n	80047d8 <xQueueGenericReset+0x50>
 80047d6:	2101      	movs	r1, #1
 80047d8:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d14c      	bne.n	8004878 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80047de:	f7ff fe2f 	bl	8004440 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ea:	6939      	ldr	r1, [r7, #16]
 80047ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80047ee:	fb01 f303 	mul.w	r3, r1, r3
 80047f2:	441a      	add	r2, r3
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	2200      	movs	r2, #0
 80047fc:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800480e:	3b01      	subs	r3, #1
 8004810:	6939      	ldr	r1, [r7, #16]
 8004812:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004814:	fb01 f303 	mul.w	r3, r1, r3
 8004818:	441a      	add	r2, r3
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	22ff      	movs	r2, #255	; 0xff
 8004822:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	22ff      	movs	r2, #255	; 0xff
 800482a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d114      	bne.n	800485e <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d01a      	beq.n	8004872 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	3310      	adds	r3, #16
 8004840:	4618      	mov	r0, r3
 8004842:	f7fe fedf 	bl	8003604 <xTaskRemoveFromEventList>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d012      	beq.n	8004872 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800484c:	4b15      	ldr	r3, [pc, #84]	; (80048a4 <xQueueGenericReset+0x11c>)
 800484e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004852:	601a      	str	r2, [r3, #0]
 8004854:	f3bf 8f4f 	dsb	sy
 8004858:	f3bf 8f6f 	isb	sy
 800485c:	e009      	b.n	8004872 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	3310      	adds	r3, #16
 8004862:	4618      	mov	r0, r3
 8004864:	f7ff fc6e 	bl	8004144 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	3324      	adds	r3, #36	; 0x24
 800486c:	4618      	mov	r0, r3
 800486e:	f7ff fc69 	bl	8004144 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8004872:	f7ff fe15 	bl	80044a0 <vPortExitCritical>
 8004876:	e001      	b.n	800487c <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8004878:	2300      	movs	r3, #0
 800487a:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10a      	bne.n	8004898 <xQueueGenericReset+0x110>
        __asm volatile
 8004882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004886:	f383 8811 	msr	BASEPRI, r3
 800488a:	f3bf 8f6f 	isb	sy
 800488e:	f3bf 8f4f 	dsb	sy
 8004892:	60bb      	str	r3, [r7, #8]
    }
 8004894:	bf00      	nop
 8004896:	e7fe      	b.n	8004896 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8004898:	697b      	ldr	r3, [r7, #20]
}
 800489a:	4618      	mov	r0, r3
 800489c:	3718      	adds	r7, #24
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	e000ed04 	.word	0xe000ed04

080048a8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b08a      	sub	sp, #40	; 0x28
 80048ac:	af02      	add	r7, sp, #8
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	4613      	mov	r3, r2
 80048b4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80048b6:	2300      	movs	r3, #0
 80048b8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d02e      	beq.n	800491e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80048c0:	2100      	movs	r1, #0
 80048c2:	68ba      	ldr	r2, [r7, #8]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	fba3 2302 	umull	r2, r3, r3, r2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d000      	beq.n	80048d0 <xQueueGenericCreate+0x28>
 80048ce:	2101      	movs	r1, #1
 80048d0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d123      	bne.n	800491e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80048de:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80048e2:	d81c      	bhi.n	800491e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	fb02 f303 	mul.w	r3, r2, r3
 80048ec:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	3350      	adds	r3, #80	; 0x50
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7ff fc02 	bl	80040fc <pvPortMalloc>
 80048f8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d01c      	beq.n	800493a <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	3350      	adds	r3, #80	; 0x50
 8004908:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800490a:	79fa      	ldrb	r2, [r7, #7]
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	9300      	str	r3, [sp, #0]
 8004910:	4613      	mov	r3, r2
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	68b9      	ldr	r1, [r7, #8]
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 f814 	bl	8004944 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800491c:	e00d      	b.n	800493a <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10a      	bne.n	800493a <xQueueGenericCreate+0x92>
        __asm volatile
 8004924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004928:	f383 8811 	msr	BASEPRI, r3
 800492c:	f3bf 8f6f 	isb	sy
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	613b      	str	r3, [r7, #16]
    }
 8004936:	bf00      	nop
 8004938:	e7fe      	b.n	8004938 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800493a:	69fb      	ldr	r3, [r7, #28]
    }
 800493c:	4618      	mov	r0, r3
 800493e:	3720      	adds	r7, #32
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
 8004950:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d103      	bne.n	8004960 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	601a      	str	r2, [r3, #0]
 800495e:	e002      	b.n	8004966 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004972:	2101      	movs	r1, #1
 8004974:	69b8      	ldr	r0, [r7, #24]
 8004976:	f7ff ff07 	bl	8004788 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	78fa      	ldrb	r2, [r7, #3]
 800497e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8004982:	bf00      	nop
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
	...

0800498c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b08c      	sub	sp, #48	; 0x30
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004998:	2300      	movs	r3, #0
 800499a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80049a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10a      	bne.n	80049bc <xQueueReceive+0x30>
        __asm volatile
 80049a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049aa:	f383 8811 	msr	BASEPRI, r3
 80049ae:	f3bf 8f6f 	isb	sy
 80049b2:	f3bf 8f4f 	dsb	sy
 80049b6:	623b      	str	r3, [r7, #32]
    }
 80049b8:	bf00      	nop
 80049ba:	e7fe      	b.n	80049ba <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d103      	bne.n	80049ca <xQueueReceive+0x3e>
 80049c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <xQueueReceive+0x42>
 80049ca:	2301      	movs	r3, #1
 80049cc:	e000      	b.n	80049d0 <xQueueReceive+0x44>
 80049ce:	2300      	movs	r3, #0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10a      	bne.n	80049ea <xQueueReceive+0x5e>
        __asm volatile
 80049d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d8:	f383 8811 	msr	BASEPRI, r3
 80049dc:	f3bf 8f6f 	isb	sy
 80049e0:	f3bf 8f4f 	dsb	sy
 80049e4:	61fb      	str	r3, [r7, #28]
    }
 80049e6:	bf00      	nop
 80049e8:	e7fe      	b.n	80049e8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049ea:	f7ff f879 	bl	8003ae0 <xTaskGetSchedulerState>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d102      	bne.n	80049fa <xQueueReceive+0x6e>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <xQueueReceive+0x72>
 80049fa:	2301      	movs	r3, #1
 80049fc:	e000      	b.n	8004a00 <xQueueReceive+0x74>
 80049fe:	2300      	movs	r3, #0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d10a      	bne.n	8004a1a <xQueueReceive+0x8e>
        __asm volatile
 8004a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a08:	f383 8811 	msr	BASEPRI, r3
 8004a0c:	f3bf 8f6f 	isb	sy
 8004a10:	f3bf 8f4f 	dsb	sy
 8004a14:	61bb      	str	r3, [r7, #24]
    }
 8004a16:	bf00      	nop
 8004a18:	e7fe      	b.n	8004a18 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004a1a:	f7ff fd11 	bl	8004440 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a22:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d01f      	beq.n	8004a6a <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a2a:	68b9      	ldr	r1, [r7, #8]
 8004a2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a2e:	f000 f88d 	bl	8004b4c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	1e5a      	subs	r2, r3, #1
 8004a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a38:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00f      	beq.n	8004a62 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a44:	3310      	adds	r3, #16
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fe fddc 	bl	8003604 <xTaskRemoveFromEventList>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d007      	beq.n	8004a62 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004a52:	4b3d      	ldr	r3, [pc, #244]	; (8004b48 <xQueueReceive+0x1bc>)
 8004a54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a58:	601a      	str	r2, [r3, #0]
 8004a5a:	f3bf 8f4f 	dsb	sy
 8004a5e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004a62:	f7ff fd1d 	bl	80044a0 <vPortExitCritical>
                return pdPASS;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e069      	b.n	8004b3e <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d103      	bne.n	8004a78 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004a70:	f7ff fd16 	bl	80044a0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8004a74:	2300      	movs	r3, #0
 8004a76:	e062      	b.n	8004b3e <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d106      	bne.n	8004a8c <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004a7e:	f107 0310 	add.w	r3, r7, #16
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7fe fe96 	bl	80037b4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004a8c:	f7ff fd08 	bl	80044a0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004a90:	f7fe fa32 	bl	8002ef8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004a94:	f7ff fcd4 	bl	8004440 <vPortEnterCritical>
 8004a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a9e:	b25b      	sxtb	r3, r3
 8004aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa4:	d103      	bne.n	8004aae <xQueueReceive+0x122>
 8004aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ab4:	b25b      	sxtb	r3, r3
 8004ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aba:	d103      	bne.n	8004ac4 <xQueueReceive+0x138>
 8004abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ac4:	f7ff fcec 	bl	80044a0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ac8:	1d3a      	adds	r2, r7, #4
 8004aca:	f107 0310 	add.w	r3, r7, #16
 8004ace:	4611      	mov	r1, r2
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7fe fe85 	bl	80037e0 <xTaskCheckForTimeOut>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d123      	bne.n	8004b24 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004adc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ade:	f000 f8ad 	bl	8004c3c <prvIsQueueEmpty>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d017      	beq.n	8004b18 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aea:	3324      	adds	r3, #36	; 0x24
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	4611      	mov	r1, r2
 8004af0:	4618      	mov	r0, r3
 8004af2:	f7fe fd1d 	bl	8003530 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004af6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004af8:	f000 f84e 	bl	8004b98 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004afc:	f7fe fa40 	bl	8002f80 <xTaskResumeAll>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d189      	bne.n	8004a1a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8004b06:	4b10      	ldr	r3, [pc, #64]	; (8004b48 <xQueueReceive+0x1bc>)
 8004b08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b0c:	601a      	str	r2, [r3, #0]
 8004b0e:	f3bf 8f4f 	dsb	sy
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	e780      	b.n	8004a1a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004b18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b1a:	f000 f83d 	bl	8004b98 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004b1e:	f7fe fa2f 	bl	8002f80 <xTaskResumeAll>
 8004b22:	e77a      	b.n	8004a1a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004b24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b26:	f000 f837 	bl	8004b98 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004b2a:	f7fe fa29 	bl	8002f80 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b30:	f000 f884 	bl	8004c3c <prvIsQueueEmpty>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f43f af6f 	beq.w	8004a1a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004b3c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3730      	adds	r7, #48	; 0x30
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	e000ed04 	.word	0xe000ed04

08004b4c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d018      	beq.n	8004b90 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68da      	ldr	r2, [r3, #12]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b66:	441a      	add	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68da      	ldr	r2, [r3, #12]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d303      	bcc.n	8004b80 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68d9      	ldr	r1, [r3, #12]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b88:	461a      	mov	r2, r3
 8004b8a:	6838      	ldr	r0, [r7, #0]
 8004b8c:	f000 f928 	bl	8004de0 <memcpy>
    }
}
 8004b90:	bf00      	nop
 8004b92:	3708      	adds	r7, #8
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004ba0:	f7ff fc4e 	bl	8004440 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004baa:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004bac:	e011      	b.n	8004bd2 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d012      	beq.n	8004bdc <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	3324      	adds	r3, #36	; 0x24
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7fe fd22 	bl	8003604 <xTaskRemoveFromEventList>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8004bc6:	f7fe fe71 	bl	80038ac <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004bca:	7bfb      	ldrb	r3, [r7, #15]
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	dce9      	bgt.n	8004bae <prvUnlockQueue+0x16>
 8004bda:	e000      	b.n	8004bde <prvUnlockQueue+0x46>
                    break;
 8004bdc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	22ff      	movs	r2, #255	; 0xff
 8004be2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8004be6:	f7ff fc5b 	bl	80044a0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004bea:	f7ff fc29 	bl	8004440 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bf4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004bf6:	e011      	b.n	8004c1c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d012      	beq.n	8004c26 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	3310      	adds	r3, #16
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7fe fcfd 	bl	8003604 <xTaskRemoveFromEventList>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d001      	beq.n	8004c14 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8004c10:	f7fe fe4c 	bl	80038ac <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004c14:	7bbb      	ldrb	r3, [r7, #14]
 8004c16:	3b01      	subs	r3, #1
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	dce9      	bgt.n	8004bf8 <prvUnlockQueue+0x60>
 8004c24:	e000      	b.n	8004c28 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8004c26:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	22ff      	movs	r2, #255	; 0xff
 8004c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8004c30:	f7ff fc36 	bl	80044a0 <vPortExitCritical>
}
 8004c34:	bf00      	nop
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004c44:	f7ff fbfc 	bl	8004440 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d102      	bne.n	8004c56 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004c50:	2301      	movs	r3, #1
 8004c52:	60fb      	str	r3, [r7, #12]
 8004c54:	e001      	b.n	8004c5a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8004c56:	2300      	movs	r3, #0
 8004c58:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004c5a:	f7ff fc21 	bl	80044a0 <vPortExitCritical>

    return xReturn;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8004c68:	b480      	push	{r7}
 8004c6a:	b087      	sub	sp, #28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8004c72:	2300      	movs	r3, #0
 8004c74:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10a      	bne.n	8004c92 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8004c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c80:	f383 8811 	msr	BASEPRI, r3
 8004c84:	f3bf 8f6f 	isb	sy
 8004c88:	f3bf 8f4f 	dsb	sy
 8004c8c:	60fb      	str	r3, [r7, #12]
    }
 8004c8e:	bf00      	nop
 8004c90:	e7fe      	b.n	8004c90 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d024      	beq.n	8004ce2 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c98:	2300      	movs	r3, #0
 8004c9a:	617b      	str	r3, [r7, #20]
 8004c9c:	e01e      	b.n	8004cdc <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8004c9e:	4a18      	ldr	r2, [pc, #96]	; (8004d00 <vQueueAddToRegistry+0x98>)
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	00db      	lsls	r3, r3, #3
 8004ca4:	4413      	add	r3, r2
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d105      	bne.n	8004cba <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	00db      	lsls	r3, r3, #3
 8004cb2:	4a13      	ldr	r2, [pc, #76]	; (8004d00 <vQueueAddToRegistry+0x98>)
 8004cb4:	4413      	add	r3, r2
 8004cb6:	613b      	str	r3, [r7, #16]
                    break;
 8004cb8:	e013      	b.n	8004ce2 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10a      	bne.n	8004cd6 <vQueueAddToRegistry+0x6e>
 8004cc0:	4a0f      	ldr	r2, [pc, #60]	; (8004d00 <vQueueAddToRegistry+0x98>)
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d104      	bne.n	8004cd6 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	00db      	lsls	r3, r3, #3
 8004cd0:	4a0b      	ldr	r2, [pc, #44]	; (8004d00 <vQueueAddToRegistry+0x98>)
 8004cd2:	4413      	add	r3, r2
 8004cd4:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	617b      	str	r3, [r7, #20]
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	2b07      	cmp	r3, #7
 8004ce0:	d9dd      	bls.n	8004c9e <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d005      	beq.n	8004cf4 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8004cf4:	bf00      	nop
 8004cf6:	371c      	adds	r7, #28
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bc80      	pop	{r7}
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	200006f0 	.word	0x200006f0

08004d04 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b086      	sub	sp, #24
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8004d14:	f7ff fb94 	bl	8004440 <vPortEnterCritical>
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d1e:	b25b      	sxtb	r3, r3
 8004d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d24:	d103      	bne.n	8004d2e <vQueueWaitForMessageRestricted+0x2a>
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d34:	b25b      	sxtb	r3, r3
 8004d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d3a:	d103      	bne.n	8004d44 <vQueueWaitForMessageRestricted+0x40>
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d44:	f7ff fbac 	bl	80044a0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d106      	bne.n	8004d5e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	3324      	adds	r3, #36	; 0x24
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	68b9      	ldr	r1, [r7, #8]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7fe fc0d 	bl	8003578 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8004d5e:	6978      	ldr	r0, [r7, #20]
 8004d60:	f7ff ff1a 	bl	8004b98 <prvUnlockQueue>
    }
 8004d64:	bf00      	nop
 8004d66:	3718      	adds	r7, #24
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <__errno>:
 8004d6c:	4b01      	ldr	r3, [pc, #4]	; (8004d74 <__errno+0x8>)
 8004d6e:	6818      	ldr	r0, [r3, #0]
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	2000001c 	.word	0x2000001c

08004d78 <__libc_init_array>:
 8004d78:	b570      	push	{r4, r5, r6, lr}
 8004d7a:	2600      	movs	r6, #0
 8004d7c:	4d0c      	ldr	r5, [pc, #48]	; (8004db0 <__libc_init_array+0x38>)
 8004d7e:	4c0d      	ldr	r4, [pc, #52]	; (8004db4 <__libc_init_array+0x3c>)
 8004d80:	1b64      	subs	r4, r4, r5
 8004d82:	10a4      	asrs	r4, r4, #2
 8004d84:	42a6      	cmp	r6, r4
 8004d86:	d109      	bne.n	8004d9c <__libc_init_array+0x24>
 8004d88:	f000 fc6c 	bl	8005664 <_init>
 8004d8c:	2600      	movs	r6, #0
 8004d8e:	4d0a      	ldr	r5, [pc, #40]	; (8004db8 <__libc_init_array+0x40>)
 8004d90:	4c0a      	ldr	r4, [pc, #40]	; (8004dbc <__libc_init_array+0x44>)
 8004d92:	1b64      	subs	r4, r4, r5
 8004d94:	10a4      	asrs	r4, r4, #2
 8004d96:	42a6      	cmp	r6, r4
 8004d98:	d105      	bne.n	8004da6 <__libc_init_array+0x2e>
 8004d9a:	bd70      	pop	{r4, r5, r6, pc}
 8004d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004da0:	4798      	blx	r3
 8004da2:	3601      	adds	r6, #1
 8004da4:	e7ee      	b.n	8004d84 <__libc_init_array+0xc>
 8004da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004daa:	4798      	blx	r3
 8004dac:	3601      	adds	r6, #1
 8004dae:	e7f2      	b.n	8004d96 <__libc_init_array+0x1e>
 8004db0:	08005e70 	.word	0x08005e70
 8004db4:	08005e70 	.word	0x08005e70
 8004db8:	08005e70 	.word	0x08005e70
 8004dbc:	08005e74 	.word	0x08005e74

08004dc0 <malloc>:
 8004dc0:	4b02      	ldr	r3, [pc, #8]	; (8004dcc <malloc+0xc>)
 8004dc2:	4601      	mov	r1, r0
 8004dc4:	6818      	ldr	r0, [r3, #0]
 8004dc6:	f000 b86d 	b.w	8004ea4 <_malloc_r>
 8004dca:	bf00      	nop
 8004dcc:	2000001c 	.word	0x2000001c

08004dd0 <free>:
 8004dd0:	4b02      	ldr	r3, [pc, #8]	; (8004ddc <free+0xc>)
 8004dd2:	4601      	mov	r1, r0
 8004dd4:	6818      	ldr	r0, [r3, #0]
 8004dd6:	f000 b819 	b.w	8004e0c <_free_r>
 8004dda:	bf00      	nop
 8004ddc:	2000001c 	.word	0x2000001c

08004de0 <memcpy>:
 8004de0:	440a      	add	r2, r1
 8004de2:	4291      	cmp	r1, r2
 8004de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004de8:	d100      	bne.n	8004dec <memcpy+0xc>
 8004dea:	4770      	bx	lr
 8004dec:	b510      	push	{r4, lr}
 8004dee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004df2:	4291      	cmp	r1, r2
 8004df4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004df8:	d1f9      	bne.n	8004dee <memcpy+0xe>
 8004dfa:	bd10      	pop	{r4, pc}

08004dfc <memset>:
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	4402      	add	r2, r0
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d100      	bne.n	8004e06 <memset+0xa>
 8004e04:	4770      	bx	lr
 8004e06:	f803 1b01 	strb.w	r1, [r3], #1
 8004e0a:	e7f9      	b.n	8004e00 <memset+0x4>

08004e0c <_free_r>:
 8004e0c:	b538      	push	{r3, r4, r5, lr}
 8004e0e:	4605      	mov	r5, r0
 8004e10:	2900      	cmp	r1, #0
 8004e12:	d043      	beq.n	8004e9c <_free_r+0x90>
 8004e14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e18:	1f0c      	subs	r4, r1, #4
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	bfb8      	it	lt
 8004e1e:	18e4      	addlt	r4, r4, r3
 8004e20:	f000 f8ca 	bl	8004fb8 <__malloc_lock>
 8004e24:	4a1e      	ldr	r2, [pc, #120]	; (8004ea0 <_free_r+0x94>)
 8004e26:	6813      	ldr	r3, [r2, #0]
 8004e28:	4610      	mov	r0, r2
 8004e2a:	b933      	cbnz	r3, 8004e3a <_free_r+0x2e>
 8004e2c:	6063      	str	r3, [r4, #4]
 8004e2e:	6014      	str	r4, [r2, #0]
 8004e30:	4628      	mov	r0, r5
 8004e32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e36:	f000 b8c5 	b.w	8004fc4 <__malloc_unlock>
 8004e3a:	42a3      	cmp	r3, r4
 8004e3c:	d90a      	bls.n	8004e54 <_free_r+0x48>
 8004e3e:	6821      	ldr	r1, [r4, #0]
 8004e40:	1862      	adds	r2, r4, r1
 8004e42:	4293      	cmp	r3, r2
 8004e44:	bf01      	itttt	eq
 8004e46:	681a      	ldreq	r2, [r3, #0]
 8004e48:	685b      	ldreq	r3, [r3, #4]
 8004e4a:	1852      	addeq	r2, r2, r1
 8004e4c:	6022      	streq	r2, [r4, #0]
 8004e4e:	6063      	str	r3, [r4, #4]
 8004e50:	6004      	str	r4, [r0, #0]
 8004e52:	e7ed      	b.n	8004e30 <_free_r+0x24>
 8004e54:	461a      	mov	r2, r3
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	b10b      	cbz	r3, 8004e5e <_free_r+0x52>
 8004e5a:	42a3      	cmp	r3, r4
 8004e5c:	d9fa      	bls.n	8004e54 <_free_r+0x48>
 8004e5e:	6811      	ldr	r1, [r2, #0]
 8004e60:	1850      	adds	r0, r2, r1
 8004e62:	42a0      	cmp	r0, r4
 8004e64:	d10b      	bne.n	8004e7e <_free_r+0x72>
 8004e66:	6820      	ldr	r0, [r4, #0]
 8004e68:	4401      	add	r1, r0
 8004e6a:	1850      	adds	r0, r2, r1
 8004e6c:	4283      	cmp	r3, r0
 8004e6e:	6011      	str	r1, [r2, #0]
 8004e70:	d1de      	bne.n	8004e30 <_free_r+0x24>
 8004e72:	6818      	ldr	r0, [r3, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	4401      	add	r1, r0
 8004e78:	6011      	str	r1, [r2, #0]
 8004e7a:	6053      	str	r3, [r2, #4]
 8004e7c:	e7d8      	b.n	8004e30 <_free_r+0x24>
 8004e7e:	d902      	bls.n	8004e86 <_free_r+0x7a>
 8004e80:	230c      	movs	r3, #12
 8004e82:	602b      	str	r3, [r5, #0]
 8004e84:	e7d4      	b.n	8004e30 <_free_r+0x24>
 8004e86:	6820      	ldr	r0, [r4, #0]
 8004e88:	1821      	adds	r1, r4, r0
 8004e8a:	428b      	cmp	r3, r1
 8004e8c:	bf01      	itttt	eq
 8004e8e:	6819      	ldreq	r1, [r3, #0]
 8004e90:	685b      	ldreq	r3, [r3, #4]
 8004e92:	1809      	addeq	r1, r1, r0
 8004e94:	6021      	streq	r1, [r4, #0]
 8004e96:	6063      	str	r3, [r4, #4]
 8004e98:	6054      	str	r4, [r2, #4]
 8004e9a:	e7c9      	b.n	8004e30 <_free_r+0x24>
 8004e9c:	bd38      	pop	{r3, r4, r5, pc}
 8004e9e:	bf00      	nop
 8004ea0:	200005fc 	.word	0x200005fc

08004ea4 <_malloc_r>:
 8004ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea6:	1ccd      	adds	r5, r1, #3
 8004ea8:	f025 0503 	bic.w	r5, r5, #3
 8004eac:	3508      	adds	r5, #8
 8004eae:	2d0c      	cmp	r5, #12
 8004eb0:	bf38      	it	cc
 8004eb2:	250c      	movcc	r5, #12
 8004eb4:	2d00      	cmp	r5, #0
 8004eb6:	4606      	mov	r6, r0
 8004eb8:	db01      	blt.n	8004ebe <_malloc_r+0x1a>
 8004eba:	42a9      	cmp	r1, r5
 8004ebc:	d903      	bls.n	8004ec6 <_malloc_r+0x22>
 8004ebe:	230c      	movs	r3, #12
 8004ec0:	6033      	str	r3, [r6, #0]
 8004ec2:	2000      	movs	r0, #0
 8004ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ec6:	f000 f877 	bl	8004fb8 <__malloc_lock>
 8004eca:	4921      	ldr	r1, [pc, #132]	; (8004f50 <_malloc_r+0xac>)
 8004ecc:	680a      	ldr	r2, [r1, #0]
 8004ece:	4614      	mov	r4, r2
 8004ed0:	b99c      	cbnz	r4, 8004efa <_malloc_r+0x56>
 8004ed2:	4f20      	ldr	r7, [pc, #128]	; (8004f54 <_malloc_r+0xb0>)
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	b923      	cbnz	r3, 8004ee2 <_malloc_r+0x3e>
 8004ed8:	4621      	mov	r1, r4
 8004eda:	4630      	mov	r0, r6
 8004edc:	f000 f83c 	bl	8004f58 <_sbrk_r>
 8004ee0:	6038      	str	r0, [r7, #0]
 8004ee2:	4629      	mov	r1, r5
 8004ee4:	4630      	mov	r0, r6
 8004ee6:	f000 f837 	bl	8004f58 <_sbrk_r>
 8004eea:	1c43      	adds	r3, r0, #1
 8004eec:	d123      	bne.n	8004f36 <_malloc_r+0x92>
 8004eee:	230c      	movs	r3, #12
 8004ef0:	4630      	mov	r0, r6
 8004ef2:	6033      	str	r3, [r6, #0]
 8004ef4:	f000 f866 	bl	8004fc4 <__malloc_unlock>
 8004ef8:	e7e3      	b.n	8004ec2 <_malloc_r+0x1e>
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	1b5b      	subs	r3, r3, r5
 8004efe:	d417      	bmi.n	8004f30 <_malloc_r+0x8c>
 8004f00:	2b0b      	cmp	r3, #11
 8004f02:	d903      	bls.n	8004f0c <_malloc_r+0x68>
 8004f04:	6023      	str	r3, [r4, #0]
 8004f06:	441c      	add	r4, r3
 8004f08:	6025      	str	r5, [r4, #0]
 8004f0a:	e004      	b.n	8004f16 <_malloc_r+0x72>
 8004f0c:	6863      	ldr	r3, [r4, #4]
 8004f0e:	42a2      	cmp	r2, r4
 8004f10:	bf0c      	ite	eq
 8004f12:	600b      	streq	r3, [r1, #0]
 8004f14:	6053      	strne	r3, [r2, #4]
 8004f16:	4630      	mov	r0, r6
 8004f18:	f000 f854 	bl	8004fc4 <__malloc_unlock>
 8004f1c:	f104 000b 	add.w	r0, r4, #11
 8004f20:	1d23      	adds	r3, r4, #4
 8004f22:	f020 0007 	bic.w	r0, r0, #7
 8004f26:	1ac2      	subs	r2, r0, r3
 8004f28:	d0cc      	beq.n	8004ec4 <_malloc_r+0x20>
 8004f2a:	1a1b      	subs	r3, r3, r0
 8004f2c:	50a3      	str	r3, [r4, r2]
 8004f2e:	e7c9      	b.n	8004ec4 <_malloc_r+0x20>
 8004f30:	4622      	mov	r2, r4
 8004f32:	6864      	ldr	r4, [r4, #4]
 8004f34:	e7cc      	b.n	8004ed0 <_malloc_r+0x2c>
 8004f36:	1cc4      	adds	r4, r0, #3
 8004f38:	f024 0403 	bic.w	r4, r4, #3
 8004f3c:	42a0      	cmp	r0, r4
 8004f3e:	d0e3      	beq.n	8004f08 <_malloc_r+0x64>
 8004f40:	1a21      	subs	r1, r4, r0
 8004f42:	4630      	mov	r0, r6
 8004f44:	f000 f808 	bl	8004f58 <_sbrk_r>
 8004f48:	3001      	adds	r0, #1
 8004f4a:	d1dd      	bne.n	8004f08 <_malloc_r+0x64>
 8004f4c:	e7cf      	b.n	8004eee <_malloc_r+0x4a>
 8004f4e:	bf00      	nop
 8004f50:	200005fc 	.word	0x200005fc
 8004f54:	20000600 	.word	0x20000600

08004f58 <_sbrk_r>:
 8004f58:	b538      	push	{r3, r4, r5, lr}
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	4d05      	ldr	r5, [pc, #20]	; (8004f74 <_sbrk_r+0x1c>)
 8004f5e:	4604      	mov	r4, r0
 8004f60:	4608      	mov	r0, r1
 8004f62:	602b      	str	r3, [r5, #0]
 8004f64:	f7fb fbb0 	bl	80006c8 <_sbrk>
 8004f68:	1c43      	adds	r3, r0, #1
 8004f6a:	d102      	bne.n	8004f72 <_sbrk_r+0x1a>
 8004f6c:	682b      	ldr	r3, [r5, #0]
 8004f6e:	b103      	cbz	r3, 8004f72 <_sbrk_r+0x1a>
 8004f70:	6023      	str	r3, [r4, #0]
 8004f72:	bd38      	pop	{r3, r4, r5, pc}
 8004f74:	20000730 	.word	0x20000730

08004f78 <siprintf>:
 8004f78:	b40e      	push	{r1, r2, r3}
 8004f7a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f7e:	b500      	push	{lr}
 8004f80:	b09c      	sub	sp, #112	; 0x70
 8004f82:	ab1d      	add	r3, sp, #116	; 0x74
 8004f84:	9002      	str	r0, [sp, #8]
 8004f86:	9006      	str	r0, [sp, #24]
 8004f88:	9107      	str	r1, [sp, #28]
 8004f8a:	9104      	str	r1, [sp, #16]
 8004f8c:	4808      	ldr	r0, [pc, #32]	; (8004fb0 <siprintf+0x38>)
 8004f8e:	4909      	ldr	r1, [pc, #36]	; (8004fb4 <siprintf+0x3c>)
 8004f90:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f94:	9105      	str	r1, [sp, #20]
 8004f96:	6800      	ldr	r0, [r0, #0]
 8004f98:	a902      	add	r1, sp, #8
 8004f9a:	9301      	str	r3, [sp, #4]
 8004f9c:	f000 f874 	bl	8005088 <_svfiprintf_r>
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	9b02      	ldr	r3, [sp, #8]
 8004fa4:	701a      	strb	r2, [r3, #0]
 8004fa6:	b01c      	add	sp, #112	; 0x70
 8004fa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fac:	b003      	add	sp, #12
 8004fae:	4770      	bx	lr
 8004fb0:	2000001c 	.word	0x2000001c
 8004fb4:	ffff0208 	.word	0xffff0208

08004fb8 <__malloc_lock>:
 8004fb8:	4801      	ldr	r0, [pc, #4]	; (8004fc0 <__malloc_lock+0x8>)
 8004fba:	f000 bafb 	b.w	80055b4 <__retarget_lock_acquire_recursive>
 8004fbe:	bf00      	nop
 8004fc0:	20000738 	.word	0x20000738

08004fc4 <__malloc_unlock>:
 8004fc4:	4801      	ldr	r0, [pc, #4]	; (8004fcc <__malloc_unlock+0x8>)
 8004fc6:	f000 baf6 	b.w	80055b6 <__retarget_lock_release_recursive>
 8004fca:	bf00      	nop
 8004fcc:	20000738 	.word	0x20000738

08004fd0 <__ssputs_r>:
 8004fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fd4:	688e      	ldr	r6, [r1, #8]
 8004fd6:	4682      	mov	sl, r0
 8004fd8:	429e      	cmp	r6, r3
 8004fda:	460c      	mov	r4, r1
 8004fdc:	4690      	mov	r8, r2
 8004fde:	461f      	mov	r7, r3
 8004fe0:	d838      	bhi.n	8005054 <__ssputs_r+0x84>
 8004fe2:	898a      	ldrh	r2, [r1, #12]
 8004fe4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004fe8:	d032      	beq.n	8005050 <__ssputs_r+0x80>
 8004fea:	6825      	ldr	r5, [r4, #0]
 8004fec:	6909      	ldr	r1, [r1, #16]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	eba5 0901 	sub.w	r9, r5, r1
 8004ff4:	6965      	ldr	r5, [r4, #20]
 8004ff6:	444b      	add	r3, r9
 8004ff8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ffc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005000:	106d      	asrs	r5, r5, #1
 8005002:	429d      	cmp	r5, r3
 8005004:	bf38      	it	cc
 8005006:	461d      	movcc	r5, r3
 8005008:	0553      	lsls	r3, r2, #21
 800500a:	d531      	bpl.n	8005070 <__ssputs_r+0xa0>
 800500c:	4629      	mov	r1, r5
 800500e:	f7ff ff49 	bl	8004ea4 <_malloc_r>
 8005012:	4606      	mov	r6, r0
 8005014:	b950      	cbnz	r0, 800502c <__ssputs_r+0x5c>
 8005016:	230c      	movs	r3, #12
 8005018:	f04f 30ff 	mov.w	r0, #4294967295
 800501c:	f8ca 3000 	str.w	r3, [sl]
 8005020:	89a3      	ldrh	r3, [r4, #12]
 8005022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005026:	81a3      	strh	r3, [r4, #12]
 8005028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800502c:	464a      	mov	r2, r9
 800502e:	6921      	ldr	r1, [r4, #16]
 8005030:	f7ff fed6 	bl	8004de0 <memcpy>
 8005034:	89a3      	ldrh	r3, [r4, #12]
 8005036:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800503a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800503e:	81a3      	strh	r3, [r4, #12]
 8005040:	6126      	str	r6, [r4, #16]
 8005042:	444e      	add	r6, r9
 8005044:	6026      	str	r6, [r4, #0]
 8005046:	463e      	mov	r6, r7
 8005048:	6165      	str	r5, [r4, #20]
 800504a:	eba5 0509 	sub.w	r5, r5, r9
 800504e:	60a5      	str	r5, [r4, #8]
 8005050:	42be      	cmp	r6, r7
 8005052:	d900      	bls.n	8005056 <__ssputs_r+0x86>
 8005054:	463e      	mov	r6, r7
 8005056:	4632      	mov	r2, r6
 8005058:	4641      	mov	r1, r8
 800505a:	6820      	ldr	r0, [r4, #0]
 800505c:	f000 faba 	bl	80055d4 <memmove>
 8005060:	68a3      	ldr	r3, [r4, #8]
 8005062:	6822      	ldr	r2, [r4, #0]
 8005064:	1b9b      	subs	r3, r3, r6
 8005066:	4432      	add	r2, r6
 8005068:	2000      	movs	r0, #0
 800506a:	60a3      	str	r3, [r4, #8]
 800506c:	6022      	str	r2, [r4, #0]
 800506e:	e7db      	b.n	8005028 <__ssputs_r+0x58>
 8005070:	462a      	mov	r2, r5
 8005072:	f000 fac9 	bl	8005608 <_realloc_r>
 8005076:	4606      	mov	r6, r0
 8005078:	2800      	cmp	r0, #0
 800507a:	d1e1      	bne.n	8005040 <__ssputs_r+0x70>
 800507c:	4650      	mov	r0, sl
 800507e:	6921      	ldr	r1, [r4, #16]
 8005080:	f7ff fec4 	bl	8004e0c <_free_r>
 8005084:	e7c7      	b.n	8005016 <__ssputs_r+0x46>
	...

08005088 <_svfiprintf_r>:
 8005088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800508c:	4698      	mov	r8, r3
 800508e:	898b      	ldrh	r3, [r1, #12]
 8005090:	4607      	mov	r7, r0
 8005092:	061b      	lsls	r3, r3, #24
 8005094:	460d      	mov	r5, r1
 8005096:	4614      	mov	r4, r2
 8005098:	b09d      	sub	sp, #116	; 0x74
 800509a:	d50e      	bpl.n	80050ba <_svfiprintf_r+0x32>
 800509c:	690b      	ldr	r3, [r1, #16]
 800509e:	b963      	cbnz	r3, 80050ba <_svfiprintf_r+0x32>
 80050a0:	2140      	movs	r1, #64	; 0x40
 80050a2:	f7ff feff 	bl	8004ea4 <_malloc_r>
 80050a6:	6028      	str	r0, [r5, #0]
 80050a8:	6128      	str	r0, [r5, #16]
 80050aa:	b920      	cbnz	r0, 80050b6 <_svfiprintf_r+0x2e>
 80050ac:	230c      	movs	r3, #12
 80050ae:	603b      	str	r3, [r7, #0]
 80050b0:	f04f 30ff 	mov.w	r0, #4294967295
 80050b4:	e0d1      	b.n	800525a <_svfiprintf_r+0x1d2>
 80050b6:	2340      	movs	r3, #64	; 0x40
 80050b8:	616b      	str	r3, [r5, #20]
 80050ba:	2300      	movs	r3, #0
 80050bc:	9309      	str	r3, [sp, #36]	; 0x24
 80050be:	2320      	movs	r3, #32
 80050c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80050c4:	2330      	movs	r3, #48	; 0x30
 80050c6:	f04f 0901 	mov.w	r9, #1
 80050ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80050ce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005274 <_svfiprintf_r+0x1ec>
 80050d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050d6:	4623      	mov	r3, r4
 80050d8:	469a      	mov	sl, r3
 80050da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050de:	b10a      	cbz	r2, 80050e4 <_svfiprintf_r+0x5c>
 80050e0:	2a25      	cmp	r2, #37	; 0x25
 80050e2:	d1f9      	bne.n	80050d8 <_svfiprintf_r+0x50>
 80050e4:	ebba 0b04 	subs.w	fp, sl, r4
 80050e8:	d00b      	beq.n	8005102 <_svfiprintf_r+0x7a>
 80050ea:	465b      	mov	r3, fp
 80050ec:	4622      	mov	r2, r4
 80050ee:	4629      	mov	r1, r5
 80050f0:	4638      	mov	r0, r7
 80050f2:	f7ff ff6d 	bl	8004fd0 <__ssputs_r>
 80050f6:	3001      	adds	r0, #1
 80050f8:	f000 80aa 	beq.w	8005250 <_svfiprintf_r+0x1c8>
 80050fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050fe:	445a      	add	r2, fp
 8005100:	9209      	str	r2, [sp, #36]	; 0x24
 8005102:	f89a 3000 	ldrb.w	r3, [sl]
 8005106:	2b00      	cmp	r3, #0
 8005108:	f000 80a2 	beq.w	8005250 <_svfiprintf_r+0x1c8>
 800510c:	2300      	movs	r3, #0
 800510e:	f04f 32ff 	mov.w	r2, #4294967295
 8005112:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005116:	f10a 0a01 	add.w	sl, sl, #1
 800511a:	9304      	str	r3, [sp, #16]
 800511c:	9307      	str	r3, [sp, #28]
 800511e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005122:	931a      	str	r3, [sp, #104]	; 0x68
 8005124:	4654      	mov	r4, sl
 8005126:	2205      	movs	r2, #5
 8005128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800512c:	4851      	ldr	r0, [pc, #324]	; (8005274 <_svfiprintf_r+0x1ec>)
 800512e:	f000 fa43 	bl	80055b8 <memchr>
 8005132:	9a04      	ldr	r2, [sp, #16]
 8005134:	b9d8      	cbnz	r0, 800516e <_svfiprintf_r+0xe6>
 8005136:	06d0      	lsls	r0, r2, #27
 8005138:	bf44      	itt	mi
 800513a:	2320      	movmi	r3, #32
 800513c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005140:	0711      	lsls	r1, r2, #28
 8005142:	bf44      	itt	mi
 8005144:	232b      	movmi	r3, #43	; 0x2b
 8005146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800514a:	f89a 3000 	ldrb.w	r3, [sl]
 800514e:	2b2a      	cmp	r3, #42	; 0x2a
 8005150:	d015      	beq.n	800517e <_svfiprintf_r+0xf6>
 8005152:	4654      	mov	r4, sl
 8005154:	2000      	movs	r0, #0
 8005156:	f04f 0c0a 	mov.w	ip, #10
 800515a:	9a07      	ldr	r2, [sp, #28]
 800515c:	4621      	mov	r1, r4
 800515e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005162:	3b30      	subs	r3, #48	; 0x30
 8005164:	2b09      	cmp	r3, #9
 8005166:	d94e      	bls.n	8005206 <_svfiprintf_r+0x17e>
 8005168:	b1b0      	cbz	r0, 8005198 <_svfiprintf_r+0x110>
 800516a:	9207      	str	r2, [sp, #28]
 800516c:	e014      	b.n	8005198 <_svfiprintf_r+0x110>
 800516e:	eba0 0308 	sub.w	r3, r0, r8
 8005172:	fa09 f303 	lsl.w	r3, r9, r3
 8005176:	4313      	orrs	r3, r2
 8005178:	46a2      	mov	sl, r4
 800517a:	9304      	str	r3, [sp, #16]
 800517c:	e7d2      	b.n	8005124 <_svfiprintf_r+0x9c>
 800517e:	9b03      	ldr	r3, [sp, #12]
 8005180:	1d19      	adds	r1, r3, #4
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	9103      	str	r1, [sp, #12]
 8005186:	2b00      	cmp	r3, #0
 8005188:	bfbb      	ittet	lt
 800518a:	425b      	neglt	r3, r3
 800518c:	f042 0202 	orrlt.w	r2, r2, #2
 8005190:	9307      	strge	r3, [sp, #28]
 8005192:	9307      	strlt	r3, [sp, #28]
 8005194:	bfb8      	it	lt
 8005196:	9204      	strlt	r2, [sp, #16]
 8005198:	7823      	ldrb	r3, [r4, #0]
 800519a:	2b2e      	cmp	r3, #46	; 0x2e
 800519c:	d10c      	bne.n	80051b8 <_svfiprintf_r+0x130>
 800519e:	7863      	ldrb	r3, [r4, #1]
 80051a0:	2b2a      	cmp	r3, #42	; 0x2a
 80051a2:	d135      	bne.n	8005210 <_svfiprintf_r+0x188>
 80051a4:	9b03      	ldr	r3, [sp, #12]
 80051a6:	3402      	adds	r4, #2
 80051a8:	1d1a      	adds	r2, r3, #4
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	9203      	str	r2, [sp, #12]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	bfb8      	it	lt
 80051b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80051b6:	9305      	str	r3, [sp, #20]
 80051b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005284 <_svfiprintf_r+0x1fc>
 80051bc:	2203      	movs	r2, #3
 80051be:	4650      	mov	r0, sl
 80051c0:	7821      	ldrb	r1, [r4, #0]
 80051c2:	f000 f9f9 	bl	80055b8 <memchr>
 80051c6:	b140      	cbz	r0, 80051da <_svfiprintf_r+0x152>
 80051c8:	2340      	movs	r3, #64	; 0x40
 80051ca:	eba0 000a 	sub.w	r0, r0, sl
 80051ce:	fa03 f000 	lsl.w	r0, r3, r0
 80051d2:	9b04      	ldr	r3, [sp, #16]
 80051d4:	3401      	adds	r4, #1
 80051d6:	4303      	orrs	r3, r0
 80051d8:	9304      	str	r3, [sp, #16]
 80051da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051de:	2206      	movs	r2, #6
 80051e0:	4825      	ldr	r0, [pc, #148]	; (8005278 <_svfiprintf_r+0x1f0>)
 80051e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051e6:	f000 f9e7 	bl	80055b8 <memchr>
 80051ea:	2800      	cmp	r0, #0
 80051ec:	d038      	beq.n	8005260 <_svfiprintf_r+0x1d8>
 80051ee:	4b23      	ldr	r3, [pc, #140]	; (800527c <_svfiprintf_r+0x1f4>)
 80051f0:	bb1b      	cbnz	r3, 800523a <_svfiprintf_r+0x1b2>
 80051f2:	9b03      	ldr	r3, [sp, #12]
 80051f4:	3307      	adds	r3, #7
 80051f6:	f023 0307 	bic.w	r3, r3, #7
 80051fa:	3308      	adds	r3, #8
 80051fc:	9303      	str	r3, [sp, #12]
 80051fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005200:	4433      	add	r3, r6
 8005202:	9309      	str	r3, [sp, #36]	; 0x24
 8005204:	e767      	b.n	80050d6 <_svfiprintf_r+0x4e>
 8005206:	460c      	mov	r4, r1
 8005208:	2001      	movs	r0, #1
 800520a:	fb0c 3202 	mla	r2, ip, r2, r3
 800520e:	e7a5      	b.n	800515c <_svfiprintf_r+0xd4>
 8005210:	2300      	movs	r3, #0
 8005212:	f04f 0c0a 	mov.w	ip, #10
 8005216:	4619      	mov	r1, r3
 8005218:	3401      	adds	r4, #1
 800521a:	9305      	str	r3, [sp, #20]
 800521c:	4620      	mov	r0, r4
 800521e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005222:	3a30      	subs	r2, #48	; 0x30
 8005224:	2a09      	cmp	r2, #9
 8005226:	d903      	bls.n	8005230 <_svfiprintf_r+0x1a8>
 8005228:	2b00      	cmp	r3, #0
 800522a:	d0c5      	beq.n	80051b8 <_svfiprintf_r+0x130>
 800522c:	9105      	str	r1, [sp, #20]
 800522e:	e7c3      	b.n	80051b8 <_svfiprintf_r+0x130>
 8005230:	4604      	mov	r4, r0
 8005232:	2301      	movs	r3, #1
 8005234:	fb0c 2101 	mla	r1, ip, r1, r2
 8005238:	e7f0      	b.n	800521c <_svfiprintf_r+0x194>
 800523a:	ab03      	add	r3, sp, #12
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	462a      	mov	r2, r5
 8005240:	4638      	mov	r0, r7
 8005242:	4b0f      	ldr	r3, [pc, #60]	; (8005280 <_svfiprintf_r+0x1f8>)
 8005244:	a904      	add	r1, sp, #16
 8005246:	f3af 8000 	nop.w
 800524a:	1c42      	adds	r2, r0, #1
 800524c:	4606      	mov	r6, r0
 800524e:	d1d6      	bne.n	80051fe <_svfiprintf_r+0x176>
 8005250:	89ab      	ldrh	r3, [r5, #12]
 8005252:	065b      	lsls	r3, r3, #25
 8005254:	f53f af2c 	bmi.w	80050b0 <_svfiprintf_r+0x28>
 8005258:	9809      	ldr	r0, [sp, #36]	; 0x24
 800525a:	b01d      	add	sp, #116	; 0x74
 800525c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005260:	ab03      	add	r3, sp, #12
 8005262:	9300      	str	r3, [sp, #0]
 8005264:	462a      	mov	r2, r5
 8005266:	4638      	mov	r0, r7
 8005268:	4b05      	ldr	r3, [pc, #20]	; (8005280 <_svfiprintf_r+0x1f8>)
 800526a:	a904      	add	r1, sp, #16
 800526c:	f000 f87c 	bl	8005368 <_printf_i>
 8005270:	e7eb      	b.n	800524a <_svfiprintf_r+0x1c2>
 8005272:	bf00      	nop
 8005274:	08005e3a 	.word	0x08005e3a
 8005278:	08005e44 	.word	0x08005e44
 800527c:	00000000 	.word	0x00000000
 8005280:	08004fd1 	.word	0x08004fd1
 8005284:	08005e40 	.word	0x08005e40

08005288 <_printf_common>:
 8005288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800528c:	4616      	mov	r6, r2
 800528e:	4699      	mov	r9, r3
 8005290:	688a      	ldr	r2, [r1, #8]
 8005292:	690b      	ldr	r3, [r1, #16]
 8005294:	4607      	mov	r7, r0
 8005296:	4293      	cmp	r3, r2
 8005298:	bfb8      	it	lt
 800529a:	4613      	movlt	r3, r2
 800529c:	6033      	str	r3, [r6, #0]
 800529e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052a2:	460c      	mov	r4, r1
 80052a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052a8:	b10a      	cbz	r2, 80052ae <_printf_common+0x26>
 80052aa:	3301      	adds	r3, #1
 80052ac:	6033      	str	r3, [r6, #0]
 80052ae:	6823      	ldr	r3, [r4, #0]
 80052b0:	0699      	lsls	r1, r3, #26
 80052b2:	bf42      	ittt	mi
 80052b4:	6833      	ldrmi	r3, [r6, #0]
 80052b6:	3302      	addmi	r3, #2
 80052b8:	6033      	strmi	r3, [r6, #0]
 80052ba:	6825      	ldr	r5, [r4, #0]
 80052bc:	f015 0506 	ands.w	r5, r5, #6
 80052c0:	d106      	bne.n	80052d0 <_printf_common+0x48>
 80052c2:	f104 0a19 	add.w	sl, r4, #25
 80052c6:	68e3      	ldr	r3, [r4, #12]
 80052c8:	6832      	ldr	r2, [r6, #0]
 80052ca:	1a9b      	subs	r3, r3, r2
 80052cc:	42ab      	cmp	r3, r5
 80052ce:	dc28      	bgt.n	8005322 <_printf_common+0x9a>
 80052d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052d4:	1e13      	subs	r3, r2, #0
 80052d6:	6822      	ldr	r2, [r4, #0]
 80052d8:	bf18      	it	ne
 80052da:	2301      	movne	r3, #1
 80052dc:	0692      	lsls	r2, r2, #26
 80052de:	d42d      	bmi.n	800533c <_printf_common+0xb4>
 80052e0:	4649      	mov	r1, r9
 80052e2:	4638      	mov	r0, r7
 80052e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052e8:	47c0      	blx	r8
 80052ea:	3001      	adds	r0, #1
 80052ec:	d020      	beq.n	8005330 <_printf_common+0xa8>
 80052ee:	6823      	ldr	r3, [r4, #0]
 80052f0:	68e5      	ldr	r5, [r4, #12]
 80052f2:	f003 0306 	and.w	r3, r3, #6
 80052f6:	2b04      	cmp	r3, #4
 80052f8:	bf18      	it	ne
 80052fa:	2500      	movne	r5, #0
 80052fc:	6832      	ldr	r2, [r6, #0]
 80052fe:	f04f 0600 	mov.w	r6, #0
 8005302:	68a3      	ldr	r3, [r4, #8]
 8005304:	bf08      	it	eq
 8005306:	1aad      	subeq	r5, r5, r2
 8005308:	6922      	ldr	r2, [r4, #16]
 800530a:	bf08      	it	eq
 800530c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005310:	4293      	cmp	r3, r2
 8005312:	bfc4      	itt	gt
 8005314:	1a9b      	subgt	r3, r3, r2
 8005316:	18ed      	addgt	r5, r5, r3
 8005318:	341a      	adds	r4, #26
 800531a:	42b5      	cmp	r5, r6
 800531c:	d11a      	bne.n	8005354 <_printf_common+0xcc>
 800531e:	2000      	movs	r0, #0
 8005320:	e008      	b.n	8005334 <_printf_common+0xac>
 8005322:	2301      	movs	r3, #1
 8005324:	4652      	mov	r2, sl
 8005326:	4649      	mov	r1, r9
 8005328:	4638      	mov	r0, r7
 800532a:	47c0      	blx	r8
 800532c:	3001      	adds	r0, #1
 800532e:	d103      	bne.n	8005338 <_printf_common+0xb0>
 8005330:	f04f 30ff 	mov.w	r0, #4294967295
 8005334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005338:	3501      	adds	r5, #1
 800533a:	e7c4      	b.n	80052c6 <_printf_common+0x3e>
 800533c:	2030      	movs	r0, #48	; 0x30
 800533e:	18e1      	adds	r1, r4, r3
 8005340:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005344:	1c5a      	adds	r2, r3, #1
 8005346:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800534a:	4422      	add	r2, r4
 800534c:	3302      	adds	r3, #2
 800534e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005352:	e7c5      	b.n	80052e0 <_printf_common+0x58>
 8005354:	2301      	movs	r3, #1
 8005356:	4622      	mov	r2, r4
 8005358:	4649      	mov	r1, r9
 800535a:	4638      	mov	r0, r7
 800535c:	47c0      	blx	r8
 800535e:	3001      	adds	r0, #1
 8005360:	d0e6      	beq.n	8005330 <_printf_common+0xa8>
 8005362:	3601      	adds	r6, #1
 8005364:	e7d9      	b.n	800531a <_printf_common+0x92>
	...

08005368 <_printf_i>:
 8005368:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800536c:	460c      	mov	r4, r1
 800536e:	7e27      	ldrb	r7, [r4, #24]
 8005370:	4691      	mov	r9, r2
 8005372:	2f78      	cmp	r7, #120	; 0x78
 8005374:	4680      	mov	r8, r0
 8005376:	469a      	mov	sl, r3
 8005378:	990c      	ldr	r1, [sp, #48]	; 0x30
 800537a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800537e:	d807      	bhi.n	8005390 <_printf_i+0x28>
 8005380:	2f62      	cmp	r7, #98	; 0x62
 8005382:	d80a      	bhi.n	800539a <_printf_i+0x32>
 8005384:	2f00      	cmp	r7, #0
 8005386:	f000 80d9 	beq.w	800553c <_printf_i+0x1d4>
 800538a:	2f58      	cmp	r7, #88	; 0x58
 800538c:	f000 80a4 	beq.w	80054d8 <_printf_i+0x170>
 8005390:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005394:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005398:	e03a      	b.n	8005410 <_printf_i+0xa8>
 800539a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800539e:	2b15      	cmp	r3, #21
 80053a0:	d8f6      	bhi.n	8005390 <_printf_i+0x28>
 80053a2:	a001      	add	r0, pc, #4	; (adr r0, 80053a8 <_printf_i+0x40>)
 80053a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80053a8:	08005401 	.word	0x08005401
 80053ac:	08005415 	.word	0x08005415
 80053b0:	08005391 	.word	0x08005391
 80053b4:	08005391 	.word	0x08005391
 80053b8:	08005391 	.word	0x08005391
 80053bc:	08005391 	.word	0x08005391
 80053c0:	08005415 	.word	0x08005415
 80053c4:	08005391 	.word	0x08005391
 80053c8:	08005391 	.word	0x08005391
 80053cc:	08005391 	.word	0x08005391
 80053d0:	08005391 	.word	0x08005391
 80053d4:	08005523 	.word	0x08005523
 80053d8:	08005445 	.word	0x08005445
 80053dc:	08005505 	.word	0x08005505
 80053e0:	08005391 	.word	0x08005391
 80053e4:	08005391 	.word	0x08005391
 80053e8:	08005545 	.word	0x08005545
 80053ec:	08005391 	.word	0x08005391
 80053f0:	08005445 	.word	0x08005445
 80053f4:	08005391 	.word	0x08005391
 80053f8:	08005391 	.word	0x08005391
 80053fc:	0800550d 	.word	0x0800550d
 8005400:	680b      	ldr	r3, [r1, #0]
 8005402:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005406:	1d1a      	adds	r2, r3, #4
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	600a      	str	r2, [r1, #0]
 800540c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005410:	2301      	movs	r3, #1
 8005412:	e0a4      	b.n	800555e <_printf_i+0x1f6>
 8005414:	6825      	ldr	r5, [r4, #0]
 8005416:	6808      	ldr	r0, [r1, #0]
 8005418:	062e      	lsls	r6, r5, #24
 800541a:	f100 0304 	add.w	r3, r0, #4
 800541e:	d50a      	bpl.n	8005436 <_printf_i+0xce>
 8005420:	6805      	ldr	r5, [r0, #0]
 8005422:	600b      	str	r3, [r1, #0]
 8005424:	2d00      	cmp	r5, #0
 8005426:	da03      	bge.n	8005430 <_printf_i+0xc8>
 8005428:	232d      	movs	r3, #45	; 0x2d
 800542a:	426d      	negs	r5, r5
 800542c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005430:	230a      	movs	r3, #10
 8005432:	485e      	ldr	r0, [pc, #376]	; (80055ac <_printf_i+0x244>)
 8005434:	e019      	b.n	800546a <_printf_i+0x102>
 8005436:	f015 0f40 	tst.w	r5, #64	; 0x40
 800543a:	6805      	ldr	r5, [r0, #0]
 800543c:	600b      	str	r3, [r1, #0]
 800543e:	bf18      	it	ne
 8005440:	b22d      	sxthne	r5, r5
 8005442:	e7ef      	b.n	8005424 <_printf_i+0xbc>
 8005444:	680b      	ldr	r3, [r1, #0]
 8005446:	6825      	ldr	r5, [r4, #0]
 8005448:	1d18      	adds	r0, r3, #4
 800544a:	6008      	str	r0, [r1, #0]
 800544c:	0628      	lsls	r0, r5, #24
 800544e:	d501      	bpl.n	8005454 <_printf_i+0xec>
 8005450:	681d      	ldr	r5, [r3, #0]
 8005452:	e002      	b.n	800545a <_printf_i+0xf2>
 8005454:	0669      	lsls	r1, r5, #25
 8005456:	d5fb      	bpl.n	8005450 <_printf_i+0xe8>
 8005458:	881d      	ldrh	r5, [r3, #0]
 800545a:	2f6f      	cmp	r7, #111	; 0x6f
 800545c:	bf0c      	ite	eq
 800545e:	2308      	moveq	r3, #8
 8005460:	230a      	movne	r3, #10
 8005462:	4852      	ldr	r0, [pc, #328]	; (80055ac <_printf_i+0x244>)
 8005464:	2100      	movs	r1, #0
 8005466:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800546a:	6866      	ldr	r6, [r4, #4]
 800546c:	2e00      	cmp	r6, #0
 800546e:	bfa8      	it	ge
 8005470:	6821      	ldrge	r1, [r4, #0]
 8005472:	60a6      	str	r6, [r4, #8]
 8005474:	bfa4      	itt	ge
 8005476:	f021 0104 	bicge.w	r1, r1, #4
 800547a:	6021      	strge	r1, [r4, #0]
 800547c:	b90d      	cbnz	r5, 8005482 <_printf_i+0x11a>
 800547e:	2e00      	cmp	r6, #0
 8005480:	d04d      	beq.n	800551e <_printf_i+0x1b6>
 8005482:	4616      	mov	r6, r2
 8005484:	fbb5 f1f3 	udiv	r1, r5, r3
 8005488:	fb03 5711 	mls	r7, r3, r1, r5
 800548c:	5dc7      	ldrb	r7, [r0, r7]
 800548e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005492:	462f      	mov	r7, r5
 8005494:	42bb      	cmp	r3, r7
 8005496:	460d      	mov	r5, r1
 8005498:	d9f4      	bls.n	8005484 <_printf_i+0x11c>
 800549a:	2b08      	cmp	r3, #8
 800549c:	d10b      	bne.n	80054b6 <_printf_i+0x14e>
 800549e:	6823      	ldr	r3, [r4, #0]
 80054a0:	07df      	lsls	r7, r3, #31
 80054a2:	d508      	bpl.n	80054b6 <_printf_i+0x14e>
 80054a4:	6923      	ldr	r3, [r4, #16]
 80054a6:	6861      	ldr	r1, [r4, #4]
 80054a8:	4299      	cmp	r1, r3
 80054aa:	bfde      	ittt	le
 80054ac:	2330      	movle	r3, #48	; 0x30
 80054ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80054b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80054b6:	1b92      	subs	r2, r2, r6
 80054b8:	6122      	str	r2, [r4, #16]
 80054ba:	464b      	mov	r3, r9
 80054bc:	4621      	mov	r1, r4
 80054be:	4640      	mov	r0, r8
 80054c0:	f8cd a000 	str.w	sl, [sp]
 80054c4:	aa03      	add	r2, sp, #12
 80054c6:	f7ff fedf 	bl	8005288 <_printf_common>
 80054ca:	3001      	adds	r0, #1
 80054cc:	d14c      	bne.n	8005568 <_printf_i+0x200>
 80054ce:	f04f 30ff 	mov.w	r0, #4294967295
 80054d2:	b004      	add	sp, #16
 80054d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054d8:	4834      	ldr	r0, [pc, #208]	; (80055ac <_printf_i+0x244>)
 80054da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80054de:	680e      	ldr	r6, [r1, #0]
 80054e0:	6823      	ldr	r3, [r4, #0]
 80054e2:	f856 5b04 	ldr.w	r5, [r6], #4
 80054e6:	061f      	lsls	r7, r3, #24
 80054e8:	600e      	str	r6, [r1, #0]
 80054ea:	d514      	bpl.n	8005516 <_printf_i+0x1ae>
 80054ec:	07d9      	lsls	r1, r3, #31
 80054ee:	bf44      	itt	mi
 80054f0:	f043 0320 	orrmi.w	r3, r3, #32
 80054f4:	6023      	strmi	r3, [r4, #0]
 80054f6:	b91d      	cbnz	r5, 8005500 <_printf_i+0x198>
 80054f8:	6823      	ldr	r3, [r4, #0]
 80054fa:	f023 0320 	bic.w	r3, r3, #32
 80054fe:	6023      	str	r3, [r4, #0]
 8005500:	2310      	movs	r3, #16
 8005502:	e7af      	b.n	8005464 <_printf_i+0xfc>
 8005504:	6823      	ldr	r3, [r4, #0]
 8005506:	f043 0320 	orr.w	r3, r3, #32
 800550a:	6023      	str	r3, [r4, #0]
 800550c:	2378      	movs	r3, #120	; 0x78
 800550e:	4828      	ldr	r0, [pc, #160]	; (80055b0 <_printf_i+0x248>)
 8005510:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005514:	e7e3      	b.n	80054de <_printf_i+0x176>
 8005516:	065e      	lsls	r6, r3, #25
 8005518:	bf48      	it	mi
 800551a:	b2ad      	uxthmi	r5, r5
 800551c:	e7e6      	b.n	80054ec <_printf_i+0x184>
 800551e:	4616      	mov	r6, r2
 8005520:	e7bb      	b.n	800549a <_printf_i+0x132>
 8005522:	680b      	ldr	r3, [r1, #0]
 8005524:	6826      	ldr	r6, [r4, #0]
 8005526:	1d1d      	adds	r5, r3, #4
 8005528:	6960      	ldr	r0, [r4, #20]
 800552a:	600d      	str	r5, [r1, #0]
 800552c:	0635      	lsls	r5, r6, #24
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	d501      	bpl.n	8005536 <_printf_i+0x1ce>
 8005532:	6018      	str	r0, [r3, #0]
 8005534:	e002      	b.n	800553c <_printf_i+0x1d4>
 8005536:	0671      	lsls	r1, r6, #25
 8005538:	d5fb      	bpl.n	8005532 <_printf_i+0x1ca>
 800553a:	8018      	strh	r0, [r3, #0]
 800553c:	2300      	movs	r3, #0
 800553e:	4616      	mov	r6, r2
 8005540:	6123      	str	r3, [r4, #16]
 8005542:	e7ba      	b.n	80054ba <_printf_i+0x152>
 8005544:	680b      	ldr	r3, [r1, #0]
 8005546:	1d1a      	adds	r2, r3, #4
 8005548:	600a      	str	r2, [r1, #0]
 800554a:	681e      	ldr	r6, [r3, #0]
 800554c:	2100      	movs	r1, #0
 800554e:	4630      	mov	r0, r6
 8005550:	6862      	ldr	r2, [r4, #4]
 8005552:	f000 f831 	bl	80055b8 <memchr>
 8005556:	b108      	cbz	r0, 800555c <_printf_i+0x1f4>
 8005558:	1b80      	subs	r0, r0, r6
 800555a:	6060      	str	r0, [r4, #4]
 800555c:	6863      	ldr	r3, [r4, #4]
 800555e:	6123      	str	r3, [r4, #16]
 8005560:	2300      	movs	r3, #0
 8005562:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005566:	e7a8      	b.n	80054ba <_printf_i+0x152>
 8005568:	4632      	mov	r2, r6
 800556a:	4649      	mov	r1, r9
 800556c:	4640      	mov	r0, r8
 800556e:	6923      	ldr	r3, [r4, #16]
 8005570:	47d0      	blx	sl
 8005572:	3001      	adds	r0, #1
 8005574:	d0ab      	beq.n	80054ce <_printf_i+0x166>
 8005576:	6823      	ldr	r3, [r4, #0]
 8005578:	079b      	lsls	r3, r3, #30
 800557a:	d413      	bmi.n	80055a4 <_printf_i+0x23c>
 800557c:	68e0      	ldr	r0, [r4, #12]
 800557e:	9b03      	ldr	r3, [sp, #12]
 8005580:	4298      	cmp	r0, r3
 8005582:	bfb8      	it	lt
 8005584:	4618      	movlt	r0, r3
 8005586:	e7a4      	b.n	80054d2 <_printf_i+0x16a>
 8005588:	2301      	movs	r3, #1
 800558a:	4632      	mov	r2, r6
 800558c:	4649      	mov	r1, r9
 800558e:	4640      	mov	r0, r8
 8005590:	47d0      	blx	sl
 8005592:	3001      	adds	r0, #1
 8005594:	d09b      	beq.n	80054ce <_printf_i+0x166>
 8005596:	3501      	adds	r5, #1
 8005598:	68e3      	ldr	r3, [r4, #12]
 800559a:	9903      	ldr	r1, [sp, #12]
 800559c:	1a5b      	subs	r3, r3, r1
 800559e:	42ab      	cmp	r3, r5
 80055a0:	dcf2      	bgt.n	8005588 <_printf_i+0x220>
 80055a2:	e7eb      	b.n	800557c <_printf_i+0x214>
 80055a4:	2500      	movs	r5, #0
 80055a6:	f104 0619 	add.w	r6, r4, #25
 80055aa:	e7f5      	b.n	8005598 <_printf_i+0x230>
 80055ac:	08005e4b 	.word	0x08005e4b
 80055b0:	08005e5c 	.word	0x08005e5c

080055b4 <__retarget_lock_acquire_recursive>:
 80055b4:	4770      	bx	lr

080055b6 <__retarget_lock_release_recursive>:
 80055b6:	4770      	bx	lr

080055b8 <memchr>:
 80055b8:	4603      	mov	r3, r0
 80055ba:	b510      	push	{r4, lr}
 80055bc:	b2c9      	uxtb	r1, r1
 80055be:	4402      	add	r2, r0
 80055c0:	4293      	cmp	r3, r2
 80055c2:	4618      	mov	r0, r3
 80055c4:	d101      	bne.n	80055ca <memchr+0x12>
 80055c6:	2000      	movs	r0, #0
 80055c8:	e003      	b.n	80055d2 <memchr+0x1a>
 80055ca:	7804      	ldrb	r4, [r0, #0]
 80055cc:	3301      	adds	r3, #1
 80055ce:	428c      	cmp	r4, r1
 80055d0:	d1f6      	bne.n	80055c0 <memchr+0x8>
 80055d2:	bd10      	pop	{r4, pc}

080055d4 <memmove>:
 80055d4:	4288      	cmp	r0, r1
 80055d6:	b510      	push	{r4, lr}
 80055d8:	eb01 0402 	add.w	r4, r1, r2
 80055dc:	d902      	bls.n	80055e4 <memmove+0x10>
 80055de:	4284      	cmp	r4, r0
 80055e0:	4623      	mov	r3, r4
 80055e2:	d807      	bhi.n	80055f4 <memmove+0x20>
 80055e4:	1e43      	subs	r3, r0, #1
 80055e6:	42a1      	cmp	r1, r4
 80055e8:	d008      	beq.n	80055fc <memmove+0x28>
 80055ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80055f2:	e7f8      	b.n	80055e6 <memmove+0x12>
 80055f4:	4601      	mov	r1, r0
 80055f6:	4402      	add	r2, r0
 80055f8:	428a      	cmp	r2, r1
 80055fa:	d100      	bne.n	80055fe <memmove+0x2a>
 80055fc:	bd10      	pop	{r4, pc}
 80055fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005602:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005606:	e7f7      	b.n	80055f8 <memmove+0x24>

08005608 <_realloc_r>:
 8005608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800560a:	4607      	mov	r7, r0
 800560c:	4614      	mov	r4, r2
 800560e:	460e      	mov	r6, r1
 8005610:	b921      	cbnz	r1, 800561c <_realloc_r+0x14>
 8005612:	4611      	mov	r1, r2
 8005614:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005618:	f7ff bc44 	b.w	8004ea4 <_malloc_r>
 800561c:	b922      	cbnz	r2, 8005628 <_realloc_r+0x20>
 800561e:	f7ff fbf5 	bl	8004e0c <_free_r>
 8005622:	4625      	mov	r5, r4
 8005624:	4628      	mov	r0, r5
 8005626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005628:	f000 f814 	bl	8005654 <_malloc_usable_size_r>
 800562c:	42a0      	cmp	r0, r4
 800562e:	d20f      	bcs.n	8005650 <_realloc_r+0x48>
 8005630:	4621      	mov	r1, r4
 8005632:	4638      	mov	r0, r7
 8005634:	f7ff fc36 	bl	8004ea4 <_malloc_r>
 8005638:	4605      	mov	r5, r0
 800563a:	2800      	cmp	r0, #0
 800563c:	d0f2      	beq.n	8005624 <_realloc_r+0x1c>
 800563e:	4631      	mov	r1, r6
 8005640:	4622      	mov	r2, r4
 8005642:	f7ff fbcd 	bl	8004de0 <memcpy>
 8005646:	4631      	mov	r1, r6
 8005648:	4638      	mov	r0, r7
 800564a:	f7ff fbdf 	bl	8004e0c <_free_r>
 800564e:	e7e9      	b.n	8005624 <_realloc_r+0x1c>
 8005650:	4635      	mov	r5, r6
 8005652:	e7e7      	b.n	8005624 <_realloc_r+0x1c>

08005654 <_malloc_usable_size_r>:
 8005654:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005658:	1f18      	subs	r0, r3, #4
 800565a:	2b00      	cmp	r3, #0
 800565c:	bfbc      	itt	lt
 800565e:	580b      	ldrlt	r3, [r1, r0]
 8005660:	18c0      	addlt	r0, r0, r3
 8005662:	4770      	bx	lr

08005664 <_init>:
 8005664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005666:	bf00      	nop
 8005668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800566a:	bc08      	pop	{r3}
 800566c:	469e      	mov	lr, r3
 800566e:	4770      	bx	lr

08005670 <_fini>:
 8005670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005672:	bf00      	nop
 8005674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005676:	bc08      	pop	{r3}
 8005678:	469e      	mov	lr, r3
 800567a:	4770      	bx	lr
